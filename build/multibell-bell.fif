"Asm.fif" include
// automatically generated from `C:\Users\Tigr\AppData\Local\toncli\toncli\func-libs\error_codes.func` `C:\Users\Tigr\AppData\Local\toncli\toncli\func-libs\math.func` `C:\Users\Tigr\AppData\Local\toncli\toncli\func-libs\stdlib.func` `D:\TON_FunC\timer\func\bell.fc` incl:`func/utils-bell.fc` incl:`func/utils.fc` incl:`func/stdlib-ext.fc` 
PROGRAM{
  DECLPROC power
  DECLPROC sqrt
  DECLPROC avg
  DECLPROC exp
  DECLPROC log2
  97986 DECLMETHOD swap_remove
  80537 DECLMETHOD parse_one_action
  DECLPROC empty_slice
  DECLPROC calc_bell_state_init_by_data
  DECLPROC init_bell_with_children
  DECLPROC init_bell_no_children
  DECLPROC bell_info_lr_replace_left
  DECLPROC bell_info_lr_replace_right
  DECLPROC load_core_address
  113387 DECLMETHOD check_ident_proof_get_code
  110149 DECLMETHOD store_ident_proof
  75596 DECLMETHOD bell
  101196 DECLMETHOD bell_destroyed
  122085 DECLMETHOD create_bell
  91783 DECLMETHOD prove_ownership
  70993 DECLMETHOD answer_request_owner
  102351 DECLMETHOD get_nft_data
  73441 DECLMETHOD answer_static_data
  DECLPROC recv_internal
  power PROCREF:<{
    //  x exponent
    OVER	//  x exponent x
    0 EQINT	//  x exponent _3
    IFJMP:<{	//  x exponent
      2DROP	// 
      0 PUSHINT	//  _4=0
    }>	//  x exponent
    DUP	//  x exponent exponent
    0 EQINT	//  x exponent _6
    IFJMP:<{	//  x exponent
      2DROP	// 
      1 PUSHINT	//  _7=1
    }>	//  x exponent
    OVER	//  x counter result
    WHILE:<{
      OVER	//  x counter result counter
      1 GTINT	//  x counter result _11
    }>DO<{	//  x counter result
      s2 PUSH	//  x counter result x
      MUL	//  x counter result
      SWAP	//  x result counter
      DEC	//  x result counter
      SWAP	//  x counter result
    }>	//  x counter result
    2 1 BLKDROP2	//  result
  }>
  sqrt PROCREF:<{
    //  x
    DUP	//  x x
    0 EQINT	//  x _2
    IFJMP:<{	//  x
      DROP	// 
      0 PUSHINT	//  _3=0
    }>	//  x
    DUP	//  x x
    4 LESSINT	//  x _5
    IFJMP:<{	//  x
      DROP	// 
      1 PUSHINT	//  _6=1
    }>	//  x
    DUP	//  x x
    INC	//  x _9
    1 RSHIFT#	//  x z
    OVER	//  x z y
    WHILE:<{
      2DUP	//  x z y z y
      LESS	//  x z y _13
    }>DO<{	//  x z y
      DROP	//  x z
      s0 s1 s0 PUSH3	//  x z y x z
      DIV	//  x z y _14
      ROT	//  x y _14 z
      ADD	//  x y _15
      1 RSHIFT#	//  x y z
      SWAP	//  x z y
    }>	//  x z y
    2 1 BLKDROP2	//  y
  }>
  avg PROCREF:<{
    //  x y
    ADD	//  _2
    1 RSHIFT#	//  _4
  }>
  exp PROCREF:<{
    //  x
    DUP	//  x x
    -1 GTINT	//  x _2
    IF:<{	//  x
      POW2	//  _3
    }>ELSE<{	//  x
      1 PUSHINT	//  x _6=1
      SWAP	//  _6=1 x
      NEGATE	//  _6=1 _8
      RSHIFT	//  _3
    }>
  }>
  log2 PROCREF:<{
    //  x
    0 PUSHINT	//  x n=0
    7 PUSHPOW2	//  x n=0 _3=128
    exp INLINECALLDICT	//  x n=0 _4
    s2 s(-1) PUXC	//  x n=0 x _4
    GEQ	//  x n=0 _5
    IF:<{	//  x n=0
      DROP	//  x
      128 RSHIFT#	//  x
      7 PUSHPOW2	//  x n
    }>	//  x n
    64 PUSHINT	//  x n _10=64
    exp INLINECALLDICT	//  x n _11
    s2 s(-1) PUXC	//  x n x _11
    GEQ	//  x n _12
    IF:<{	//  x n
      SWAP	//  n x
      64 RSHIFT#	//  n x
      SWAP	//  x n
      64 ADDCONST	//  x n
    }>	//  x n
    32 PUSHINT	//  x n _17=32
    exp INLINECALLDICT	//  x n _18
    s2 s(-1) PUXC	//  x n x _18
    GEQ	//  x n _19
    IF:<{	//  x n
      SWAP	//  n x
      32 RSHIFT#	//  n x
      SWAP	//  x n
      32 ADDCONST	//  x n
    }>	//  x n
    16 PUSHINT	//  x n _24=16
    exp INLINECALLDICT	//  x n _25
    s2 s(-1) PUXC	//  x n x _25
    GEQ	//  x n _26
    IF:<{	//  x n
      SWAP	//  n x
      16 RSHIFT#	//  n x
      SWAP	//  x n
      16 ADDCONST	//  x n
    }>	//  x n
    8 PUSHINT	//  x n _31=8
    exp INLINECALLDICT	//  x n _32
    s2 s(-1) PUXC	//  x n x _32
    GEQ	//  x n _33
    IF:<{	//  x n
      SWAP	//  n x
      8 RSHIFT#	//  n x
      SWAP	//  x n
      8 ADDCONST	//  x n
    }>	//  x n
    4 PUSHINT	//  x n _38=4
    exp INLINECALLDICT	//  x n _39
    s2 s(-1) PUXC	//  x n x _39
    GEQ	//  x n _40
    IF:<{	//  x n
      SWAP	//  n x
      4 RSHIFT#	//  n x
      SWAP	//  x n
      4 ADDCONST	//  x n
    }>	//  x n
    2 PUSHINT	//  x n _45=2
    exp INLINECALLDICT	//  x n _46
    s2 s(-1) PUXC	//  x n x _46
    GEQ	//  x n _47
    IF:<{	//  x n
      SWAP	//  n x
      2 RSHIFT#	//  n x
      SWAP	//  x n
      2 ADDCONST	//  x n
    }>	//  x n
    1 PUSHINT	//  x n _52=1
    exp INLINECALLDICT	//  x n _53
    s1 s2 XCHG	//  n x _53
    GEQ	//  n _54
    IF:<{	//  n
      INC	//  n
    }>	//  n
  }>
  swap_remove PROC:<{
    //  t index
    OVER	//  t index t
    TLEN	//  t index _3
    DEC	//  t index l
    s1 s(-1) PUXC	//  t index index l
    EQUAL	//  t index _6
    IFJMP:<{	//  t index
      DROP	//  t
      TPOP	//  t value
    }>	//  t index
    2DUP	//  t index t index
    INDEXVAR	//  t index value
    s0 s2 XCHG	//  value index t
    TPOP	//  value index t _12
    s1 s2 XCHG	//  value t index _12
    SETINDEXVAR	//  value t
    SWAP	//  t value
  }>
  parse_one_action PROC:<{
    //  actions
    LDREF	//  previous actions
    32 LDU	//  previous action_id actions
    OVER
    247711853 PUSHINT	//  previous action_id actions action_id _8=247711853
    EQUAL	//  previous action_id actions _9
    IF:<{	//  previous action_id actions
      NIP	//  previous actions
      4445 PUSHINT	//  previous actions _10=4445
      s0 DUMP	//  previous actions _11
      DROP	//  previous actions
      1397050948 PUSHINT	//  previous actions _12=1397050948
      s0 DUMP	//  previous actions _13
      DROP	//  previous actions
      8 LDU	//  previous _14 actions
      SWAP	//  previous actions _14
      s0 DUMP	//  previous actions _17
      DROP	//  previous actions
      LDREF	//  previous _55 _54
      DROP	//  previous _18
      s0 DUMP	//  previous _20
      DROP	//  previous
    }>ELSE<{	//  previous action_id actions
      OVER
      2907562126 PUSHINT	//  previous action_id actions action_id _21=2907562126
      EQUAL	//  previous action_id actions _22
      IF:<{	//  previous action_id actions
        NIP	//  previous actions
        4445 PUSHINT	//  previous actions _23=4445
        s0 DUMP	//  previous actions _24
        DROP	//  previous actions
        23438651275822149 PUSHINT	//  previous actions _25=23438651275822149
        s0 DUMP	//  previous actions _26
        DROP	//  previous actions
        LDREF	//  previous _57 _56
        DROP	//  previous _27
        s0 DUMP	//  previous _29
        DROP	//  previous
      }>ELSE<{	//  previous action_id actions
        OVER
        921090057 PUSHINT	//  previous action_id actions action_id _30=921090057
        EQUAL	//  previous action_id actions _31
        IF:<{	//  previous action_id actions
          NIP	//  previous actions
          4445 PUSHINT	//  previous actions _32=4445
          s0 DUMP	//  previous actions _33
          DROP	//  previous actions
          23157172037899845 PUSHINT	//  previous actions _34=23157172037899845
          s0 DUMP	//  previous actions _35
          DROP	//  previous actions
          8 LDU	//  previous _36 actions
          SWAP	//  previous actions _36
          s0 DUMP	//  previous actions _39
          DROP	//  previous actions
          LDDICT	//  previous _61 _60
          DROP	//  previous _40
          s0 DUMP	//  previous _42
          DROP	//  previous
        }>ELSE<{	//  previous action_id actions
          DROP	//  previous action_id
          s0 DUMP	//  previous _44
          DROP	//  previous
          100 THROW
        }>
      }>
    }>
    CTOS	//  _47
  }>
  empty_slice PROC:<{
    // 
    NEWC	//  _0
    ENDC	//  _1
    CTOS	//  _2
  }>
  calc_bell_state_init_by_data PROCREF:<{
    //  bell_init_data bell_code
    6 PUSHINT	//  bell_init_data bell_code _2=6
    NEWC	//  bell_init_data bell_code _2=6 _3
    5 STU	//  bell_init_data bell_code _5
    STREF	//  bell_init_data _6
    STREF	//  _7
    ENDC	//  _8
  }>
  init_bell_with_children PROCREF:<{
    //  priority time value dest fwd_body core_address children bell_code
    s0 s7 XCHG
    NEWC	//  bell_code time value dest fwd_body core_address children priority _9
    64 STU	//  bell_code time value dest fwd_body core_address children _11
    s1 s6 XCHG	//  bell_code children value dest fwd_body core_address time _11
    32 STU	//  bell_code children value dest fwd_body core_address _13
    s4 s(-1) PUXC	//  bell_code children value dest fwd_body core_address value _13
    64 STU	//  bell_code children value dest fwd_body core_address _15
    s0 s3 XCHG2	//  bell_code children value core_address fwd_body _15 dest
    STSLICER	//  bell_code children value core_address fwd_body _16
    STREF	//  bell_code children value core_address _17
    SWAP	//  bell_code children value _17 core_address
    STSLICER	//  bell_code children value _18
    s2 s(-1) PUXC	//  bell_code children value children _18
    STREF	//  bell_code children value _19
    s1 s2 XCHG	//  bell_code value children _19
    STREF	//  bell_code value init_data
    ENDC	//  bell_code value _22
    ROT	//  value _22 bell_code
    calc_bell_state_init_by_data INLINECALLDICT	//  value state_init
    6 PUSHINT	//  value state_init _24=6
    OVER	//  value state_init _24=6 state_init
    HASHCU	//  value state_init _24=6 _25
    10 PUSHPOW2	//  value state_init _24=6 _25 _26=1024
    16 PUSHINT	//  value state_init _24=6 _25 _26=1024 _27=16
    NEWC	//  value state_init _24=6 _25 _26=1024 _27=16 _28
    6 STU	//  value state_init _24=6 _25 _26=1024 _30
    11 STU	//  value state_init _24=6 _25 _32
    256 STU	//  value state_init _24=6 _34
    s0 s3 XCHG
    100000000 PUSHINT	//  _34 state_init _24=6 value _35=100000000
    ADD	//  _34 state_init _24=6 _36
    s1 s3 XCHG	//  _24=6 state_init _34 _36
    STVARUINT16	//  _24=6 state_init _37
    s1 s2 XCHG	//  state_init _24=6 _37
    108 STU	//  state_init _51
    s1 s(-1) PUXC	//  state_init state_init _51
    STREF	//  state_init _52
    ENDC	//  state_init _53
    0 PUSHINT	//  state_init _53 _54=0
    SENDRAWMSG
    HASHCU	//  _56
  }>
  init_bell_no_children PROCREF:<{
    //  priority time value dest fwd_body core_address bell_code
    0 PUSHINT	//  priority time value dest fwd_body core_address bell_code _7=0
    NEWC	//  priority time value dest fwd_body core_address bell_code _7=0 _8
    2 STU	//  priority time value dest fwd_body core_address bell_code _10
    ENDC	//  priority time value dest fwd_body core_address bell_code _11
    SWAP	//  priority time value dest fwd_body core_address _11 bell_code
    init_bell_with_children INLINECALLDICT	//  _12
  }>
  bell_info_lr_replace_left PROC:<{
    //  left_addr left_priority left_time right_child
    10 PUSHPOW2	//  left_addr left_priority left_time right_child _4=1024
    1 PUSHINT	//  left_addr left_priority left_time right_child _4=1024 _5=1
    NEWC	//  left_addr left_priority left_time right_child _4=1024 _5=1 _6
    1 STU	//  left_addr left_priority left_time right_child _4=1024 _8
    11 STU	//  left_addr left_priority left_time right_child _10
    s1 s4 XCHG	//  right_child left_priority left_time left_addr _10
    256 STU	//  right_child left_priority left_time _12
    s1 s2 XCHG	//  right_child left_time left_priority _12
    64 STU	//  right_child left_time _14
    32 STU	//  right_child _16
    SWAP	//  _16 right_child
    STSLICER	//  _17
    ENDC	//  _18
  }>
  bell_info_lr_replace_right PROC:<{
    //  left_child right_addr right_priority right_time
    10 PUSHPOW2	//  left_child right_addr right_priority right_time _4=1024
    1 PUSHINT	//  left_child right_addr right_priority right_time _4=1024 _5=1
    s0 s5 XCHG2	//  _4=1024 right_addr right_priority right_time _5=1 left_child
    1 STU	//  _4=1024 right_addr right_priority right_time _7
    s1 s4 XCHG	//  right_time right_addr right_priority _4=1024 _7
    11 STU	//  right_time right_addr right_priority _9
    s1 s2 XCHG	//  right_time right_priority right_addr _9
    256 STU	//  right_time right_priority _11
    64 STU	//  right_time _13
    32 STU	//  _15
    ENDC	//  _16
  }>
  load_core_address PROC:<{
    // 
    c4 PUSH	//  _1
    CTOS	//  d
    160 PUSHINT	//  d _4=160
    SDSKIPFIRST	//  d
    LDMSGADDR	//  _13 _12
    NIP	//  d
    LDREF	//  _15 _14
    NIP	//  d
    LDMSGADDR	//  _17 _16
    DROP	//  _10
  }>
  check_ident_proof_get_code PROCREF:<{
    //  source proof
    1 LDU	//  source _2 proof
    SWAP	//  source proof _2
    0 EQINT	//  source proof _6
    IFJMP:<{	//  source proof
      load_core_address CALLDICT	//  source proof _8
      s1 s2 XCHG	//  proof source _8
      SDEQ	//  proof _9
      114 THROWIFNOT
      LDREF	//  _82 _81
      DROP	//  _11
    }>	//  source proof
    SWAP	//  proof source
    11 LDU	//  proof _14 source
    SWAP
    10 PUSHPOW2	//  proof source _14 _17=1024
    NEQ	//  proof source _18
    110 THROWIF
    SWAP	//  source proof
    LDREF	//  source bell_init proof
    LDREF	//  source bell_init _88 _87
    DROP	//  source bell_init bell_code
    2DUP	//  source bell_init bell_code bell_init bell_code
    calc_bell_state_init_by_data INLINECALLDICT	//  source bell_init bell_code bell_state_init
    s0 s3 XCHG	//  bell_state_init bell_init bell_code source
    256 LDU	//  bell_state_init bell_init bell_code _90 _89
    DROP	//  bell_state_init bell_init bell_code _29
    s0 s3 XCHG	//  _29 bell_init bell_code bell_state_init
    HASHCU	//  _29 bell_init bell_code _32
    s1 s3 XCHG	//  bell_code bell_init _29 _32
    NEQ	//  bell_code bell_init _33
    111 THROWIF
    CTOS	//  bell_code bell_init
    160 PUSHINT	//  bell_code bell_init _38=160
    SDSKIPFIRST	//  bell_code bell_init
    LDMSGADDR	//  bell_code _92 _91
    NIP	//  bell_code bell_init
    LDREF	//  bell_code _94 _93
    NIP	//  bell_code bell_init
    LDMSGADDR	//  bell_code _45 bell_init
    load_core_address CALLDICT	//  bell_code _45 bell_init _47
    s1 s2 XCHG	//  bell_code bell_init _45 _47
    SDEQ	//  bell_code bell_init _48
    112 THROWIFNOT
    LDREF	//  bell_code children bell_init
    LDREF	//  bell_code children _100 _99
    DROP	//  bell_code children init_children
    OVER	//  bell_code children init_children children
    HASHCU	//  bell_code children init_children _57
    SWAP	//  bell_code children _57 init_children
    HASHCU	//  bell_code children _57 _58
    NEQ	//  bell_code children _59
    113 THROWIF
    CTOS	//  bell_code children
    1 LDU	//  bell_code _63 children
    SWAP	//  bell_code children _63
    IF:<{	//  bell_code children
      LDMSGADDR	//  bell_code _104 _103
      NIP	//  bell_code children
      96 PUSHINT	//  bell_code children _69=96
      SDSKIPFIRST	//  bell_code children
    }>	//  bell_code children
    1 LDU	//  bell_code _106 _105
    DROP	//  bell_code _71
    IF:<{	//  bell_code
    }>	//  bell_code
  }>
  store_ident_proof PROCREF:<{
    //  msg bell_code
    1 PUSHINT
    ROT	//  bell_code _3=1 msg
    1 STU	//  bell_code msg
    c4 PUSH	//  bell_code msg _7
    CTOS	//  bell_code msg bell_current_data
    LDREF	//  bell_code msg _10 bell_current_data
    160 LDU	//  bell_code msg _10 _12 bell_current_data
    SWAP
    NEWC	//  bell_code msg _10 bell_current_data _12 _15
    160 STU	//  bell_code msg _10 bell_current_data _17
    SWAP	//  bell_code msg _10 _17 bell_current_data
    LDMSGADDR	//  bell_code msg _10 _17 _18 bell_current_data
    -ROT	//  bell_code msg _10 bell_current_data _17 _18
    STSLICER	//  bell_code msg _10 bell_current_data _20
    s1 s2 XCHG	//  bell_code msg bell_current_data _10 _20
    STREF	//  bell_code msg bell_current_data _21
    SWAP	//  bell_code msg _21 bell_current_data
    LDMSGADDR	//  bell_code msg _21 _22 bell_current_data
    -ROT	//  bell_code msg bell_current_data _21 _22
    STSLICER	//  bell_code msg bell_current_data init_bell_data
    SWAP	//  bell_code msg init_bell_data bell_current_data
    LDREF	//  bell_code msg init_bell_data _44 _43
    NIP	//  bell_code msg init_bell_data bell_current_data
    LDREF	//  bell_code msg init_bell_data _46 _45
    DROP	//  bell_code msg init_bell_data init_children
    s0 s1 PUXC	//  bell_code msg init_children init_children init_bell_data
    STREF	//  bell_code msg init_children _30
    STREF	//  bell_code msg _31
    ENDC	//  bell_code msg _32
    SWAP	//  bell_code _32 msg
    STREF	//  bell_code _33
    STREF	//  _34
  }>
  bell PROC:<{
    //  parent proof
    s1 s(-1) PUXC	//  parent parent proof
    check_ident_proof_get_code INLINECALLDICT	//  parent bell_code
    c4 PUSH	//  parent bell_code _5
    CTOS	//  parent bell_code d
    64 PUSHINT	//  parent bell_code d _8=64
    SDSKIPFIRST	//  parent bell_code d
    32 LDU	//  parent bell_code time d
    64 LDU	//  parent bell_code time value d
    LDMSGADDR	//  parent bell_code time value dest d
    LDREF	//  parent bell_code time value dest body d
    LDMSGADDR	//  parent bell_code time value dest body core d
    LDREF	//  parent bell_code time value dest body core _183 _182
    DROP	//  parent bell_code time value dest body core _28
    CTOS	//  parent bell_code time value dest body core children
    1 LDU	//  parent bell_code time value dest body core _31 children
    SWAP	//  parent bell_code time value dest body core children _31
    1 EQINT	//  parent bell_code time value dest body core children _35
    IFJMP:<{	//  parent bell_code time value dest body core children
      s7 POP
      5 BLKDROP	//  children bell_code
      1933303943 PUSHINT	//  children bell_code _36=1933303943
      0 PUSHINT	//  children bell_code _36=1933303943 _37=0
      24 PUSHINT	//  children bell_code _36=1933303943 _37=0 _38=24
      NEWC	//  children bell_code _36=1933303943 _37=0 _38=24 _39
      6 STU	//  children bell_code _36=1933303943 _37=0 _41
      s0 s4 XCHG	//  _41 bell_code _36=1933303943 _37=0 children
      LDMSGADDR	//  _41 bell_code _36=1933303943 _37=0 _187 _186
      DROP	//  _41 bell_code _36=1933303943 _37=0 _42
      s1 s4 XCHG	//  _37=0 bell_code _36=1933303943 _41 _42
      STSLICER	//  _37=0 bell_code _36=1933303943 _44
      s3 PUSH	//  _37=0 bell_code _36=1933303943 _44 _45=0
      STVARUINT16	//  _37=0 bell_code _36=1933303943 _46
      s1 s3 XCHG	//  _36=1933303943 bell_code _37=0 _46
      107 STU	//  _36=1933303943 bell_code _60
      s1 s2 XCHG	//  bell_code _36=1933303943 _60
      32 STU	//  bell_code _62
      SWAP	//  _62 bell_code
      store_ident_proof INLINECALLDICT	//  _63
      ENDC	//  _64
      64 PUSHINT	//  _64 _65=64
      SENDRAWMSG
    }>	//  parent bell_code time value dest body core children
    NOW	//  parent bell_code time value dest body core children _68
    s6 PUSH	//  parent bell_code time value dest body core children _68 time
    LEQ	//  parent bell_code time value dest body core children _69
    100 THROWIF
    1 PUSHINT	//  parent bell_code time value dest body core children _71=1
    16 PUSHINT	//  parent bell_code time value dest body core children _71=1 _72=16
    NEWC	//  parent bell_code time value dest body core children _71=1 _72=16 _73
    6 STU	//  parent bell_code time value dest body core children _71=1 _75
    s0 s5 XCHG2	//  parent bell_code time value _71=1 body core children _75 dest
    STSLICER	//  parent bell_code time value _71=1 body core children _76
    s0 s5 XCHG2	//  parent bell_code time children _71=1 body core _76 value
    STVARUINT16	//  parent bell_code time children _71=1 body core _77
    s1 s3 XCHG	//  parent bell_code time children core body _71=1 _77
    107 STU	//  parent bell_code time children core body _91
    STREF	//  parent bell_code time children core _92
    ENDC	//  parent bell_code time children core _93
    0 PUSHINT	//  parent bell_code time children core _93 _94=0
    SENDRAWMSG
    2915591469 PUSHINT	//  parent bell_code time children core _96=2915591469
    0 PUSHINT	//  parent bell_code time children core _96=2915591469 _97=0
    16 PUSHINT	//  parent bell_code time children core _96=2915591469 _97=0 _98=16
    NEWC	//  parent bell_code time children core _96=2915591469 _97=0 _98=16 _99
    6 STU	//  parent bell_code time children core _96=2915591469 _97=0 _101
    s0 s7 XCHG2	//  _97=0 bell_code time children core _96=2915591469 _101 parent
    STSLICER	//  _97=0 bell_code time children core _96=2915591469 _102
    50000000 PUSHINT	//  _97=0 bell_code time children core _96=2915591469 _102 _103=50000000
    STVARUINT16	//  _97=0 bell_code time children core _96=2915591469 _104
    s1 s6 XCHG	//  _96=2915591469 bell_code time children core _97=0 _104
    107 STU	//  _96=2915591469 bell_code time children core _118
    s1 s5 XCHG	//  core bell_code time children _96=2915591469 _118
    32 STU	//  core bell_code time children _120
    s3 PUSH	//  core bell_code time children _120 bell_code
    store_ident_proof INLINECALLDICT	//  core bell_code time children _121
    OVER	//  core bell_code time children _121 children
    STSLICER	//  core bell_code time children _122
    ENDC	//  core bell_code time children _123
    0 PUSHINT	//  core bell_code time children _123 _124=0
    SENDRAWMSG
    32 PUSHPOW2DEC	//  core bell_code time children rtime=4294967295
    SWAP	//  core bell_code time rtime=4294967295 children
    1 LDU	//  core bell_code time rtime=4294967295 _128 children
    SWAP	//  core bell_code time rtime=4294967295 children _128
    IF:<{	//  core bell_code time rtime=4294967295 children
      NIP	//  core bell_code time children
      LDMSGADDR	//  core bell_code time _191 _190
      NIP	//  core bell_code time children
      64 PUSHINT	//  core bell_code time children _134=64
      SDSKIPFIRST	//  core bell_code time children
      32 LDU	//  core bell_code time _193 _192
      DROP	//  core bell_code time rtime
    }>ELSE<{
      DROP	//  core bell_code time rtime
    }>
    4201472152 PUSHINT	//  core bell_code time rtime _139=4201472152
    0 PUSHINT	//  core bell_code time rtime _139=4201472152 _140=0
    16 PUSHINT	//  core bell_code time rtime _139=4201472152 _140=0 _141=16
    NEWC	//  core bell_code time rtime _139=4201472152 _140=0 _141=16 _142
    6 STU	//  core bell_code time rtime _139=4201472152 _140=0 _144
    s0 s6 XCHG2	//  _140=0 bell_code time rtime _139=4201472152 _144 core
    STSLICER	//  _140=0 bell_code time rtime _139=4201472152 _145
    s5 PUSH	//  _140=0 bell_code time rtime _139=4201472152 _145 _146=0
    STVARUINT16	//  _140=0 bell_code time rtime _139=4201472152 _147
    s1 s5 XCHG	//  _139=4201472152 bell_code time rtime _140=0 _147
    107 STU	//  _139=4201472152 bell_code time rtime _161
    s1 s4 XCHG	//  rtime bell_code time _139=4201472152 _161
    32 STU	//  rtime bell_code time _163
    ROT	//  rtime time _163 bell_code
    store_ident_proof INLINECALLDICT	//  rtime time _164
    32 STU	//  rtime _166
    32 STU	//  _168
    ENDC	//  _169
    160 PUSHINT	//  _169 _170=160
    SENDRAWMSG
  }>
  bell_destroyed PROC:<{
    //  parent body
    TUCK	//  body parent body
    check_ident_proof_get_code INLINECALLDICT	//  body _2
    DROP	//  body
    1 LDU	//  _3 body
    SWAP	//  body _3
    IF:<{	//  body
      LDREF	//  _63 _62
      NIP	//  body
    }>	//  body
    LDREF	//  _65 _64
    NIP	//  body
    c4 PUSH	//  body _11
    CTOS	//  body old_data
    NEWC	//  body old_data new_data
    SWAP	//  body new_data old_data
    160 LDU	//  body new_data _16 old_data
    s0 s2 XCHG	//  body old_data _16 new_data
    160 STU	//  body old_data new_data
    SWAP	//  body new_data old_data
    LDMSGADDR	//  body new_data _22 old_data
    -ROT	//  body old_data new_data _22
    STSLICER	//  body old_data new_data
    SWAP	//  body new_data old_data
    LDREF	//  body new_data _26 old_data
    s0 s2 XCHG	//  body old_data _26 new_data
    STREF	//  body old_data new_data
    SWAP	//  body new_data old_data
    LDMSGADDR	//  body new_data _30 old_data
    -ROT	//  body old_data new_data _30
    STSLICER	//  body old_data new_data
    SWAP	//  body new_data old_data
    LDREF	//  body new_data _34 old_data
    SWAP	//  body new_data old_data _34
    CTOS	//  body new_data old_data old_children
    1 LDU	//  body new_data old_data _37 old_children
    SWAP	//  body new_data old_data old_children _37
    IF:<{	//  body new_data old_data old_children
      LDMSGADDR	//  body new_data old_data _79 _78
      NIP	//  body new_data old_data old_children
      96 PUSHINT	//  body new_data old_data old_children _43=96
      SDSKIPFIRST	//  body new_data old_data old_children
    }>	//  body new_data old_data old_children
    NEWC	//  body new_data old_data old_children new_children
    s0 s4 XCHG2	//  old_children new_data old_data new_children body
    STSLICER	//  old_children new_data old_data new_children
    s0 s3 XCHG2	//  old_data new_data new_children old_children
    STSLICER	//  old_data new_data new_children
    ENDC	//  old_data new_data _52
    SWAP	//  old_data _52 new_data
    STREF	//  old_data new_data
    SWAP	//  new_data old_data
    LDREF	//  new_data _81 _80
    DROP	//  new_data _55
    SWAP	//  _55 new_data
    STREF	//  new_data
    ENDC	//  _58
    c4 POP
  }>
  create_bell PROCREF:<{
    //  parent proof priority time value dest fwd_body bell_code
    DROP	//  parent proof priority time value dest fwd_body
    s6 s5 XCHG2	//  dest fwd_body priority time value parent proof
    check_ident_proof_get_code INLINECALLDICT	//  dest fwd_body priority time value bell_code
    c4 PUSH	//  dest fwd_body priority time value bell_code _11
    CTOS	//  dest fwd_body priority time value bell_code d
    64 LDU	//  dest fwd_body priority time value bell_code _14 d
    s5 s1 PUXC	//  dest fwd_body priority time value bell_code d priority _14
    GREATER	//  dest fwd_body priority time value bell_code d _17
    100 THROWIF
    s3 PUSH
    NOW	//  dest fwd_body priority time value bell_code d time _20
    LESS	//  dest fwd_body priority time value bell_code d _21
    101 THROWIF
    PUSHNULL	//  dest fwd_body priority time value bell_code d new_children
    SWAP	//  dest fwd_body priority time value bell_code new_children d
    LDREF	//  dest fwd_body priority time value bell_code new_children _26 d
    SWAP	//  dest fwd_body priority time value bell_code new_children d _26
    CTOS	//  dest fwd_body priority time value bell_code new_children d children
    SWAP	//  dest fwd_body priority time value bell_code new_children children d
    32 LDU	//  dest fwd_body priority time value bell_code new_children children _261 _260
    DROP	//  dest fwd_body priority time value bell_code new_children children _29
    s5 s(-1) PUXC	//  dest fwd_body priority time value bell_code new_children children time _29
    LESS	//  dest fwd_body priority time value bell_code new_children children _32
    IF:<{	//  dest fwd_body priority time value bell_code new_children children
      1 LDU	//  dest fwd_body priority time value bell_code new_children _33 children
      SWAP	//  dest fwd_body priority time value bell_code new_children children _33
      0 EQINT	//  dest fwd_body priority time value bell_code new_children children _37
      IF:<{	//  dest fwd_body priority time value bell_code new_children children
        NIP	//  dest fwd_body priority time value bell_code children
        load_core_address CALLDICT	//  dest fwd_body priority time value bell_code children _38
        s5 PUSH
        s5 s0 XCPU
        s0 s5 XCHG
        s0 s4 XCHG
        s3 s9 XCHG
        s8 s8 s0 XCHG3	//  children time priority priority time value dest fwd_body _38 bell_code
        init_bell_no_children INLINECALLDICT	//  children time priority _39
        s2 s3 XCHG2	//  _39 priority time children
        bell_info_lr_replace_left CALLDICT	//  new_children
      }>ELSE<{	//  dest fwd_body priority time value bell_code new_children children
        LDMSGADDR	//  dest fwd_body priority time value bell_code new_children child_addr children
        DUP	//  dest fwd_body priority time value bell_code new_children child_addr children children
        64 PLDU	//  dest fwd_body priority time value bell_code new_children child_addr children _45
        s7 s(-1) PUXC	//  dest fwd_body priority time value bell_code new_children child_addr children priority _45
        GREATER	//  dest fwd_body priority time value bell_code new_children child_addr children _46
        IF:<{	//  dest fwd_body priority time value bell_code new_children child_addr children
          s2 POP	//  dest fwd_body priority time value bell_code children child_addr
          NEWC	//  dest fwd_body priority time value bell_code children child_addr subbell_children
          s2 PUSH	//  dest fwd_body priority time value bell_code children child_addr subbell_children children
          96 PLDU	//  dest fwd_body priority time value bell_code children child_addr subbell_children _50
          32 PUSHPOW2DEC	//  dest fwd_body priority time value bell_code children child_addr subbell_children _50 _51=4294967295
          AND	//  dest fwd_body priority time value bell_code children child_addr subbell_children _52
          s6 s(-1) PUXC	//  dest fwd_body priority time value bell_code children child_addr subbell_children time _52
          LEQ	//  dest fwd_body priority time value bell_code children child_addr subbell_children _53
          IF:<{	//  dest fwd_body priority time value bell_code children child_addr subbell_children
            0 PUSHINT	//  dest fwd_body priority time value bell_code children child_addr subbell_children _55=0
            SWAP	//  dest fwd_body priority time value bell_code children child_addr _55=0 subbell_children
            1 STU	//  dest fwd_body priority time value bell_code children child_addr subbell_children
          }>	//  dest fwd_body priority time value bell_code children child_addr subbell_children
          1 PUSHINT	//  dest fwd_body priority time value bell_code children child_addr subbell_children _59=1
          SWAP	//  dest fwd_body priority time value bell_code children child_addr _59=1 subbell_children
          1 STU	//  dest fwd_body priority time value bell_code children child_addr subbell_children
          SWAP	//  dest fwd_body priority time value bell_code children subbell_children child_addr
          STSLICER	//  dest fwd_body priority time value bell_code children subbell_children
          SWAP	//  dest fwd_body priority time value bell_code subbell_children children
          96 LDU	//  dest fwd_body priority time value bell_code subbell_children _65 children
          s0 s2 XCHG	//  dest fwd_body priority time value bell_code children _65 subbell_children
          96 STU	//  dest fwd_body priority time value bell_code children subbell_children
          OVER	//  dest fwd_body priority time value bell_code children subbell_children children
          96 PLDU	//  dest fwd_body priority time value bell_code children subbell_children _71
          32 PUSHPOW2DEC	//  dest fwd_body priority time value bell_code children subbell_children _71 _72=4294967295
          AND	//  dest fwd_body priority time value bell_code children subbell_children _73
          s5 s(-1) PUXC	//  dest fwd_body priority time value bell_code children subbell_children time _73
          GREATER	//  dest fwd_body priority time value bell_code children subbell_children _74
          IF:<{	//  dest fwd_body priority time value bell_code children subbell_children
            0 PUSHINT	//  dest fwd_body priority time value bell_code children subbell_children _76=0
            SWAP	//  dest fwd_body priority time value bell_code children _76=0 subbell_children
            1 STU	//  dest fwd_body priority time value bell_code children subbell_children
          }>	//  dest fwd_body priority time value bell_code children subbell_children
          ENDC	//  dest fwd_body priority time value bell_code children subbell_children
          load_core_address CALLDICT	//  dest fwd_body priority time value bell_code children subbell_children _81
          s6 PUSH
          s6 s0 XCPU
          s0 s6 XCHG
          s0 s5 XCHG
          s4 s10 XCHG
          s1 s9 XCHG
          s1 s3 XCHG	//  children time priority priority time value dest fwd_body _81 subbell_children bell_code
          init_bell_with_children INLINECALLDICT	//  children time priority _82
          s2 s3 XCHG2	//  _82 priority time children
          bell_info_lr_replace_left CALLDICT	//  new_children
        }>ELSE<{	//  dest fwd_body priority time value bell_code new_children child_addr children
          DROP	//  dest fwd_body priority time value bell_code new_children child_addr
          4227836706 PUSHINT	//  dest fwd_body priority time value bell_code new_children child_addr _84=4227836706
          0 PUSHINT	//  dest fwd_body priority time value bell_code new_children child_addr _84=4227836706 _85=0
          16 PUSHINT	//  dest fwd_body priority time value bell_code new_children child_addr _84=4227836706 _85=0 _86=16
          NEWC	//  dest fwd_body priority time value bell_code new_children child_addr _84=4227836706 _85=0 _86=16 _87
          6 STU	//  dest fwd_body priority time value bell_code new_children child_addr _84=4227836706 _85=0 _89
          s0 s3 XCHG2	//  dest fwd_body priority time value bell_code new_children _85=0 _84=4227836706 _89 child_addr
          STSLICER	//  dest fwd_body priority time value bell_code new_children _85=0 _84=4227836706 _90
          s5 PUSH
          100000000 PUSHINT	//  dest fwd_body priority time value bell_code new_children _85=0 _84=4227836706 _90 value _91=100000000
          ADD	//  dest fwd_body priority time value bell_code new_children _85=0 _84=4227836706 _90 _92
          STVARUINT16	//  dest fwd_body priority time value bell_code new_children _85=0 _84=4227836706 _93
          s1 s2 XCHG	//  dest fwd_body priority time value bell_code new_children _84=4227836706 _85=0 _93
          107 STU	//  dest fwd_body priority time value bell_code new_children _84=4227836706 _107
          32 STU	//  dest fwd_body priority time value bell_code new_children _109
          s1 s5 XCHG	//  dest fwd_body new_children time value bell_code priority _109
          64 STU	//  dest fwd_body new_children time value bell_code _111
          s1 s3 XCHG	//  dest fwd_body new_children bell_code value time _111
          32 STU	//  dest fwd_body new_children bell_code value _113
          64 STU	//  dest fwd_body new_children bell_code _115
          s0 s4 XCHG2	//  bell_code fwd_body new_children _115 dest
          STSLICER	//  bell_code fwd_body new_children _116
          s1 s2 XCHG	//  bell_code new_children fwd_body _116
          STREF	//  bell_code new_children _117
          ROT	//  new_children _117 bell_code
          store_ident_proof INLINECALLDICT	//  new_children _118
          ENDC	//  new_children _119
          0 PUSHINT	//  new_children _119 _120=0
          SENDRAWMSG
        }>
      }>
    }>ELSE<{	//  dest fwd_body priority time value bell_code new_children children
      NEWC	//  dest fwd_body priority time value bell_code new_children children left_child
      SWAP	//  dest fwd_body priority time value bell_code new_children left_child children
      1 LDU	//  dest fwd_body priority time value bell_code new_children left_child _124 children
      SWAP	//  dest fwd_body priority time value bell_code new_children left_child children _124
      0 EQINT	//  dest fwd_body priority time value bell_code new_children left_child children _128
      IF:<{	//  dest fwd_body priority time value bell_code new_children left_child children
        0 PUSHINT
        ROT	//  dest fwd_body priority time value bell_code new_children children _130=0 left_child
        1 STU	//  dest fwd_body priority time value bell_code new_children children left_child
      }>ELSE<{	//  dest fwd_body priority time value bell_code new_children left_child children
        1 PUSHINT
        ROT	//  dest fwd_body priority time value bell_code new_children children _134=1 left_child
        1 STU	//  dest fwd_body priority time value bell_code new_children children left_child
        SWAP	//  dest fwd_body priority time value bell_code new_children left_child children
        LDMSGADDR	//  dest fwd_body priority time value bell_code new_children left_child _138 children
        -ROT	//  dest fwd_body priority time value bell_code new_children children left_child _138
        STSLICER	//  dest fwd_body priority time value bell_code new_children children left_child
        SWAP	//  dest fwd_body priority time value bell_code new_children left_child children
        96 LDU	//  dest fwd_body priority time value bell_code new_children left_child _142 children
        s0 s2 XCHG	//  dest fwd_body priority time value bell_code new_children children _142 left_child
        96 STU	//  dest fwd_body priority time value bell_code new_children children left_child
      }>
      SWAP	//  dest fwd_body priority time value bell_code new_children left_child children
      1 LDU	//  dest fwd_body priority time value bell_code new_children left_child _147 children
      SWAP	//  dest fwd_body priority time value bell_code new_children left_child children _147
      0 EQINT	//  dest fwd_body priority time value bell_code new_children left_child children _151
      IF:<{	//  dest fwd_body priority time value bell_code new_children left_child children
        DROP
        NIP	//  dest fwd_body priority time value bell_code left_child
        load_core_address CALLDICT	//  dest fwd_body priority time value bell_code left_child _152
        s5 PUSH
        s5 s0 XCPU
        s0 s5 XCHG
        s0 s4 XCHG
        s3 s9 XCHG
        s8 s8 s0 XCHG3	//  left_child time priority priority time value dest fwd_body _152 bell_code
        init_bell_no_children INLINECALLDICT	//  left_child time priority _153
        s0 s2 XCHG	//  left_child _153 priority time
        bell_info_lr_replace_right CALLDICT	//  new_children
      }>ELSE<{	//  dest fwd_body priority time value bell_code new_children left_child children
        LDMSGADDR	//  dest fwd_body priority time value bell_code new_children left_child child_addr children
        DUP	//  dest fwd_body priority time value bell_code new_children left_child child_addr children children
        64 PLDU	//  dest fwd_body priority time value bell_code new_children left_child child_addr children _159
        s8 s(-1) PUXC	//  dest fwd_body priority time value bell_code new_children left_child child_addr children priority _159
        GREATER	//  dest fwd_body priority time value bell_code new_children left_child child_addr children _160
        IF:<{	//  dest fwd_body priority time value bell_code new_children left_child child_addr children
          s3 POP	//  dest fwd_body priority time value bell_code children left_child child_addr
          NEWC	//  dest fwd_body priority time value bell_code children left_child child_addr subbell_children
          s3 PUSH	//  dest fwd_body priority time value bell_code children left_child child_addr subbell_children children
          96 PLDU	//  dest fwd_body priority time value bell_code children left_child child_addr subbell_children _164
          32 PUSHPOW2DEC	//  dest fwd_body priority time value bell_code children left_child child_addr subbell_children _164 _165=4294967295
          AND	//  dest fwd_body priority time value bell_code children left_child child_addr subbell_children _166
          s7 s(-1) PUXC	//  dest fwd_body priority time value bell_code children left_child child_addr subbell_children time _166
          LEQ	//  dest fwd_body priority time value bell_code children left_child child_addr subbell_children _167
          IF:<{	//  dest fwd_body priority time value bell_code children left_child child_addr subbell_children
            0 PUSHINT	//  dest fwd_body priority time value bell_code children left_child child_addr subbell_children _169=0
            SWAP	//  dest fwd_body priority time value bell_code children left_child child_addr _169=0 subbell_children
            1 STU	//  dest fwd_body priority time value bell_code children left_child child_addr subbell_children
          }>	//  dest fwd_body priority time value bell_code children left_child child_addr subbell_children
          1 PUSHINT	//  dest fwd_body priority time value bell_code children left_child child_addr subbell_children _173=1
          SWAP	//  dest fwd_body priority time value bell_code children left_child child_addr _173=1 subbell_children
          1 STU	//  dest fwd_body priority time value bell_code children left_child child_addr subbell_children
          SWAP	//  dest fwd_body priority time value bell_code children left_child subbell_children child_addr
          STSLICER	//  dest fwd_body priority time value bell_code children left_child subbell_children
          s0 s2 XCHG	//  dest fwd_body priority time value bell_code subbell_children left_child children
          96 LDU	//  dest fwd_body priority time value bell_code subbell_children left_child _179 children
          s0 s3 XCHG	//  dest fwd_body priority time value bell_code children left_child _179 subbell_children
          96 STU	//  dest fwd_body priority time value bell_code children left_child subbell_children
          s0 s2 XCHG	//  dest fwd_body priority time value bell_code subbell_children left_child children
          96 PLDU	//  dest fwd_body priority time value bell_code subbell_children left_child _185
          32 PUSHPOW2DEC	//  dest fwd_body priority time value bell_code subbell_children left_child _185 _186=4294967295
          AND	//  dest fwd_body priority time value bell_code subbell_children left_child _187
          s5 s(-1) PUXC	//  dest fwd_body priority time value bell_code subbell_children left_child time _187
          GREATER	//  dest fwd_body priority time value bell_code subbell_children left_child _188
          IF:<{	//  dest fwd_body priority time value bell_code subbell_children left_child
            0 PUSHINT
            ROT	//  dest fwd_body priority time value bell_code left_child _190=0 subbell_children
            1 STU	//  dest fwd_body priority time value bell_code left_child subbell_children
            SWAP	//  dest fwd_body priority time value bell_code subbell_children left_child
          }>	//  dest fwd_body priority time value bell_code subbell_children left_child
          SWAP	//  dest fwd_body priority time value bell_code left_child subbell_children
          ENDC	//  dest fwd_body priority time value bell_code left_child subbell_children
          load_core_address CALLDICT	//  dest fwd_body priority time value bell_code left_child subbell_children _195
          s6 PUSH
          s6 s0 XCPU
          s0 s6 XCHG
          s0 s5 XCHG
          s4 s10 XCHG
          s1 s9 XCHG
          s1 s3 XCHG	//  left_child time priority priority time value dest fwd_body _195 subbell_children bell_code
          init_bell_with_children INLINECALLDICT	//  left_child time priority _196
          s0 s2 XCHG	//  left_child _196 priority time
          bell_info_lr_replace_right CALLDICT	//  new_children
        }>ELSE<{	//  dest fwd_body priority time value bell_code new_children left_child child_addr children
          DROP
          NIP	//  dest fwd_body priority time value bell_code new_children child_addr
          4227836706 PUSHINT	//  dest fwd_body priority time value bell_code new_children child_addr _198=4227836706
          0 PUSHINT	//  dest fwd_body priority time value bell_code new_children child_addr _198=4227836706 _199=0
          16 PUSHINT	//  dest fwd_body priority time value bell_code new_children child_addr _198=4227836706 _199=0 _200=16
          NEWC	//  dest fwd_body priority time value bell_code new_children child_addr _198=4227836706 _199=0 _200=16 _201
          6 STU	//  dest fwd_body priority time value bell_code new_children child_addr _198=4227836706 _199=0 _203
          s0 s3 XCHG2	//  dest fwd_body priority time value bell_code new_children _199=0 _198=4227836706 _203 child_addr
          STSLICER	//  dest fwd_body priority time value bell_code new_children _199=0 _198=4227836706 _204
          s5 PUSH
          100000000 PUSHINT	//  dest fwd_body priority time value bell_code new_children _199=0 _198=4227836706 _204 value _205=100000000
          ADD	//  dest fwd_body priority time value bell_code new_children _199=0 _198=4227836706 _204 _206
          STVARUINT16	//  dest fwd_body priority time value bell_code new_children _199=0 _198=4227836706 _207
          s1 s2 XCHG	//  dest fwd_body priority time value bell_code new_children _198=4227836706 _199=0 _207
          107 STU	//  dest fwd_body priority time value bell_code new_children _198=4227836706 _221
          32 STU	//  dest fwd_body priority time value bell_code new_children _223
          s1 s5 XCHG	//  dest fwd_body new_children time value bell_code priority _223
          64 STU	//  dest fwd_body new_children time value bell_code _225
          s1 s3 XCHG	//  dest fwd_body new_children bell_code value time _225
          32 STU	//  dest fwd_body new_children bell_code value _227
          64 STU	//  dest fwd_body new_children bell_code _229
          s0 s4 XCHG2	//  bell_code fwd_body new_children _229 dest
          STSLICER	//  bell_code fwd_body new_children _230
          s1 s2 XCHG	//  bell_code new_children fwd_body _230
          STREF	//  bell_code new_children _231
          ROT	//  new_children _231 bell_code
          store_ident_proof INLINECALLDICT	//  new_children _232
          ENDC	//  new_children _233
          0 PUSHINT	//  new_children _233 _234=0
          SENDRAWMSG
        }>
      }>
    }>
    DUP	//  new_children new_children
    ISNULL	//  new_children _236
    NOT	//  new_children _237
    IF:<{	//  new_children
      c4 PUSH	//  new_children _239
      CTOS	//  new_children d
      LDREF	//  new_children own_schedule_body d
      LDREF	//  new_children own_schedule_body _283 _282
      NIP	//  new_children own_schedule_body d
      LDREF	//  new_children own_schedule_body init_children d
      NEWC	//  new_children own_schedule_body init_children d _249
      SWAP	//  new_children own_schedule_body init_children _249 d
      STSLICER	//  new_children own_schedule_body init_children _250
      s1 s2 XCHG	//  new_children init_children own_schedule_body _250
      STREF	//  new_children init_children _251
      s1 s2 XCHG	//  init_children new_children _251
      STREF	//  init_children _252
      STREF	//  _253
      ENDC	//  _254
      c4 POP
    }>ELSE<{
      DROP	// 
    }>
  }>
  prove_ownership PROCREF:<{
    //  dest fwd_body include_content
    MYADDR	//  dest fwd_body include_content _5
    REWRITESTDADDR	//  dest fwd_body include_content _57 _58
    NIP	//  dest fwd_body include_content id
    0 PUSHINT	//  dest fwd_body include_content id _8=0
    573776435 PUSHINT	//  dest fwd_body include_content id _8=0 _9=573776435
    254068654 PUSHINT	//  dest fwd_body include_content id _8=0 _9=573776435 _10=254068654
    s2 PUSH	//  dest fwd_body include_content id _8=0 _9=573776435 _10=254068654 _11=0
    24 PUSHINT	//  dest fwd_body include_content id _8=0 _9=573776435 _10=254068654 _11=0 _12=24
    NEWC	//  dest fwd_body include_content id _8=0 _9=573776435 _10=254068654 _11=0 _12=24 _13
    6 STU	//  dest fwd_body include_content id _8=0 _9=573776435 _10=254068654 _11=0 _15
    s0 s8 XCHG2	//  _11=0 fwd_body include_content id _8=0 _9=573776435 _10=254068654 _15 dest
    STSLICER	//  _11=0 fwd_body include_content id _8=0 _9=573776435 _10=254068654 _16
    s3 PUSH	//  _11=0 fwd_body include_content id _8=0 _9=573776435 _10=254068654 _16 _17=0
    STVARUINT16	//  _11=0 fwd_body include_content id _8=0 _9=573776435 _10=254068654 _18
    s1 s7 XCHG	//  _10=254068654 fwd_body include_content id _8=0 _9=573776435 _11=0 _18
    107 STU	//  _10=254068654 fwd_body include_content id _8=0 _9=573776435 _32
    s1 s6 XCHG	//  _9=573776435 fwd_body include_content id _8=0 _10=254068654 _32
    32 STU	//  _9=573776435 fwd_body include_content id _8=0 _34
    s1 s5 XCHG	//  _8=0 fwd_body include_content id _9=573776435 _34
    64 STU	//  _8=0 fwd_body include_content id _36
    256 STU	//  _8=0 fwd_body include_content _38
    load_core_address CALLDICT	//  _8=0 fwd_body include_content _38 _39
    STSLICER	//  _8=0 fwd_body include_content _40
    s1 s2 XCHG	//  _8=0 include_content fwd_body _40
    STREF	//  _8=0 include_content _41
    s1 s2 XCHG	//  include_content _8=0 _41
    64 STU	//  include_content msg
    SWAP	//  msg include_content
    IF:<{	//  msg
      1 PUSHINT	//  msg _45=1
      SWAP	//  _45=1 msg
      1 STU	//  msg
      c4 PUSH	//  msg _48
      SWAP	//  _48 msg
      STREF	//  msg
    }>ELSE<{	//  msg
      0 PUSHINT	//  msg _51=0
      SWAP	//  _51=0 msg
      1 STU	//  msg
    }>
    ENDC	//  _54
    64 PUSHINT	//  _54 _55=64
    SENDRAWMSG
  }>
  answer_request_owner PROCREF:<{
    //  dest fwd_body include_content qid initiator
    MYADDR	//  dest fwd_body include_content qid initiator _7
    REWRITESTDADDR	//  dest fwd_body include_content qid initiator _59 _60
    NIP	//  dest fwd_body include_content qid initiator id
    0 PUSHINT	//  dest fwd_body include_content qid initiator id _10=0
    232130531 PUSHINT	//  dest fwd_body include_content qid initiator id _10=0 _11=232130531
    OVER	//  dest fwd_body include_content qid initiator id _10=0 _11=232130531 _12=0
    24 PUSHINT	//  dest fwd_body include_content qid initiator id _10=0 _11=232130531 _12=0 _13=24
    NEWC	//  dest fwd_body include_content qid initiator id _10=0 _11=232130531 _12=0 _13=24 _14
    6 STU	//  dest fwd_body include_content qid initiator id _10=0 _11=232130531 _12=0 _16
    s0 s9 XCHG2	//  _12=0 fwd_body include_content qid initiator id _10=0 _11=232130531 _16 dest
    STSLICER	//  _12=0 fwd_body include_content qid initiator id _10=0 _11=232130531 _17
    s2 PUSH	//  _12=0 fwd_body include_content qid initiator id _10=0 _11=232130531 _17 _18=0
    STVARUINT16	//  _12=0 fwd_body include_content qid initiator id _10=0 _11=232130531 _19
    s1 s8 XCHG	//  _11=232130531 fwd_body include_content qid initiator id _10=0 _12=0 _19
    107 STU	//  _11=232130531 fwd_body include_content qid initiator id _10=0 _33
    s1 s7 XCHG	//  _10=0 fwd_body include_content qid initiator id _11=232130531 _33
    32 STU	//  _10=0 fwd_body include_content qid initiator id _35
    s1 s3 XCHG	//  _10=0 fwd_body include_content id initiator qid _35
    64 STU	//  _10=0 fwd_body include_content id initiator _37
    s1 s2 XCHG	//  _10=0 fwd_body include_content initiator id _37
    256 STU	//  _10=0 fwd_body include_content initiator _39
    SWAP	//  _10=0 fwd_body include_content _39 initiator
    STSLICER	//  _10=0 fwd_body include_content _40
    load_core_address CALLDICT	//  _10=0 fwd_body include_content _40 _41
    STSLICER	//  _10=0 fwd_body include_content _42
    s1 s2 XCHG	//  _10=0 include_content fwd_body _42
    STREF	//  _10=0 include_content _43
    s1 s2 XCHG	//  include_content _10=0 _43
    64 STU	//  include_content msg
    SWAP	//  msg include_content
    IF:<{	//  msg
      1 PUSHINT	//  msg _47=1
      SWAP	//  _47=1 msg
      1 STU	//  msg
      c4 PUSH	//  msg _50
      SWAP	//  _50 msg
      STREF	//  msg
    }>ELSE<{	//  msg
      0 PUSHINT	//  msg _53=0
      SWAP	//  _53=0 msg
      1 STU	//  msg
    }>
    ENDC	//  _56
    64 PUSHINT	//  _56 _57=64
    SENDRAWMSG
  }>
  get_nft_data PROC:<{
    // 
    MYADDR	//  _2
    REWRITESTDADDR	//  _8 _9
    NIP	//  id
    load_core_address CALLDICT	//  id owner
    -1 PUSHINT	//  id owner _6=-1
    s2 s2 s0 XC2PU
    PUSHNULL	//  _6=-1 id owner owner _7
  }>
  answer_static_data PROCREF:<{
    //  dest qid
    MYADDR	//  dest qid _4
    REWRITESTDADDR	//  dest qid _41 _42
    NIP	//  dest qid id
    2339837749 PUSHINT	//  dest qid id _7=2339837749
    0 PUSHINT	//  dest qid id _7=2339837749 _8=0
    24 PUSHINT	//  dest qid id _7=2339837749 _8=0 _9=24
    NEWC	//  dest qid id _7=2339837749 _8=0 _9=24 _10
    6 STU	//  dest qid id _7=2339837749 _8=0 _12
    s0 s5 XCHG2	//  _8=0 qid id _7=2339837749 _12 dest
    STSLICER	//  _8=0 qid id _7=2339837749 _13
    s4 PUSH	//  _8=0 qid id _7=2339837749 _13 _14=0
    STVARUINT16	//  _8=0 qid id _7=2339837749 _15
    s1 s4 XCHG	//  _7=2339837749 qid id _8=0 _15
    107 STU	//  _7=2339837749 qid id _29
    s1 s3 XCHG	//  id qid _7=2339837749 _29
    32 STU	//  id qid _31
    64 STU	//  id _33
    256 STU	//  _35
    load_core_address CALLDICT	//  _35 _36
    STSLICER	//  msg
    ENDC	//  _38
    64 PUSHINT	//  _38 _39=64
    SENDRAWMSG
  }>
  recv_internal PROC:<{
    //  coins in_msg_full in_msg
    3 BLKDROP	// 
    200 THROW
  }>
}END>c
