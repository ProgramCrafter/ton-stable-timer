"Asm.fif" include
// automatically generated from `C:\Users\Tigr\AppData\Local\toncli\toncli\func-libs\error_codes.func` `C:\Users\Tigr\AppData\Local\toncli\toncli\func-libs\math.func` `C:\Users\Tigr\AppData\Local\toncli\toncli\func-libs\stdlib.func` `D:\TON_FunC\ton-stable-timer-new\func\timer.fc` 
PROGRAM{
  DECLPROC power
  DECLPROC sqrt
  DECLPROC avg
  DECLPROC exp
  DECLPROC log2
  DECLPROC get_bounty_msg
  DECLPROC load_contract
  DECLPROC serialize_contract
  DECLPROC load_workchain
  DECLPROC calc_storage_fee_raw
  DECLPROC calc_storage_fee
  DECLPROC load_state_init
  DECLPROC validate_msg_value
  DECLPROC do_schedule
  DECLPROC continue_parsing
  DECLPROC process_schedule
  DECLPROC recv_internal
  power PROCREF:<{
    //  x exponent
    OVER	//  x exponent x
    0 EQINT	//  x exponent _3
    IFJMP:<{	//  x exponent
      2DROP	// 
      0 PUSHINT	//  _4=0
    }>	//  x exponent
    DUP	//  x exponent exponent
    0 EQINT	//  x exponent _6
    IFJMP:<{	//  x exponent
      2DROP	// 
      1 PUSHINT	//  _7=1
    }>	//  x exponent
    OVER	//  x counter result
    WHILE:<{
      OVER	//  x counter result counter
      1 GTINT	//  x counter result _11
    }>DO<{	//  x counter result
      s2 PUSH	//  x counter result x
      MUL	//  x counter result
      SWAP	//  x result counter
      DEC	//  x result counter
      SWAP	//  x counter result
    }>	//  x counter result
    2 1 BLKDROP2	//  result
  }>
  sqrt PROCREF:<{
    //  x
    DUP	//  x x
    0 EQINT	//  x _2
    IFJMP:<{	//  x
      DROP	// 
      0 PUSHINT	//  _3=0
    }>	//  x
    DUP	//  x x
    4 LESSINT	//  x _5
    IFJMP:<{	//  x
      DROP	// 
      1 PUSHINT	//  _6=1
    }>	//  x
    DUP	//  x x
    INC	//  x _9
    1 RSHIFT#	//  x z
    OVER	//  x z y
    WHILE:<{
      2DUP	//  x z y z y
      LESS	//  x z y _13
    }>DO<{	//  x z y
      DROP	//  x z
      s0 s1 s0 PUSH3	//  x z y x z
      DIV	//  x z y _14
      ROT	//  x y _14 z
      ADD	//  x y _15
      1 RSHIFT#	//  x y z
      SWAP	//  x z y
    }>	//  x z y
    2 1 BLKDROP2	//  y
  }>
  avg PROCREF:<{
    //  x y
    ADD	//  _2
    1 RSHIFT#	//  _4
  }>
  exp PROCREF:<{
    //  x
    DUP	//  x x
    -1 GTINT	//  x _2
    IF:<{	//  x
      POW2	//  _3
    }>ELSE<{	//  x
      1 PUSHINT	//  x _6=1
      SWAP	//  _6=1 x
      NEGATE	//  _6=1 _8
      RSHIFT	//  _3
    }>
  }>
  log2 PROCREF:<{
    //  x
    0 PUSHINT	//  x n=0
    7 PUSHPOW2	//  x n=0 _3=128
    exp INLINECALLDICT	//  x n=0 _4
    s2 s(-1) PUXC	//  x n=0 x _4
    GEQ	//  x n=0 _5
    IF:<{	//  x n=0
      DROP	//  x
      128 RSHIFT#	//  x
      7 PUSHPOW2	//  x n
    }>	//  x n
    64 PUSHINT	//  x n _10=64
    exp INLINECALLDICT	//  x n _11
    s2 s(-1) PUXC	//  x n x _11
    GEQ	//  x n _12
    IF:<{	//  x n
      SWAP	//  n x
      64 RSHIFT#	//  n x
      SWAP	//  x n
      64 ADDCONST	//  x n
    }>	//  x n
    32 PUSHINT	//  x n _17=32
    exp INLINECALLDICT	//  x n _18
    s2 s(-1) PUXC	//  x n x _18
    GEQ	//  x n _19
    IF:<{	//  x n
      SWAP	//  n x
      32 RSHIFT#	//  n x
      SWAP	//  x n
      32 ADDCONST	//  x n
    }>	//  x n
    16 PUSHINT	//  x n _24=16
    exp INLINECALLDICT	//  x n _25
    s2 s(-1) PUXC	//  x n x _25
    GEQ	//  x n _26
    IF:<{	//  x n
      SWAP	//  n x
      16 RSHIFT#	//  n x
      SWAP	//  x n
      16 ADDCONST	//  x n
    }>	//  x n
    8 PUSHINT	//  x n _31=8
    exp INLINECALLDICT	//  x n _32
    s2 s(-1) PUXC	//  x n x _32
    GEQ	//  x n _33
    IF:<{	//  x n
      SWAP	//  n x
      8 RSHIFT#	//  n x
      SWAP	//  x n
      8 ADDCONST	//  x n
    }>	//  x n
    4 PUSHINT	//  x n _38=4
    exp INLINECALLDICT	//  x n _39
    s2 s(-1) PUXC	//  x n x _39
    GEQ	//  x n _40
    IF:<{	//  x n
      SWAP	//  n x
      4 RSHIFT#	//  n x
      SWAP	//  x n
      4 ADDCONST	//  x n
    }>	//  x n
    2 PUSHINT	//  x n _45=2
    exp INLINECALLDICT	//  x n _46
    s2 s(-1) PUXC	//  x n x _46
    GEQ	//  x n _47
    IF:<{	//  x n
      SWAP	//  n x
      2 RSHIFT#	//  n x
      SWAP	//  x n
      2 ADDCONST	//  x n
    }>	//  x n
    1 PUSHINT	//  x n _52=1
    exp INLINECALLDICT	//  x n _53
    s1 s2 XCHG	//  n x _53
    GEQ	//  n _54
    IF:<{	//  n
      INC	//  n
    }>	//  n
  }>
  get_bounty_msg PROCINLINE:<{
    //  owner actual_bounty
    0 PUSHINT	//  owner actual_bounty _2=0
    16 PUSHINT	//  owner actual_bounty _2=0 _3=16
    NEWC	//  owner actual_bounty _2=0 _3=16 _4
    6 STU	//  owner actual_bounty _2=0 _6
    s0 s3 XCHG2	//  _2=0 actual_bounty _6 owner
    STSLICER	//  _2=0 actual_bounty _7
    SWAP	//  _2=0 _7 actual_bounty
    STVARUINT16	//  _2=0 _8
    139 STU	//  _12
    x{426f756e7479} PUSHSLICE	//  _12 _13
    STSLICER	//  _14
    ENDC	//  _15
  }>
  load_contract PROCINLINE:<{
    // 
    c4 PUSH	//  _1
    CTOS	//  ds
    LDDICT	//  schedule ds
    64 LDU	//  schedule furthest_schedule owner
    SWAP	//  schedule owner furthest_schedule
  }>
  serialize_contract PROCINLINE:<{
    //  schedule owner furthest
    s0 s2 XCHG
    NEWC	//  furthest owner schedule _3
    STDICT	//  furthest owner _4
    s1 s2 XCHG	//  owner furthest _4
    64 STU	//  owner _6
    SWAP	//  _6 owner
    STSLICER	//  _7
    ENDC	//  _8
  }>
  load_workchain PROCINLINE:<{
    // 
    MYADDR	//  _2
    REWRITESTDADDR	//  _4 _5
    DROP	//  workchain
  }>
  calc_storage_fee_raw PROCINLINE:<{
    //  cells bits time
    18 PUSHINT	//  cells bits time _4=18
    CONFIGOPTPARAM	//  cells bits time prices_by_workchain
    load_workchain INLINECALLDICT	//  cells bits time prices_by_workchain _8
    SWAP
    32 PUSHINT	//  cells bits time _8 prices_by_workchain _9=32
    DICTIGET
    NULLSWAPIFNOT	//  cells bits time _27 _28
    DROP	//  cells bits time prices
    40 PUSHINT	//  cells bits time prices _12=40
    SDSKIPFIRST	//  cells bits time prices
    64 LDU	//  cells bits time _15 prices
    s0 s3 XCHG	//  cells prices time _15 bits
    MUL	//  cells prices time base_fee
    s0 s2 XCHG	//  cells base_fee time prices
    64 LDU	//  cells base_fee time _32 _31
    DROP	//  cells base_fee time _19
    s0 s3 XCHG2	//  time base_fee _19 cells
    MUL	//  time base_fee _22
    ADD	//  time base_fee
    SWAP	//  base_fee time
    MUL	//  _24
    16 RSHIFT#	//  _26
  }>
  calc_storage_fee PROCINLINE:<{
    //  in time
    SWAP
    100000 PUSHINT	//  time in _5=100000
    CDATASIZE	//  time _8 _9 _10
    DROP	//  time cells bits
    ROT	//  cells bits time
    calc_storage_fee_raw INLINECALLDICT	//  _7
  }>
  load_state_init PROCINLINE:<{
    //  cs
    1 LDU	//  _1 cs
    SWAP	//  cs _1
    IF:<{	//  cs
      5 PUSHINT	//  cs _5=5
      SDSKIPFIRST	//  cs
    }>	//  cs
    1 LDU	//  _7 cs
    SWAP	//  cs _7
    IF:<{	//  cs
      2 PUSHINT	//  cs _11=2
      SDSKIPFIRST	//  cs
    }>	//  cs
    1 LDU	//  _13 cs
    SWAP	//  cs _13
    IF:<{	//  cs
      LDREF	//  _32 _31
      NIP	//  cs
    }>	//  cs
    1 LDU	//  _18 cs
    SWAP	//  cs _18
    IF:<{	//  cs
      LDREF	//  _36 _35
      NIP	//  cs
    }>	//  cs
    LDDICT	//  _38 _37
    NIP	//  cs
  }>
  validate_msg_value PROCINLINE:<{
    //  msg
    0 PUSHINT	//  msg value=0
    SWAP	//  value=0 msg
    CTOS	//  value=0 msg
    1 LDU	//  value=0 _5 msg
    SWAP	//  value=0 msg _5
    IF:<{	//  value=0 msg
      1 LDU	//  value=0 _9 msg
      SWAP	//  value=0 msg _9
      1 EQINT	//  value=0 msg _13
      100 THROWIFNOT
      LDMSGADDR	//  value=0 _70 _69
      NIP	//  value=0 msg
      LDMSGADDR	//  value=0 _72 _71
      NIP	//  value=0 msg
    }>ELSE<{	//  value=0 msg
      NIP	//  msg
      3 LDU	//  _20 msg
      SWAP
      3 PUSHINT	//  msg _20 _23=3
      AND	//  msg _24
      110 THROWIF
      LDMSGADDR	//  _76 _75
      x{9FE40460A0400000000000000000000000000000000000000000000000000000003_} PUSHSLICE
      s2 POP	//  _29 msg
      LDMSGADDR	//  _29 _30 msg
      -ROT	//  msg _29 _30
      SDEQ	//  msg _32
      111 THROWIF
      LDVARUINT16	//  value msg
      LDDICT	//  value _37 msg
      SWAP	//  value msg _37
      DICTEMPTY	//  value msg _39
      112 THROWIFNOT
      LDVARUINT16	//  value _84 _83
      NIP	//  value msg
      LDVARUINT16	//  value _86 _85
      NIP	//  value msg
    }>
    96 PUSHINT	//  value msg _46=96
    SDSKIPFIRST	//  value msg
    1 LDU	//  value _48 msg
    SWAP	//  value msg _48
    IF:<{	//  value msg
      1 LDU	//  value _51 msg
      SWAP	//  value msg _51
      IF:<{	//  value msg
        LDREF	//  value _54 msg
        SWAP	//  value msg _54
        CTOS	//  value msg _56
        load_state_init INLINECALLDICT	//  value msg _57
        DROP	//  value msg
      }>ELSE<{	//  value msg
        load_state_init INLINECALLDICT	//  value msg
      }>
    }>	//  value msg
    1 LDU	//  value _94 _93
    DROP	//  value _60
    IF:<{	//  value
    }>	//  value
  }>
  do_schedule PROCINLINE:<{
    //  old_state old_state old_state sender time msg
    //  schedule owner furthest sender time msg
    c4 PUSH	//  schedule owner furthest sender time msg _8
    s4 PUSH
    NOW	//  schedule owner furthest sender time msg _8 furthest _9
    SUB	//  schedule owner furthest sender time msg _8 _10
    calc_storage_fee INLINECALLDICT	//  schedule owner furthest sender time msg old_fee
    0 PUSHINT	//  schedule owner furthest sender time msg old_fee timer_fee=0
    s3 s5 PUSH2	//  schedule owner furthest sender time msg old_fee timer_fee=0 time furthest
    GREATER	//  schedule owner furthest sender time msg old_fee timer_fee=0 _14
    IF:<{	//  schedule owner furthest sender time msg old_fee timer_fee=0
      DROP
      s5 POP	//  schedule old_fee furthest owner time msg
      3000000 PUSHINT	//  schedule old_fee furthest owner time msg _17
      s4 s2 XCPU	//  schedule old_fee _17 owner time msg furthest time
      SUB	//  schedule old_fee _17 owner time msg _18
      s1 s4 XCHG	//  schedule old_fee msg owner time _17 _18
      MUL	//  schedule old_fee msg owner time timer_fee
      OVER	//  schedule old_fee msg owner time timer_fee furthest
      s3 s5 XCHG
      s4 s4 XCHG2
      s0 s3 XCHG	//  schedule owner furthest timer_fee time msg old_fee
    }>ELSE<{
      s4 POP	//  schedule owner furthest timer_fee time msg old_fee
    }>
    s0 s2 XCHG	//  schedule owner furthest timer_fee old_fee msg time
    32 LSHIFT#	//  schedule owner furthest timer_fee old_fee msg _22
    LTIME	//  schedule owner furthest timer_fee old_fee msg _22 _23
    998244353 PUSHINT	//  schedule owner furthest timer_fee old_fee msg _22 _23 _24=998244353
    MOD	//  schedule owner furthest timer_fee old_fee msg _22 _25
    OR	//  schedule owner furthest timer_fee old_fee msg _26
    s1 s0 s6 PUXC2
    64 PUSHINT	//  msg owner furthest timer_fee old_fee msg _26 schedule _27=64
    DICTUSETREF	//  msg owner furthest timer_fee old_fee schedule
    s0 s4 s3 XC2PU	//  msg old_fee furthest timer_fee schedule owner furthest
    serialize_contract INLINECALLDICT	//  msg old_fee furthest timer_fee new_storage
    s0 s2 XCHG
    NOW	//  msg old_fee new_storage timer_fee furthest _32
    SUB	//  msg old_fee new_storage timer_fee _33
    s2 s(-1) PUXC	//  msg old_fee new_storage timer_fee new_storage _33
    calc_storage_fee INLINECALLDICT	//  msg old_fee new_storage timer_fee new_fee
    s0 s3 XCHG2	//  msg timer_fee new_storage new_fee old_fee
    SUB	//  msg timer_fee new_storage storage_fee
    100000000 PUSHINT	//  msg timer_fee new_storage storage_fee reserve
    SWAP
    400000000 PUSHINT	//  msg timer_fee new_storage reserve storage_fee _41=400000000
    ADD	//  msg timer_fee new_storage reserve _42
    s0 s3 XCHG2	//  msg reserve new_storage _42 timer_fee
    ADD	//  msg reserve new_storage _43
    ROT	//  msg new_storage _43 reserve
    ADD	//  msg new_storage _44
    s0 s2 XCHG	//  _44 new_storage msg
    validate_msg_value INLINECALLDICT	//  _44 new_storage _45
    s1 s2 XCHG	//  new_storage _44 _45
    ADD	//  new_storage _46
  }>
  continue_parsing PROCINLINE:<{
    //  success scheduled_at current_time
    s0 s2 XCHG	//  current_time scheduled_at success
    NOT	//  current_time scheduled_at _3
    IF:<{	//  current_time scheduled_at
      2DROP	// 
      0 PUSHINT	//  _4=0
    }>ELSE<{	//  current_time scheduled_at
      32 RSHIFT#	//  current_time _6
      GEQ	//  _7
    }>
  }>
  process_schedule PROCINLINE:<{
    //  scheduled
    NOW	//  scheduled current_time
    OVER
    64 PUSHINT	//  scheduled current_time scheduled _6=64
    DICTUMINREF
    NULLSWAPIFNOT2	//  scheduled current_time scheduled_msg scheduled_at success
    WHILE:<{
      s1 s3 PUSH2	//  scheduled current_time scheduled_msg scheduled_at success scheduled_at current_time
      continue_parsing INLINECALLDICT	//  scheduled current_time scheduled_msg scheduled_at _8
    }>DO<{	//  scheduled current_time scheduled_msg scheduled_at
      SWAP
      0 PUSHINT	//  scheduled current_time scheduled_at scheduled_msg _9=0
      SENDRAWMSG
      ROT
      64 PUSHINT	//  current_time scheduled_at scheduled _13=64
      DICTUDEL	//  current_time _20 _21
      DROP	//  current_time scheduled
      DUP
      64 PUSHINT	//  current_time scheduled scheduled _15=64
      DICTUMINREF
      NULLSWAPIFNOT2	//  current_time scheduled scheduled_msg scheduled_at success
      s3 s4 XCHG	//  scheduled current_time scheduled_msg scheduled_at success
    }>	//  scheduled current_time scheduled_msg scheduled_at
    3 BLKDROP	//  scheduled
  }>
  recv_internal PROC:<{
    //  coins in_msg_full in_msg_body
    SWAP	//  coins in_msg_body in_msg_full
    CTOS	//  coins in_msg_body in_msg
    4 LDU	//  coins in_msg_body _5 in_msg
    SWAP
    1 PUSHINT	//  coins in_msg_body in_msg _5 _8=1
    AND	//  coins in_msg_body in_msg _9
    IF:<{	//  coins in_msg_body in_msg
      3 BLKDROP	// 
      ACCEPT
      load_contract INLINECALLDICT	//  scheduled owner furthest
      s0 s2 XCHG	//  furthest owner scheduled
      process_schedule INLINECALLDICT	//  furthest owner scheduled
      DUP	//  furthest owner scheduled scheduled
      DICTEMPTY	//  furthest owner scheduled _17
      IF:<{	//  furthest owner scheduled
        DROP
        NIP	//  owner
        0 PUSHINT	//  owner _18=0
        get_bounty_msg INLINECALLDICT	//  _19
        160 PUSHINT	//  _19 _20=160
        SENDRAWMSG
      }>ELSE<{	//  furthest owner scheduled
        s0 s2 XCHG	//  scheduled owner furthest
        serialize_contract INLINECALLDICT	//  _22
        c4 POP
          <b
            b{011000} s,                                 // .store_uint(0x18, 6)
            b{100} s,                                    // .store_slice(bounce_mc_addr)
              x{FF} s,
              x{2023050200000000000000000000000000000000000000000000000000000001} s,
            500000000 Gram,                              // .store_coins(500 * milliton)
            0 107 u,                                     // .store_uint(0, 107)
          b> PUSHREF	//  _24
        0 PUSHINT	//  _24 _25=0
        SENDRAWMSG
      }>
    }>ELSE<{	//  coins in_msg_body in_msg
      OVER	//  coins in_msg_body in_msg in_msg_body
      SEMPTY	//  coins in_msg_body in_msg _27
      IFNOT:<{	//  coins in_msg_body in_msg
        SWAP	//  coins in_msg in_msg_body
        32 LDU	//  coins in_msg _28 in_msg_body
        SWAP
        619049418 PUSHINT	//  coins in_msg in_msg_body _28 _31=619049418
        EQUAL	//  coins in_msg in_msg_body _32
        IF:<{	//  coins in_msg in_msg_body
          SWAP	//  coins in_msg_body in_msg
          LDMSGADDR	//  coins in_msg_body _70 _69
          DROP	//  coins in_msg_body sender
          SWAP	//  coins sender in_msg_body
          32 LDU	//  coins sender time in_msg_body
          LDREF	//  coins sender time _74 _73
          DROP	//  coins sender time msg
          load_contract INLINECALLDICT	//  coins sender time msg scheduled owner furthest
          s2 PUSH
          s4 s2 XCPU
          s3 s1 s4 XCHG3
          s7 s6 s6 XCHG3	//  coins owner scheduled scheduled owner furthest sender time msg
          do_schedule INLINECALLDICT	//  coins owner scheduled new_storage required_coins
          s1 s4 XCHG	//  new_storage owner scheduled coins required_coins
          GEQ	//  new_storage owner scheduled _51
          140 THROWIFNOT
          DICTEMPTY	//  new_storage owner _53
          IF:<{	//  new_storage owner
              <b
                b{011000} s,                                 // .store_uint(0x18, 6)
                b{100} s,                                    // .store_slice(bounce_mc_addr)
                  x{FF} s,
                  x{2023050200000000000000000000000000000000000000000000000000000001} s,
                500000000 Gram,                              // .store_coins(500 * milliton)
                0 107 u,                                     // .store_uint(0, 107)
              b> PUSHREF	//  new_storage owner _54
            0 PUSHINT	//  new_storage owner _54 _55=0
            SENDRAWMSG
          }>	//  new_storage owner
          400000000 PUSHINT	//  new_storage owner _57=400000000
          get_bounty_msg INLINECALLDICT	//  new_storage _58
          0 PUSHINT	//  new_storage _58 _59=0
          SENDRAWMSG
          c4 POP
        }>ELSE<{
          3 BLKDROP	// 
        }>
      }>ELSE<{
        3 BLKDROP	// 
      }>
    }>
  }>
}END>c

boc>B "build/boc/contract-timer.boc" B>file