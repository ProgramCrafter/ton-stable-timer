"Asm.fif" include
// automatically generated from `C:\Users\Tigr\AppData\Local\toncli\toncli\func-libs\error_codes.func` `C:\Users\Tigr\AppData\Local\toncli\toncli\func-libs\math.func` `C:\Users\Tigr\AppData\Local\toncli\toncli\func-libs\stdlib.func` `C:\Users\Tigr\AppData\Local\toncli\toncli\test-libs\1.address_helpers.func` `C:\Users\Tigr\AppData\Local\toncli\toncli\test-libs\bad_messages_generator.func` `C:\Users\Tigr\AppData\Local\toncli\toncli\test-libs\c5_parse_helpers.func` `C:\Users\Tigr\AppData\Local\toncli\toncli\test-libs\message_helpers.func` `C:\Users\Tigr\AppData\Local\toncli\toncli\test-libs\storage-test-helpers.func` `C:\Users\Tigr\AppData\Local\toncli\toncli\test-libs\tests-helpers.func` `C:\Users\Tigr\AppData\Local\toncli\toncli\test-libs\token-helpers.func` `D:\TON_FunC\timer\func\timer.fc` incl:`func/utils-timer.fc` incl:`func/utils.fc` incl:`func/stdlib-ext.fc` `D:\TON_FunC\timer\tests\tests-timer.fc` 
PROGRAM{
  DECLPROC power
  DECLPROC sqrt
  DECLPROC avg
  DECLPROC exp
  DECLPROC log2
  114362 DECLMETHOD generate_empty_address
  103563 DECLMETHOD generate_internal_address
  71142 DECLMETHOD generate_internal_address_with_custom_data
  105789 DECLMETHOD generate_external_address
  77760 DECLMETHOD generate_external_address_with_custom_data
  119020 DECLMETHOD generate_var_address
  101577 DECLMETHOD generate_var_address_with_custom_data
  DECLPROC generate_any_address
  76887 DECLMETHOD generate_external_out_message_with_bad_source_address
  113901 DECLMETHOD generate_external_out_message_with_bad_destination_address
  124331 DECLMETHOD generate_external_in_message_with_bad_source_address
  128854 DECLMETHOD generate_external_in_message_with_bad_destination_address
  122899 DECLMETHOD generate_internal_message_with_bad_grams_data
  105345 DECLMETHOD generate_internal_message_with_bad_init_state_data
  DECLPROC parse_send_raw_message
  DECLPROC parse_lib_code
  DECLPROC parse_raw_reserve
  DECLPROC parse_set_code
  DECLPROC parse_c5
  66092 DECLMETHOD generate_init_state
  86734 DECLMETHOD generate_init_state_with_data
  70014 DECLMETHOD parse_init_state
  71497 DECLMETHOD random_query_id
  128031 DECLMETHOD generate_internal_message_body
  103755 DECLMETHOD generate_internal_message_custom
  DECLPROC generate_get_royalty_params
  125184 DECLMETHOD generate_nft_transfer_request
  93113 DECLMETHOD generate_nft_get_static_data_request
  80940 DECLMETHOD generate_nft_deploy_request
  72255 DECLMETHOD generate_jetton_burn_request
  DECLPROC generate_jetton_burn_notification
  128076 DECLMETHOD generate_jetton_internal_transfer_request
  100003 DECLMETHOD generate_jetton_transfer_request
  129018 DECLMETHOD generate_internal_message
  108731 DECLMETHOD generate_internal_message_relaxed
  115574 DECLMETHOD generate_external_in_message
  78122 DECLMETHOD generate_external_in_message_with_empty_source_address
  94514 DECLMETHOD generate_external_out_message
  75192 DECLMETHOD generate_external_out_message_with_empty_destination_address
  77897 DECLMETHOD generate_external_out_message_relaxed
  94767 DECLMETHOD parse_internal_message
  97177 DECLMETHOD parse_external_message
  69682 DECLMETHOD init_environment
  104832 DECLMETHOD storage_key
  68533 DECLMETHOD load_storage_with_tag
  113134 DECLMETHOD save_storage_with_tag
  85860 DECLMETHOD get_c7
  78457 DECLMETHOD invoke_method
  93676 DECLMETHOD invoke_method_expect_fail
  127733 DECLMETHOD assert_no_actions
  DECLPROC token_snake_len
  DECLPROC get_snake_tail
  103208 DECLMETHOD snake_concat
  DECLPROC snake_concat_tagged
  DECLPROC snake_equal?
  DECLPROC swap_remove
  DECLPROC parse_one_action
  DECLPROC calc_bell_state_init_by_data
  DECLPROC init_bell_with_children
  DECLPROC init_bell_no_children
  DECLPROC bell_info_lr_replace_left
  DECLPROC bell_info_lr_replace_right
  DECLPROC TIM::send_schedule_loop_msg
  DECLPROC TIM::check_ident_proof
  DECLPROC TIM::store_ident_proof
  DECLPROC TIM::create_bell
  85654 DECLMETHOD get_root_bell
  92067 DECLMETHOD get_nft_address_by_index
  68445 DECLMETHOD get_nft_content
  102491 DECLMETHOD get_collection_data
  DECLPROC TIM::process_schedule
  DECLPROC recv_internal
  DECLPROC recv_external
  DECLPROC set_init_data
  97577 DECLMETHOD __test_donation
  84429 DECLMETHOD __test_schedules
  75047 DECLMETHOD __test_self_tick_parsed_no_new
  88863 DECLMETHOD __test_self_tick_parsed_with_next_tick
  70946 DECLMETHOD __test_tick_requires_bell
  78731 DECLMETHOD __test_tick_rings_bell
  129300 DECLMETHOD __test_next_wakeup
  84801 DECLMETHOD __test_pull_ton_failure
  125009 DECLMETHOD __test_timer_init
  72963 DECLMETHOD __test_timer_scheduler
  power PROCREF:<{
    //  x exponent
    OVER	//  x exponent x
    0 EQINT	//  x exponent _3
    IFJMP:<{	//  x exponent
      2DROP	// 
      0 PUSHINT	//  _4=0
    }>	//  x exponent
    DUP	//  x exponent exponent
    0 EQINT	//  x exponent _6
    IFJMP:<{	//  x exponent
      2DROP	// 
      1 PUSHINT	//  _7=1
    }>	//  x exponent
    OVER	//  x counter result
    WHILE:<{
      OVER	//  x counter result counter
      1 GTINT	//  x counter result _11
    }>DO<{	//  x counter result
      s2 PUSH	//  x counter result x
      MUL	//  x counter result
      SWAP	//  x result counter
      DEC	//  x result counter
      SWAP	//  x counter result
    }>	//  x counter result
    2 1 BLKDROP2	//  result
  }>
  sqrt PROCREF:<{
    //  x
    DUP	//  x x
    0 EQINT	//  x _2
    IFJMP:<{	//  x
      DROP	// 
      0 PUSHINT	//  _3=0
    }>	//  x
    DUP	//  x x
    4 LESSINT	//  x _5
    IFJMP:<{	//  x
      DROP	// 
      1 PUSHINT	//  _6=1
    }>	//  x
    DUP	//  x x
    INC	//  x _9
    1 RSHIFT#	//  x z
    OVER	//  x z y
    WHILE:<{
      2DUP	//  x z y z y
      LESS	//  x z y _13
    }>DO<{	//  x z y
      DROP	//  x z
      s0 s1 s0 PUSH3	//  x z y x z
      DIV	//  x z y _14
      ROT	//  x y _14 z
      ADD	//  x y _15
      1 RSHIFT#	//  x y z
      SWAP	//  x z y
    }>	//  x z y
    2 1 BLKDROP2	//  y
  }>
  avg PROCREF:<{
    //  x y
    ADD	//  _2
    1 RSHIFT#	//  _4
  }>
  exp PROCREF:<{
    //  x
    DUP	//  x x
    -1 GTINT	//  x _2
    IF:<{	//  x
      POW2	//  _3
    }>ELSE<{	//  x
      1 PUSHINT	//  x _6=1
      SWAP	//  _6=1 x
      NEGATE	//  _6=1 _8
      RSHIFT	//  _3
    }>
  }>
  log2 PROCREF:<{
    //  x
    0 PUSHINT	//  x n=0
    7 PUSHPOW2	//  x n=0 _3=128
    exp INLINECALLDICT	//  x n=0 _4
    s2 s(-1) PUXC	//  x n=0 x _4
    GEQ	//  x n=0 _5
    IF:<{	//  x n=0
      DROP	//  x
      128 RSHIFT#	//  x
      7 PUSHPOW2	//  x n
    }>	//  x n
    64 PUSHINT	//  x n _10=64
    exp INLINECALLDICT	//  x n _11
    s2 s(-1) PUXC	//  x n x _11
    GEQ	//  x n _12
    IF:<{	//  x n
      SWAP	//  n x
      64 RSHIFT#	//  n x
      SWAP	//  x n
      64 ADDCONST	//  x n
    }>	//  x n
    32 PUSHINT	//  x n _17=32
    exp INLINECALLDICT	//  x n _18
    s2 s(-1) PUXC	//  x n x _18
    GEQ	//  x n _19
    IF:<{	//  x n
      SWAP	//  n x
      32 RSHIFT#	//  n x
      SWAP	//  x n
      32 ADDCONST	//  x n
    }>	//  x n
    16 PUSHINT	//  x n _24=16
    exp INLINECALLDICT	//  x n _25
    s2 s(-1) PUXC	//  x n x _25
    GEQ	//  x n _26
    IF:<{	//  x n
      SWAP	//  n x
      16 RSHIFT#	//  n x
      SWAP	//  x n
      16 ADDCONST	//  x n
    }>	//  x n
    8 PUSHINT	//  x n _31=8
    exp INLINECALLDICT	//  x n _32
    s2 s(-1) PUXC	//  x n x _32
    GEQ	//  x n _33
    IF:<{	//  x n
      SWAP	//  n x
      8 RSHIFT#	//  n x
      SWAP	//  x n
      8 ADDCONST	//  x n
    }>	//  x n
    4 PUSHINT	//  x n _38=4
    exp INLINECALLDICT	//  x n _39
    s2 s(-1) PUXC	//  x n x _39
    GEQ	//  x n _40
    IF:<{	//  x n
      SWAP	//  n x
      4 RSHIFT#	//  n x
      SWAP	//  x n
      4 ADDCONST	//  x n
    }>	//  x n
    2 PUSHINT	//  x n _45=2
    exp INLINECALLDICT	//  x n _46
    s2 s(-1) PUXC	//  x n x _46
    GEQ	//  x n _47
    IF:<{	//  x n
      SWAP	//  n x
      2 RSHIFT#	//  n x
      SWAP	//  x n
      2 ADDCONST	//  x n
    }>	//  x n
    1 PUSHINT	//  x n _52=1
    exp INLINECALLDICT	//  x n _53
    s1 s2 XCHG	//  n x _53
    GEQ	//  n _54
    IF:<{	//  n
      INC	//  n
    }>	//  n
  }>
  generate_empty_address PROC:<{
    // 
    0 PUSHINT	//  _0=0
    NEWC	//  _0=0 _1
    2 STU	//  _3
    ENDC	//  _4
    CTOS	//  _5
  }>
  generate_internal_address PROC:<{
    // 
    RANDU256	//  address
    -1 PUSHINT	//  address _3=-1
    0 PUSHINT	//  address _3=-1 _4=0
    2 PUSHINT	//  address _3=-1 _4=0 _5=2
    NEWC	//  address _3=-1 _4=0 _5=2 _6
    2 STU	//  address _3=-1 _4=0 _8
    1 STU	//  address _3=-1 _10
    8 STI	//  address _12
    256 STU	//  _14
    ENDC	//  _15
    CTOS	//  address_cell
  }>
  generate_internal_address_with_custom_data PROC:<{
    //  anycast workchain_id address
    2 PUSHINT	//  anycast workchain_id address _4=2
    NEWC	//  anycast workchain_id address _4=2 _5
    2 STU	//  anycast workchain_id address _7
    s1 s3 XCHG	//  address workchain_id anycast _7
    1 STU	//  address workchain_id _9
    8 STI	//  address _11
    256 STU	//  _13
    ENDC	//  _14
    CTOS	//  address_cell
  }>
  generate_external_address PROC:<{
    //  address_length
    RANDU256	//  address_length address
    1 PUSHINT	//  address_length address _4=1
    NEWC	//  address_length address _4=1 _5
    2 STU	//  address_length address _7
    s2 s(-1) PUXC	//  address_length address address_length _7
    9 STU	//  address_length address _9
    ROT	//  address _9 address_length
    STUX	//  _10
    ENDC	//  _11
    CTOS	//  address_cell
  }>
  generate_external_address_with_custom_data PROC:<{
    //  address_length address
    1 PUSHINT	//  address_length address _3=1
    NEWC	//  address_length address _3=1 _4
    2 STU	//  address_length address _6
    s2 s(-1) PUXC	//  address_length address address_length _6
    9 STU	//  address_length address _8
    ROT	//  address _8 address_length
    STUX	//  _9
    ENDC	//  _10
    CTOS	//  address_cell
  }>
  generate_var_address PROC:<{
    //  address_length
    DUP
    8 PUSHPOW2	//  address_length address_length _1=256
    GREATER	//  address_length _2
    IFJMP:<{	//  address_length
      RANDU256	//  address_length address
      RANDU256	//  address_length address address_secondpart
      -1 PUSHINT	//  address_length address address_secondpart _8=-1
      0 PUSHINT	//  address_length address address_secondpart _8=-1 _9=0
      3 PUSHINT	//  address_length address address_secondpart _8=-1 _9=0 _10=3
      NEWC	//  address_length address address_secondpart _8=-1 _9=0 _10=3 _11
      2 STU	//  address_length address address_secondpart _8=-1 _9=0 _13
      1 STU	//  address_length address address_secondpart _8=-1 _15
      s1 s4 XCHG	//  _8=-1 address address_secondpart address_length _15
      9 STU	//  _8=-1 address address_secondpart _17
      s1 s3 XCHG	//  address_secondpart address _8=-1 _17
      8 STI	//  address_secondpart address _19
      256 STU	//  address_secondpart _21
      256 STU	//  _23
      ENDC	//  _24
      CTOS	//  address_cell
    }>	//  address_length
    RANDU256	//  address_length address
    -1 PUSHINT	//  address_length address _29=-1
    0 PUSHINT	//  address_length address _29=-1 _30=0
    3 PUSHINT	//  address_length address _29=-1 _30=0 _31=3
    NEWC	//  address_length address _29=-1 _30=0 _31=3 _32
    2 STU	//  address_length address _29=-1 _30=0 _34
    1 STU	//  address_length address _29=-1 _36
    s3 s(-1) PUXC	//  address_length address _29=-1 address_length _36
    9 STU	//  address_length address _29=-1 _38
    8 STI	//  address_length address _40
    ROT	//  address _40 address_length
    STUX	//  _41
    ENDC	//  _42
    CTOS	//  address_cell
  }>
  generate_var_address_with_custom_data PROC:<{
    //  anycast workchain_id address_length address_slice
    OVER
    8 PUSHPOW2	//  anycast workchain_id address_length address_slice address_length _4=256
    GREATER	//  anycast workchain_id address_length address_slice _5
    IFJMP:<{	//  anycast workchain_id address_length address_slice
      256 LDU	//  anycast workchain_id address_length addr address_slice
      256 LDU	//  anycast workchain_id address_length addr _52 _51
      DROP	//  anycast workchain_id address_length addr addr_second_part
      3 PUSHINT	//  anycast workchain_id address_length addr addr_second_part _15=3
      NEWC	//  anycast workchain_id address_length addr addr_second_part _15=3 _16
      2 STU	//  anycast workchain_id address_length addr addr_second_part _18
      s1 s5 XCHG	//  addr_second_part workchain_id address_length addr anycast _18
      1 STU	//  addr_second_part workchain_id address_length addr _20
      s1 s2 XCHG	//  addr_second_part workchain_id addr address_length _20
      9 STU	//  addr_second_part workchain_id addr _22
      s1 s2 XCHG	//  addr_second_part addr workchain_id _22
      8 STI	//  addr_second_part addr _24
      256 STU	//  addr_second_part _26
      256 STU	//  _28
      ENDC	//  _29
      CTOS	//  address_cell
    }>	//  anycast workchain_id address_length address_slice
    256 LDU	//  anycast workchain_id address_length _54 _53
    DROP	//  anycast workchain_id address_length addr
    3 PUSHINT	//  anycast workchain_id address_length addr _36=3
    NEWC	//  anycast workchain_id address_length addr _36=3 _37
    2 STU	//  anycast workchain_id address_length addr _39
    s1 s4 XCHG	//  addr workchain_id address_length anycast _39
    1 STU	//  addr workchain_id address_length _41
    s1 s(-1) PUXC	//  addr workchain_id address_length address_length _41
    9 STU	//  addr workchain_id address_length _43
    s1 s2 XCHG	//  addr address_length workchain_id _43
    8 STI	//  addr address_length _45
    SWAP	//  addr _45 address_length
    STUX	//  _46
    ENDC	//  _47
    CTOS	//  address_cell
  }>
  generate_any_address PROC:<{
    //  typeOfAddress
    DUP	//  typeOfAddress typeOfAddress
    0 EQINT	//  typeOfAddress _2
    IFJMP:<{	//  typeOfAddress
      DROP	// 
      generate_empty_address CALLDICT	//  _3
    }>	//  typeOfAddress
    DUP	//  typeOfAddress typeOfAddress
    1 EQINT	//  typeOfAddress _5
    IFJMP:<{	//  typeOfAddress
      DROP	// 
      generate_internal_address CALLDICT	//  _6
    }>	//  typeOfAddress
    2 EQINT	//  _8
    IFJMP:<{	// 
      8 PUSHPOW2	//  _9=256
      generate_external_address CALLDICT	//  _10
    }>	// 
    8 PUSHPOW2	//  _11=256
    generate_var_address CALLDICT	//  _12
  }>
  generate_external_out_message_with_bad_source_address PROC:<{
    // 
    1 PUSHINT	//  _1=1
    -1 PUSHINT	//  _1=1 _2=-1
    0 PUSHINT	//  _1=1 _2=-1 _3=0
    2 PUSHINT	//  _1=1 _2=-1 _3=0 _4=2
    NEWC	//  _1=1 _2=-1 _3=0 _4=2 _5
    2 STU	//  _1=1 _2=-1 _3=0 _7
    1 STU	//  _1=1 _2=-1 _9
    8 STI	//  _1=1 _11
    10 STU	//  _13
    ENDC	//  _14
    CTOS	//  ssrc_invalid
    0 PUSHINT	//  ssrc_invalid _16=0
    3 PUSHINT	//  ssrc_invalid _16=0 _17=3
    NEWC	//  ssrc_invalid _16=0 _17=3 _18
    2 STU	//  ssrc_invalid _16=0 _20
    1 STI	//  ssrc_invalid _22
    SWAP	//  _22 ssrc_invalid
    STSLICER	//  _23
    ENDC	//  _24
  }>
  generate_external_out_message_with_bad_destination_address PROC:<{
    // 
    generate_internal_address CALLDICT	//  ssrc
    0 PUSHINT	//  ssrc _2=0
    3 PUSHINT	//  ssrc _2=0 _3=3
    NEWC	//  ssrc _2=0 _3=3 _4
    2 STU	//  ssrc _2=0 _6
    ROT	//  _2=0 _6 ssrc
    STSLICER	//  _2=0 _7
    1 STI	//  _9
    ENDC	//  _10
  }>
  generate_external_in_message_with_bad_source_address PROC:<{
    // 
    0 PUSHINT	//  _1=0
    7 PUSHPOW2	//  _1=0 _2=128
    1 PUSHINT	//  _1=0 _2=128 _3=1
    NEWC	//  _1=0 _2=128 _3=1 _4
    2 STU	//  _1=0 _2=128 _6
    9 STU	//  _1=0 _8
    10 STU	//  _10
    ENDC	//  _11
    CTOS	//  ssrc_invalid
    2 PUSHINT	//  ssrc_invalid _13=2
    NEWC	//  ssrc_invalid _13=2 _14
    2 STU	//  ssrc_invalid _16
    SWAP	//  _16 ssrc_invalid
    STSLICER	//  _17
    ENDC	//  _18
  }>
  generate_external_in_message_with_bad_destination_address PROC:<{
    // 
    8 PUSHPOW2	//  _1=256
    generate_external_address CALLDICT	//  ssrc
    0 PUSHINT	//  ssrc _3=0
    2 PUSHINT	//  ssrc _3=0 _4=2
    NEWC	//  ssrc _3=0 _4=2 _5
    2 STU	//  ssrc _3=0 _7
    ROT	//  _3=0 _7 ssrc
    STSLICER	//  _3=0 _8
    1 STI	//  _10
    ENDC	//  _11
  }>
  generate_internal_message_with_bad_grams_data PROC:<{
    // 
    generate_internal_address CALLDICT	//  ssrc
    generate_internal_address CALLDICT	//  ssrc sdest
    1 PUSHINT	//  ssrc sdest _4=1
    8 PUSHINT	//  ssrc sdest _4=1 _5=8
    0 PUSHINT	//  ssrc sdest _4=1 _5=8 _6=0
    s0 s0 s0 PUSH3	//  ssrc sdest _4=1 _5=8 _6=0 _7=0 _8=0 _9=0
    NEWC	//  ssrc sdest _4=1 _5=8 _6=0 _7=0 _8=0 _9=0 _10
    1 STU	//  ssrc sdest _4=1 _5=8 _6=0 _7=0 _8=0 _12
    1 STU	//  ssrc sdest _4=1 _5=8 _6=0 _7=0 _14
    1 STU	//  ssrc sdest _4=1 _5=8 _6=0 _16
    1 STU	//  ssrc sdest _4=1 _5=8 _18
    s0 s4 XCHG2	//  _5=8 sdest _4=1 _18 ssrc
    STSLICER	//  _5=8 sdest _4=1 _19
    ROT	//  _5=8 _4=1 _19 sdest
    STSLICER	//  _5=8 _4=1 _20
    s1 s2 XCHG	//  _4=1 _5=8 _20
    4 STU	//  _4=1 _22
    1 STU	//  _24
    ENDC	//  _25
  }>
  generate_internal_message_with_bad_init_state_data PROC:<{
    // 
    generate_internal_address CALLDICT	//  ssrc
    generate_internal_address CALLDICT	//  ssrc sdest
    1 PUSHINT	//  ssrc sdest _5=1
    s0 s0 PUSH2	//  ssrc sdest _5=1 _6=1 _7=1
    0 PUSHINT	//  ssrc sdest _5=1 _6=1 _7=1 _8=0
    s1 s1 s0 PUSH3	//  ssrc sdest _5=1 _6=1 _7=1 _8=0 _9=1 _10=1 _11=0
    NEWC	//  ssrc sdest _5=1 _6=1 _7=1 _8=0 _9=1 _10=1 _11=0 _12
    1 STU	//  ssrc sdest _5=1 _6=1 _7=1 _8=0 _9=1 _10=1 _14
    1 STU	//  ssrc sdest _5=1 _6=1 _7=1 _8=0 _9=1 _16
    1 STU	//  ssrc sdest _5=1 _6=1 _7=1 _8=0 _18
    1 STU	//  ssrc sdest _5=1 _6=1 _7=1 _20
    1 STU	//  ssrc sdest _5=1 _6=1 _22
    1 STU	//  ssrc sdest _5=1 _24
    1 STU	//  ssrc sdest init_state_with_bad_data
    0 PUSHINT	//  ssrc sdest init_state_with_bad_data _27=0
    SWAP	//  ssrc sdest _27=0 init_state_with_bad_data
    ENDC	//  ssrc sdest _27=0 _28
    1 PUSHINT	//  ssrc sdest _27=0 _28 _29=1
    DUP	//  ssrc sdest _27=0 _28 _29=1 _30=1
    1000 PUSHINT	//  ssrc sdest _27=0 _28 _29=1 _30=1 _31=1000
    DUP	//  ssrc sdest _27=0 _28 _29=1 _30=1 _31=1000 _32=1000
    PUSHNULL	//  ssrc sdest _27=0 _28 _29=1 _30=1 _31=1000 _32=1000 _33
    s6 s6 s6 PUSH3	//  ssrc sdest _27=0 _28 _29=1 _30=1 _31=1000 _32=1000 _33 _34=0 _35=0 _36=0
    DUP	//  ssrc sdest _27=0 _28 _29=1 _30=1 _31=1000 _32=1000 _33 _34=0 _35=0 _36=0 _37=0
    NEWC	//  ssrc sdest _27=0 _28 _29=1 _30=1 _31=1000 _32=1000 _33 _34=0 _35=0 _36=0 _37=0 _38
    1 STU	//  ssrc sdest _27=0 _28 _29=1 _30=1 _31=1000 _32=1000 _33 _34=0 _35=0 _36=0 _40
    1 STU	//  ssrc sdest _27=0 _28 _29=1 _30=1 _31=1000 _32=1000 _33 _34=0 _35=0 _42
    1 STU	//  ssrc sdest _27=0 _28 _29=1 _30=1 _31=1000 _32=1000 _33 _34=0 _44
    1 STU	//  ssrc sdest _27=0 _28 _29=1 _30=1 _31=1000 _32=1000 _33 _46
    s0 s9 XCHG2	//  _33 sdest _27=0 _28 _29=1 _30=1 _31=1000 _32=1000 _46 ssrc
    STSLICER	//  _33 sdest _27=0 _28 _29=1 _30=1 _31=1000 _32=1000 _47
    s0 s7 XCHG2	//  _33 _32=1000 _27=0 _28 _29=1 _30=1 _31=1000 _47 sdest
    STSLICER	//  _33 _32=1000 _27=0 _28 _29=1 _30=1 _31=1000 _48
    s5 PUSH	//  _33 _32=1000 _27=0 _28 _29=1 _30=1 _31=1000 _48 _49=0
    STGRAMS	//  _33 _32=1000 _27=0 _28 _29=1 _30=1 _31=1000 _50
    s1 s7 XCHG	//  _31=1000 _32=1000 _27=0 _28 _29=1 _30=1 _33 _50
    STDICT	//  _31=1000 _32=1000 _27=0 _28 _29=1 _30=1 _51
    s4 PUSH	//  _31=1000 _32=1000 _27=0 _28 _29=1 _30=1 _51 _52=0
    STGRAMS	//  _31=1000 _32=1000 _27=0 _28 _29=1 _30=1 _53
    s4 PUSH	//  _31=1000 _32=1000 _27=0 _28 _29=1 _30=1 _53 _54=0
    STGRAMS	//  _31=1000 _32=1000 _27=0 _28 _29=1 _30=1 _55
    s1 s5 XCHG	//  _31=1000 _30=1 _27=0 _28 _29=1 _32=1000 _55
    64 STU	//  _31=1000 _30=1 _27=0 _28 _29=1 _57
    s1 s5 XCHG	//  _29=1 _30=1 _27=0 _28 _31=1000 _57
    32 STU	//  _29=1 _30=1 _27=0 _28 _59
    s1 s3 XCHG	//  _29=1 _28 _27=0 _30=1 _59
    1 STU	//  _29=1 _28 _27=0 _61
    s1 s3 XCHG	//  _27=0 _28 _29=1 _61
    1 STU	//  _27=0 _28 _63
    STREF	//  _27=0 _64
    1 STU	//  _66
    ENDC	//  _67
  }>
  parse_send_raw_message PROC:<{
    //  out_action
    8 LDU	//  _1 out_action
    LDREF	//  _1 _9 _8
    DROP	//  _1 _4
  }>
  parse_lib_code PROC:<{
    //  out_action
    7 LDU	//  mode out_action
    DUP	//  mode out_action out_action
    SREFS	//  mode out_action _5
    0 GTINT	//  mode out_action _7
    IFJMP:<{	//  mode out_action
      LDREF	//  mode _20 _19
      DROP	//  mode _8
    }>	//  mode out_action
    256 LDSLICE	//  mode _22 _21
    DROP	//  mode loaded_bits
    NEWC	//  mode loaded_bits _14
    SWAP	//  mode _14 loaded_bits
    STSLICER	//  mode _15
    ENDC	//  mode _16
  }>
  parse_raw_reserve PROC:<{
    //  out_action
    8 LDU	//  _1 out_action
    LDDICT	//  _1 _9 _8
    DROP	//  _1 _4
  }>
  parse_set_code PROC:<{
    //  out_action
    LDREF	//  _4 _3
    DROP	//  _1
  }>
  parse_c5 PROC:<{
    // 
    NIL	//  list_of_actions_tuple
    c5 PUSH	//  list_of_actions_tuple c5
    NIL	//  list_of_actions_tuple c5 actions
    SWAP	//  list_of_actions_tuple actions c5
    CTOS	//  list_of_actions_tuple actions out_action_node
    DUP	//  list_of_actions_tuple actions out_action_node out_action_node
    SBITS	//  list_of_actions_tuple actions out_action_node _8
    0 EQINT	//  list_of_actions_tuple actions out_action_node _10
    IFJMP:<{	//  list_of_actions_tuple actions out_action_node
      3 BLKDROP	// 
      PUSHNULL	//  _11
    }>	//  list_of_actions_tuple actions out_action_node
    0 PUSHINT	//  list_of_actions_tuple actions out_action_node num=0
    UNTIL:<{
      SWAP	//  list_of_actions_tuple actions num out_action_node
      LDREF	//  list_of_actions_tuple actions num next out_action_node
      s0 s3 XCHG2	//  list_of_actions_tuple next num out_action_node actions
      CONS	//  list_of_actions_tuple next num actions
      s0 s2 XCHG	//  list_of_actions_tuple actions num next
      CTOS	//  list_of_actions_tuple actions num out_action_node
      SWAP	//  list_of_actions_tuple actions out_action_node num
      INC	//  list_of_actions_tuple actions out_action_node num
      OVER	//  list_of_actions_tuple actions out_action_node num out_action_node
      SBITS	//  list_of_actions_tuple actions out_action_node num _23
      0 EQINT	//  list_of_actions_tuple actions out_action_node num break
    }>	//  list_of_actions_tuple actions out_action_node num
    NIP	//  list_of_actions_tuple actions num
    0 PUSHINT	//  list_of_actions_tuple actions num i=0
    UNTIL:<{
      s0 s2 XCHG	//  list_of_actions_tuple i num actions
      UNCONS	//  list_of_actions_tuple i num out_action actions
      SWAP	//  list_of_actions_tuple i num actions out_action
      32 LDU	//  list_of_actions_tuple i num actions action_code out_action
      OVER
      247711853 PUSHINT	//  list_of_actions_tuple i num actions action_code out_action action_code _35=247711853
      EQUAL	//  list_of_actions_tuple i num actions action_code out_action _36
      IF:<{	//  list_of_actions_tuple i num actions action_code out_action
        NIP	//  list_of_actions_tuple i num actions out_action
        parse_send_raw_message CALLDICT	//  list_of_actions_tuple i num actions mode body
        0 PUSHINT	//  list_of_actions_tuple i num actions mode body _42=0
        s0 s2 XCHG	//  list_of_actions_tuple i num actions _42=0 body mode
        TRIPLE	//  list_of_actions_tuple i num actions _41
        s1 s4 XCHG	//  actions i num list_of_actions_tuple _41
        TPUSH	//  actions i num list_of_actions_tuple
      }>ELSE<{	//  list_of_actions_tuple i num actions action_code out_action
        OVER
        2907562126 PUSHINT	//  list_of_actions_tuple i num actions action_code out_action action_code _44=2907562126
        EQUAL	//  list_of_actions_tuple i num actions action_code out_action _45
        IF:<{	//  list_of_actions_tuple i num actions action_code out_action
          NIP	//  list_of_actions_tuple i num actions out_action
          parse_set_code CALLDICT	//  list_of_actions_tuple i num actions new_setcode
          1 PUSHINT	//  list_of_actions_tuple i num actions new_setcode _50=1
          SWAP
          -1 PUSHINT	//  list_of_actions_tuple i num actions _50=1 new_setcode _51=-1
          TRIPLE	//  list_of_actions_tuple i num actions _49
          s1 s4 XCHG	//  actions i num list_of_actions_tuple _49
          TPUSH	//  actions i num list_of_actions_tuple
        }>ELSE<{	//  list_of_actions_tuple i num actions action_code out_action
          OVER
          921090057 PUSHINT	//  list_of_actions_tuple i num actions action_code out_action action_code _53=921090057
          EQUAL	//  list_of_actions_tuple i num actions action_code out_action _54
          IF:<{	//  list_of_actions_tuple i num actions action_code out_action
            NIP	//  list_of_actions_tuple i num actions out_action
            parse_raw_reserve CALLDICT	//  list_of_actions_tuple i num actions mode currencies
            2 PUSHINT	//  list_of_actions_tuple i num actions mode currencies _60=2
            s0 s2 XCHG	//  list_of_actions_tuple i num actions _60=2 currencies mode
            TRIPLE	//  list_of_actions_tuple i num actions _59
            s1 s4 XCHG	//  actions i num list_of_actions_tuple _59
            TPUSH	//  actions i num list_of_actions_tuple
          }>ELSE<{	//  list_of_actions_tuple i num actions action_code out_action
            SWAP
            653925844 PUSHINT	//  list_of_actions_tuple i num actions out_action action_code _62=653925844
            EQUAL	//  list_of_actions_tuple i num actions out_action _63
            IF:<{	//  list_of_actions_tuple i num actions out_action
              parse_lib_code CALLDICT	//  list_of_actions_tuple i num actions mode lib_cell_or_lib_hash
              3 PUSHINT	//  list_of_actions_tuple i num actions mode lib_cell_or_lib_hash _69=3
              s0 s2 XCHG	//  list_of_actions_tuple i num actions _69=3 lib_cell_or_lib_hash mode
              TRIPLE	//  list_of_actions_tuple i num actions _68
              s1 s4 XCHG	//  actions i num list_of_actions_tuple _68
              TPUSH	//  actions i num list_of_actions_tuple
              s0 s3 XCHG	//  list_of_actions_tuple i num actions
            }>ELSE<{
              DROP	//  list_of_actions_tuple i num actions
            }>
            s0 s3 XCHG	//  actions i num list_of_actions_tuple
          }>
        }>
      }>
      s0 s2 XCHG	//  actions list_of_actions_tuple num i
      INC	//  actions list_of_actions_tuple num i
      s0 s1 PUSH2	//  actions list_of_actions_tuple num i i num
      GEQ	//  actions list_of_actions_tuple num i _73
      s3 s4 XCHG	//  list_of_actions_tuple actions num i _73
    }>	//  list_of_actions_tuple actions num i
    3 BLKDROP	//  list_of_actions_tuple
  }>
  generate_init_state PROC:<{
    // 
    0 PUSHINT	//  _0=0
    s0 s0 s0 PUSH3	//  _0=0 _1=0 _2=0 _3=0
    1 PUSHINT	//  _0=0 _1=0 _2=0 _3=0 _4=1
    s0 s1 PUSH2	//  _0=0 _1=0 _2=0 _3=0 _4=1 _5=1 _6=0
    NEWC	//  _0=0 _1=0 _2=0 _3=0 _4=1 _5=1 _6=0 _7
    1 STU	//  _0=0 _1=0 _2=0 _3=0 _4=1 _5=1 _9
    1 STU	//  _0=0 _1=0 _2=0 _3=0 _4=1 _11
    1 STU	//  _0=0 _1=0 _2=0 _3=0 _13
    1 STU	//  _0=0 _1=0 _2=0 _15
    1 STU	//  _0=0 _1=0 _17
    1 STU	//  _0=0 _19
    1 STU	//  _21
  }>
  generate_init_state_with_data PROC:<{
    //  code data library
    1 PUSHINT	//  code data library _3=1
    s0 s0 PUSH2	//  code data library _3=1 _4=1 _5=1
    0 PUSHINT	//  code data library _3=1 _4=1 _5=1 _6=0
    s1 s1 s0 PUSH3	//  code data library _3=1 _4=1 _5=1 _6=0 _7=1 _8=1 _9=0
    NEWC	//  code data library _3=1 _4=1 _5=1 _6=0 _7=1 _8=1 _9=0 _10
    1 STU	//  code data library _3=1 _4=1 _5=1 _6=0 _7=1 _8=1 _12
    1 STU	//  code data library _3=1 _4=1 _5=1 _6=0 _7=1 _14
    1 STU	//  code data library _3=1 _4=1 _5=1 _6=0 _16
    1 STU	//  code data library _3=1 _4=1 _5=1 _18
    1 STU	//  code data library _3=1 _4=1 _20
    s1 s5 XCHG	//  _4=1 data library _3=1 code _20
    STREF	//  _4=1 data library _3=1 _21
    s1 s4 XCHG	//  _3=1 data library _4=1 _21
    1 STU	//  _3=1 data library _23
    s1 s2 XCHG	//  _3=1 library data _23
    STREF	//  _3=1 library _24
    s1 s2 XCHG	//  library _3=1 _24
    1 STU	//  library _26
    STREF	//  _27
  }>
  parse_init_state PROC:<{
    //  cs
    NIL	//  cs parsed_tuple
    SWAP	//  parsed_tuple cs
    1 LDU	//  parsed_tuple maybe_five cs
    s2 s1 XCPU	//  cs maybe_five parsed_tuple maybe_five
    TPUSH	//  cs maybe_five parsed_tuple
    SWAP	//  cs parsed_tuple maybe_five
    1 EQINT	//  cs parsed_tuple _10
    IF:<{	//  cs parsed_tuple
      SWAP	//  parsed_tuple cs
      5 LDU	//  parsed_tuple _12 cs
      -ROT	//  cs parsed_tuple _12
      TPUSH	//  cs parsed_tuple
    }>	//  cs parsed_tuple
    SWAP	//  parsed_tuple cs
    1 LDU	//  parsed_tuple maybe_tick_tock cs
    s2 s1 XCPU	//  cs maybe_tick_tock parsed_tuple maybe_tick_tock
    TPUSH	//  cs maybe_tick_tock parsed_tuple
    SWAP	//  cs parsed_tuple maybe_tick_tock
    1 EQINT	//  cs parsed_tuple _23
    IF:<{	//  cs parsed_tuple
      SWAP	//  parsed_tuple cs
      1 LDU	//  parsed_tuple _25 cs
      -ROT	//  cs parsed_tuple _25
      TPUSH	//  cs parsed_tuple
      SWAP	//  parsed_tuple cs
      1 LDU	//  parsed_tuple _30 cs
      -ROT	//  cs parsed_tuple _30
      TPUSH	//  cs parsed_tuple
    }>	//  cs parsed_tuple
    SWAP	//  parsed_tuple cs
    1 LDU	//  parsed_tuple maybe_code cs
    s2 s1 XCPU	//  cs maybe_code parsed_tuple maybe_code
    TPUSH	//  cs maybe_code parsed_tuple
    SWAP	//  cs parsed_tuple maybe_code
    1 EQINT	//  cs parsed_tuple _41
    IF:<{	//  cs parsed_tuple
      SWAP	//  parsed_tuple cs
      LDREF	//  parsed_tuple _43 cs
      -ROT	//  cs parsed_tuple _43
      TPUSH	//  cs parsed_tuple
    }>	//  cs parsed_tuple
    SWAP	//  parsed_tuple cs
    1 LDU	//  parsed_tuple maybe_data cs
    s2 s1 XCPU	//  cs maybe_data parsed_tuple maybe_data
    TPUSH	//  cs maybe_data parsed_tuple
    SWAP	//  cs parsed_tuple maybe_data
    1 EQINT	//  cs parsed_tuple _53
    IF:<{	//  cs parsed_tuple
      SWAP	//  parsed_tuple cs
      LDREF	//  parsed_tuple _55 cs
      -ROT	//  cs parsed_tuple _55
      TPUSH	//  cs parsed_tuple
    }>	//  cs parsed_tuple
    SWAP	//  parsed_tuple cs
    1 LDU	//  parsed_tuple maybe_library cs
    s2 s1 XCPU	//  cs maybe_library parsed_tuple maybe_library
    TPUSH	//  cs maybe_library parsed_tuple
    SWAP	//  cs parsed_tuple maybe_library
    1 EQINT	//  cs parsed_tuple _65
    IF:<{	//  cs parsed_tuple
      SWAP	//  parsed_tuple cs
      LDREF	//  parsed_tuple _91 _90
      DROP	//  parsed_tuple _67
      TPUSH	//  parsed_tuple
    }>ELSE<{
      NIP	//  parsed_tuple
    }>
  }>
  random_query_id PROC:<{
    // 
    LTIME
    ADDRAND
    64 PUSHPOW2	//  _3
    RAND	//  _4
    INC	//  _6
  }>
  generate_internal_message_body PROC:<{
    //  op query_id
    SWAP
    NEWC	//  query_id op _3
    32 STU	//  query_id body
    OVER	//  query_id body query_id
    0 EQINT	//  query_id body _7
    IF:<{	//  query_id body
      NIP	//  body
      random_query_id CALLDICT	//  body query_id
      SWAP	//  query_id body
    }>	//  query_id body
    64 STU	//  _10
  }>
  generate_internal_message_custom PROC:<{
    //  bounce ton_amount init_state payload src_addr dst_addr fwd_fee
    s2 PUSH	//  bounce ton_amount init_state payload src_addr dst_addr fwd_fee src_addr
    ISNULL	//  bounce ton_amount init_state payload src_addr dst_addr fwd_fee _8
    IF:<{	//  bounce ton_amount init_state payload src_addr dst_addr fwd_fee
      s2 POP	//  bounce ton_amount init_state payload fwd_fee dst_addr
      generate_internal_address CALLDICT	//  bounce ton_amount init_state payload fwd_fee dst_addr _9
    }>ELSE<{	//  bounce ton_amount init_state payload _9 dst_addr fwd_fee
      s0 s2 XCHG	//  bounce ton_amount init_state payload fwd_fee dst_addr _9
    }>	//  bounce ton_amount init_state payload fwd_fee dst_addr ssrc
    OVER	//  bounce ton_amount init_state payload fwd_fee dst_addr ssrc dst_addr
    ISNULL	//  bounce ton_amount init_state payload fwd_fee dst_addr ssrc _12
    IF:<{	//  bounce ton_amount init_state payload fwd_fee dst_addr ssrc
      NIP	//  bounce ton_amount init_state payload fwd_fee ssrc
      generate_internal_address CALLDICT	//  bounce ton_amount init_state payload fwd_fee ssrc _13
    }>ELSE<{	//  bounce ton_amount init_state payload fwd_fee _13 ssrc
      SWAP	//  bounce ton_amount init_state payload fwd_fee ssrc _13
    }>	//  bounce ton_amount init_state payload fwd_fee ssrc sdest
    1000 PUSHINT	//  bounce ton_amount init_state payload fwd_fee ssrc sdest _16=1000
    DUP	//  bounce ton_amount init_state payload fwd_fee ssrc sdest _16=1000 _17=1000
    PUSHNULL	//  bounce ton_amount init_state payload fwd_fee ssrc sdest _16=1000 _17=1000 _18
    0 PUSHINT	//  bounce ton_amount init_state payload fwd_fee ssrc sdest _16=1000 _17=1000 _18 _19=0
    s0 s0 PUSH2	//  bounce ton_amount init_state payload fwd_fee ssrc sdest _16=1000 _17=1000 _18 _19=0 _20=0 _21=0
    NEWC	//  bounce ton_amount init_state payload fwd_fee ssrc sdest _16=1000 _17=1000 _18 _19=0 _20=0 _21=0 _22
    1 STU	//  bounce ton_amount init_state payload fwd_fee ssrc sdest _16=1000 _17=1000 _18 _19=0 _20=0 _24
    1 STU	//  bounce ton_amount init_state payload fwd_fee ssrc sdest _16=1000 _17=1000 _18 _19=0 _26
    s1 s11 XCHG	//  _19=0 ton_amount init_state payload fwd_fee ssrc sdest _16=1000 _17=1000 _18 bounce _26
    1 STU	//  _19=0 ton_amount init_state payload fwd_fee ssrc sdest _16=1000 _17=1000 _18 _28
    s1 s10 XCHG	//  _18 ton_amount init_state payload fwd_fee ssrc sdest _16=1000 _17=1000 _19=0 _28
    1 STU	//  _18 ton_amount init_state payload fwd_fee ssrc sdest _16=1000 _17=1000 _30
    s0 s4 XCHG2	//  _18 ton_amount init_state payload fwd_fee _17=1000 sdest _16=1000 _30 ssrc
    STSLICER	//  _18 ton_amount init_state payload fwd_fee _17=1000 sdest _16=1000 _31
    ROT	//  _18 ton_amount init_state payload fwd_fee _17=1000 _16=1000 _31 sdest
    STSLICER	//  _18 ton_amount init_state payload fwd_fee _17=1000 _16=1000 _32
    s0 s6 XCHG2	//  _18 _16=1000 init_state payload fwd_fee _17=1000 _32 ton_amount
    STGRAMS	//  _18 _16=1000 init_state payload fwd_fee _17=1000 _33
    s1 s6 XCHG	//  _17=1000 _16=1000 init_state payload fwd_fee _18 _33
    STDICT	//  _17=1000 _16=1000 init_state payload fwd_fee _34
    0 PUSHINT	//  _17=1000 _16=1000 init_state payload fwd_fee _34 _35=0
    STGRAMS	//  _17=1000 _16=1000 init_state payload fwd_fee _36
    SWAP	//  _17=1000 _16=1000 init_state payload _36 fwd_fee
    STGRAMS	//  _17=1000 _16=1000 init_state payload _37
    s1 s4 XCHG	//  payload _16=1000 init_state _17=1000 _37
    64 STU	//  payload _16=1000 init_state _39
    s1 s2 XCHG	//  payload init_state _16=1000 _39
    32 STU	//  payload init_state _41
    s1 s(-1) PUXC	//  payload init_state init_state _41
    1 STU	//  payload init_state msg
    SWAP	//  payload msg init_state
    1 EQINT	//  payload msg _45
    IF:<{	//  payload msg
      generate_init_state CALLDICT	//  payload msg init_state_builder
      OVER	//  payload msg init_state_builder msg
      BBITS	//  payload msg init_state_builder _48
      OVER	//  payload msg init_state_builder _48 init_state_builder
      BBITS	//  payload msg init_state_builder _48 _49
      ADD	//  payload msg init_state_builder _50
      10 PUSHPOW2DEC	//  payload msg init_state_builder _50 _51=1023
      GEQ	//  payload msg init_state_builder _52
      IF:<{	//  payload msg init_state_builder
        ENDC	//  payload msg _53
        1 PUSHINT
        ROT	//  payload _53 _54=1 msg
        1 STU	//  payload _53 _56
        STREF	//  payload msg
      }>ELSE<{	//  payload msg init_state_builder
        0 PUSHINT
        ROT	//  payload init_state_builder _58=0 msg
        1 STU	//  payload init_state_builder _60
        SWAP	//  payload _60 init_state_builder
        STBR	//  payload msg
      }>
    }>	//  payload msg
    DUP	//  payload msg msg
    BBITS	//  payload msg _62
    s2 PUSH	//  payload msg _62 payload
    BBITS	//  payload msg _62 _63
    ADD	//  payload msg _64
    10 PUSHPOW2DEC	//  payload msg _64 _65=1023
    GEQ	//  payload msg _66
    IF:<{	//  payload msg
      SWAP	//  msg payload
      ENDC	//  msg _67
      1 PUSHINT
      ROT	//  _67 _68=1 msg
      1 STU	//  _67 _70
      STREF	//  msg
    }>ELSE<{	//  payload msg
      0 PUSHINT	//  payload msg _72=0
      SWAP	//  payload _72=0 msg
      1 STU	//  payload _74
      SWAP	//  _74 payload
      STBR	//  msg
    }>
    ENDC	//  _76
  }>
  generate_get_royalty_params PROC:<{
    //  query_id
    1765620048 PUSHINT	//  query_id _1=1765620048
    SWAP	//  _1=1765620048 query_id
    generate_internal_message_body CALLDICT	//  _2
  }>
  generate_nft_transfer_request PROC:<{
    //  new_owner response_dst query_id custom_payload forward_amount forward_payload is_ref?
    1607220500 PUSHINT	//  new_owner response_dst query_id custom_payload forward_amount forward_payload is_ref? _8=1607220500
    s0 s5 XCHG2	//  new_owner response_dst is_ref? custom_payload forward_amount forward_payload _8=1607220500 query_id
    generate_internal_message_body CALLDICT	//  new_owner response_dst is_ref? custom_payload forward_amount forward_payload _9
    s0 s6 XCHG2	//  forward_payload response_dst is_ref? custom_payload forward_amount _9 new_owner
    STSLICER	//  forward_payload response_dst is_ref? custom_payload forward_amount _10
    s0 s4 XCHG2	//  forward_payload forward_amount is_ref? custom_payload _10 response_dst
    STSLICER	//  forward_payload forward_amount is_ref? custom_payload req
    OVER	//  forward_payload forward_amount is_ref? custom_payload req custom_payload
    ISNULL	//  forward_payload forward_amount is_ref? custom_payload req _12
    IF:<{	//  forward_payload forward_amount is_ref? custom_payload req
      0 PUSHINT
      s2 POP	//  forward_payload forward_amount is_ref? _13=0 req
      1 STU	//  forward_payload forward_amount is_ref? req
    }>ELSE<{	//  forward_payload forward_amount is_ref? custom_payload req
      1 PUSHINT	//  forward_payload forward_amount is_ref? custom_payload req _16=1
      SWAP	//  forward_payload forward_amount is_ref? custom_payload _16=1 req
      1 STU	//  forward_payload forward_amount is_ref? custom_payload _18
      STREF	//  forward_payload forward_amount is_ref? req
    }>
    ROT	//  forward_payload is_ref? req forward_amount
    STGRAMS	//  forward_payload is_ref? req
    s2 PUSH	//  forward_payload is_ref? req forward_payload
    ISNULL	//  forward_payload is_ref? req _21
    NOT	//  forward_payload is_ref? req _22
    IF:<{	//  forward_payload is_ref? req
      SWAP	//  forward_payload req is_ref?
      IF:<{	//  forward_payload req
        1 PUSHINT	//  forward_payload req _23=1
        SWAP	//  forward_payload _23=1 req
        1 STU	//  forward_payload _25
        STREF	//  req
      }>ELSE<{	//  forward_payload req
        0 PUSHINT	//  forward_payload req _27=0
        SWAP	//  forward_payload _27=0 req
        1 STU	//  forward_payload _29
        SWAP	//  _29 forward_payload
        CTOS	//  _29 _30
        STSLICER	//  req
      }>
    }>ELSE<{	//  forward_payload is_ref? req
      NIP
      0 PUSHINT
      s2 POP	//  _32=0 req
      1 STU	//  req
    }>
  }>
  generate_nft_get_static_data_request PROC:<{
    //  query_id
    801842850 PUSHINT	//  query_id _1=801842850
    NEWC	//  query_id _1=801842850 _2
    32 STU	//  query_id _4
    64 STU	//  _6
  }>
  generate_nft_deploy_request PROC:<{
    //  idx content query_id forward_amount
    1 PUSHINT
    ROT	//  idx content forward_amount _4=1 query_id
    generate_internal_message_body CALLDICT	//  idx content forward_amount _5
    s1 s3 XCHG	//  forward_amount content idx _5
    64 STU	//  forward_amount content _7
    ROT	//  content _7 forward_amount
    STGRAMS	//  content _8
    STREF	//  _9
  }>
  generate_jetton_burn_request PROC:<{
    //  query_id amount dst custom_payload
    1499400124 PUSHINT	//  query_id amount dst custom_payload _5=1499400124
    s0 s4 XCHG2	//  custom_payload amount dst _5=1499400124 query_id
    generate_internal_message_body CALLDICT	//  custom_payload amount dst _6
    ROT	//  custom_payload dst _6 amount
    STGRAMS	//  custom_payload dst _7
    SWAP	//  custom_payload _7 dst
    STSLICER	//  custom_payload burn_msg
    OVER	//  custom_payload burn_msg custom_payload
    ISNULL	//  custom_payload burn_msg _9
    NOT	//  custom_payload burn_msg _10
    IF:<{	//  custom_payload burn_msg
      1 PUSHINT	//  custom_payload burn_msg _11=1
      SWAP	//  custom_payload _11=1 burn_msg
      1 STU	//  custom_payload _13
      STREF	//  burn_msg
    }>ELSE<{	//  custom_payload burn_msg
      0 PUSHINT
      s2 POP	//  _15=0 burn_msg
      1 STU	//  burn_msg
    }>
  }>
  generate_jetton_burn_notification PROC:<{
    //  query_id amount sender resp_dst
    2078119902 PUSHINT	//  query_id amount sender resp_dst _4=2078119902
    s0 s4 XCHG2	//  resp_dst amount sender _4=2078119902 query_id
    generate_internal_message_body CALLDICT	//  resp_dst amount sender _5
    ROT	//  resp_dst sender _5 amount
    STGRAMS	//  resp_dst sender _6
    SWAP	//  resp_dst _6 sender
    STSLICER	//  resp_dst _7
    SWAP	//  _7 resp_dst
    STSLICER	//  _8
  }>
  generate_jetton_internal_transfer_request PROC:<{
    //  query_id amount from resp_addr forward_amount forward_payload is_ref?
    395134233 PUSHINT	//  query_id amount from resp_addr forward_amount forward_payload is_ref? _8=395134233
    s0 s7 XCHG2	//  is_ref? amount from resp_addr forward_amount forward_payload _8=395134233 query_id
    generate_internal_message_body CALLDICT	//  is_ref? amount from resp_addr forward_amount forward_payload _9
    s0 s5 XCHG2	//  is_ref? forward_payload from resp_addr forward_amount _9 amount
    STGRAMS	//  is_ref? forward_payload from resp_addr forward_amount _10
    s0 s3 XCHG2	//  is_ref? forward_payload forward_amount resp_addr _10 from
    STSLICER	//  is_ref? forward_payload forward_amount resp_addr _11
    SWAP	//  is_ref? forward_payload forward_amount _11 resp_addr
    STSLICER	//  is_ref? forward_payload forward_amount _12
    SWAP	//  is_ref? forward_payload _12 forward_amount
    STGRAMS	//  is_ref? forward_payload req
    OVER	//  is_ref? forward_payload req forward_payload
    ISNULL	//  is_ref? forward_payload req _14
    NOT	//  is_ref? forward_payload req _15
    IF:<{	//  is_ref? forward_payload req
      s0 s2 XCHG	//  req forward_payload is_ref?
      IF:<{	//  req forward_payload
        1 PUSHINT
        ROT	//  forward_payload _16=1 req
        1 STU	//  forward_payload _18
        STREF	//  req
      }>ELSE<{	//  req forward_payload
        0 PUSHINT
        ROT	//  forward_payload _20=0 req
        1 STU	//  forward_payload _22
        SWAP	//  _22 forward_payload
        CTOS	//  _22 _23
        STSLICER	//  req
      }>
    }>ELSE<{	//  is_ref? forward_payload req
      NIP
      0 PUSHINT
      s2 POP	//  _25=0 req
      1 STU	//  req
    }>
  }>
  generate_jetton_transfer_request PROC:<{
    //  query_id amount dst resp_dst custom_payload forward_amount forward_payload is_ref?
    260734629 PUSHINT	//  query_id amount dst resp_dst custom_payload forward_amount forward_payload is_ref? _9=260734629
    s0 s8 XCHG2	//  is_ref? amount dst resp_dst custom_payload forward_amount forward_payload _9=260734629 query_id
    generate_internal_message_body CALLDICT	//  is_ref? amount dst resp_dst custom_payload forward_amount forward_payload _10
    s0 s6 XCHG2	//  is_ref? forward_payload dst resp_dst custom_payload forward_amount _10 amount
    STGRAMS	//  is_ref? forward_payload dst resp_dst custom_payload forward_amount _11
    s0 s4 XCHG2	//  is_ref? forward_payload forward_amount resp_dst custom_payload _11 dst
    STSLICER	//  is_ref? forward_payload forward_amount resp_dst custom_payload _12
    ROT	//  is_ref? forward_payload forward_amount custom_payload _12 resp_dst
    STSLICER	//  is_ref? forward_payload forward_amount custom_payload req
    OVER	//  is_ref? forward_payload forward_amount custom_payload req custom_payload
    ISNULL	//  is_ref? forward_payload forward_amount custom_payload req _14
    IF:<{	//  is_ref? forward_payload forward_amount custom_payload req
      0 PUSHINT
      s2 POP	//  is_ref? forward_payload forward_amount _15=0 req
      1 STU	//  is_ref? forward_payload forward_amount req
    }>ELSE<{	//  is_ref? forward_payload forward_amount custom_payload req
      1 PUSHINT	//  is_ref? forward_payload forward_amount custom_payload req _18=1
      SWAP	//  is_ref? forward_payload forward_amount custom_payload _18=1 req
      1 STU	//  is_ref? forward_payload forward_amount custom_payload _20
      STREF	//  is_ref? forward_payload forward_amount req
    }>
    SWAP	//  is_ref? forward_payload req forward_amount
    STGRAMS	//  is_ref? forward_payload req
    OVER	//  is_ref? forward_payload req forward_payload
    ISNULL	//  is_ref? forward_payload req _23
    NOT	//  is_ref? forward_payload req _24
    IF:<{	//  is_ref? forward_payload req
      s0 s2 XCHG	//  req forward_payload is_ref?
      IF:<{	//  req forward_payload
        1 PUSHINT
        ROT	//  forward_payload _25=1 req
        1 STU	//  forward_payload _27
        STREF	//  req
      }>ELSE<{	//  req forward_payload
        0 PUSHINT
        ROT	//  forward_payload _29=0 req
        1 STU	//  forward_payload _31
        SWAP	//  _31 forward_payload
        CTOS	//  _31 _32
        STSLICER	//  req
      }>
    }>ELSE<{	//  is_ref? forward_payload req
      NIP
      0 PUSHINT
      s2 POP	//  _34=0 req
      1 STU	//  req
    }>
  }>
  generate_internal_message PROC:<{
    //  bounce ton_amount init_state payload
    generate_internal_address CALLDICT	//  bounce ton_amount init_state payload ssrc
    generate_internal_address CALLDICT	//  bounce ton_amount init_state payload ssrc sdest
    1000 PUSHINT	//  bounce ton_amount init_state payload ssrc sdest _9=1000
    DUP	//  bounce ton_amount init_state payload ssrc sdest _9=1000 _10=1000
    PUSHNULL	//  bounce ton_amount init_state payload ssrc sdest _9=1000 _10=1000 _11
    0 PUSHINT	//  bounce ton_amount init_state payload ssrc sdest _9=1000 _10=1000 _11 _12=0
    s0 s0 PUSH2	//  bounce ton_amount init_state payload ssrc sdest _9=1000 _10=1000 _11 _12=0 _13=0 _14=0
    NEWC	//  bounce ton_amount init_state payload ssrc sdest _9=1000 _10=1000 _11 _12=0 _13=0 _14=0 _15
    1 STU	//  bounce ton_amount init_state payload ssrc sdest _9=1000 _10=1000 _11 _12=0 _13=0 _17
    1 STU	//  bounce ton_amount init_state payload ssrc sdest _9=1000 _10=1000 _11 _12=0 _19
    s1 s10 XCHG	//  _12=0 ton_amount init_state payload ssrc sdest _9=1000 _10=1000 _11 bounce _19
    1 STU	//  _12=0 ton_amount init_state payload ssrc sdest _9=1000 _10=1000 _11 _21
    s1 s9 XCHG	//  _11 ton_amount init_state payload ssrc sdest _9=1000 _10=1000 _12=0 _21
    1 STU	//  _11 ton_amount init_state payload ssrc sdest _9=1000 _10=1000 _23
    s0 s4 XCHG2	//  _11 ton_amount init_state payload _10=1000 sdest _9=1000 _23 ssrc
    STSLICER	//  _11 ton_amount init_state payload _10=1000 sdest _9=1000 _24
    ROT	//  _11 ton_amount init_state payload _10=1000 _9=1000 _24 sdest
    STSLICER	//  _11 ton_amount init_state payload _10=1000 _9=1000 _25
    s0 s5 XCHG2	//  _11 _9=1000 init_state payload _10=1000 _25 ton_amount
    STGRAMS	//  _11 _9=1000 init_state payload _10=1000 _26
    s1 s5 XCHG	//  _10=1000 _9=1000 init_state payload _11 _26
    STDICT	//  _10=1000 _9=1000 init_state payload _27
    0 PUSHINT	//  _10=1000 _9=1000 init_state payload _27 _28=0
    STGRAMS	//  _10=1000 _9=1000 init_state payload _29
    0 PUSHINT	//  _10=1000 _9=1000 init_state payload _29 _30=0
    STGRAMS	//  _10=1000 _9=1000 init_state payload _31
    s1 s4 XCHG	//  payload _9=1000 init_state _10=1000 _31
    64 STU	//  payload _9=1000 init_state _33
    s1 s2 XCHG	//  payload init_state _9=1000 _33
    32 STU	//  payload init_state _35
    s1 s(-1) PUXC	//  payload init_state init_state _35
    1 STU	//  payload init_state msg
    SWAP	//  payload msg init_state
    1 EQINT	//  payload msg _39
    IF:<{	//  payload msg
      generate_init_state CALLDICT	//  payload msg init_state_builder
      OVER	//  payload msg init_state_builder msg
      BBITS	//  payload msg init_state_builder _42
      OVER	//  payload msg init_state_builder _42 init_state_builder
      BBITS	//  payload msg init_state_builder _42 _43
      ADD	//  payload msg init_state_builder _44
      10 PUSHPOW2DEC	//  payload msg init_state_builder _44 _45=1023
      GEQ	//  payload msg init_state_builder _46
      IF:<{	//  payload msg init_state_builder
        ENDC	//  payload msg _47
        1 PUSHINT
        ROT	//  payload _47 _48=1 msg
        1 STU	//  payload _47 _50
        STREF	//  payload msg
      }>ELSE<{	//  payload msg init_state_builder
        0 PUSHINT
        ROT	//  payload init_state_builder _52=0 msg
        1 STU	//  payload init_state_builder _54
        SWAP	//  payload _54 init_state_builder
        STBR	//  payload msg
      }>
    }>	//  payload msg
    DUP	//  payload msg msg
    BBITS	//  payload msg _56
    s2 PUSH	//  payload msg _56 payload
    BBITS	//  payload msg _56 _57
    ADD	//  payload msg _58
    10 PUSHPOW2DEC	//  payload msg _58 _59=1023
    GEQ	//  payload msg _60
    IF:<{	//  payload msg
      SWAP	//  msg payload
      ENDC	//  msg _61
      1 PUSHINT
      ROT	//  _61 _62=1 msg
      1 STU	//  _61 _64
      STREF	//  msg
    }>ELSE<{	//  payload msg
      0 PUSHINT	//  payload msg _66=0
      SWAP	//  payload _66=0 msg
      1 STU	//  payload _68
      SWAP	//  _68 payload
      STBR	//  msg
    }>
    ENDC	//  _70
  }>
  generate_internal_message_relaxed PROC:<{
    //  bounce ton_amount init_state payload typeOfAnyAddress
    generate_any_address CALLDICT	//  bounce ton_amount init_state payload ssrc
    generate_internal_address CALLDICT	//  bounce ton_amount init_state payload ssrc sdest
    1000 PUSHINT	//  bounce ton_amount init_state payload ssrc sdest _10=1000
    DUP	//  bounce ton_amount init_state payload ssrc sdest _10=1000 _11=1000
    PUSHNULL	//  bounce ton_amount init_state payload ssrc sdest _10=1000 _11=1000 _12
    0 PUSHINT	//  bounce ton_amount init_state payload ssrc sdest _10=1000 _11=1000 _12 _13=0
    s0 s0 PUSH2	//  bounce ton_amount init_state payload ssrc sdest _10=1000 _11=1000 _12 _13=0 _14=0 _15=0
    NEWC	//  bounce ton_amount init_state payload ssrc sdest _10=1000 _11=1000 _12 _13=0 _14=0 _15=0 _16
    1 STU	//  bounce ton_amount init_state payload ssrc sdest _10=1000 _11=1000 _12 _13=0 _14=0 _18
    1 STU	//  bounce ton_amount init_state payload ssrc sdest _10=1000 _11=1000 _12 _13=0 _20
    s1 s10 XCHG	//  _13=0 ton_amount init_state payload ssrc sdest _10=1000 _11=1000 _12 bounce _20
    1 STU	//  _13=0 ton_amount init_state payload ssrc sdest _10=1000 _11=1000 _12 _22
    s1 s9 XCHG	//  _12 ton_amount init_state payload ssrc sdest _10=1000 _11=1000 _13=0 _22
    1 STU	//  _12 ton_amount init_state payload ssrc sdest _10=1000 _11=1000 _24
    s0 s4 XCHG2	//  _12 ton_amount init_state payload _11=1000 sdest _10=1000 _24 ssrc
    STSLICER	//  _12 ton_amount init_state payload _11=1000 sdest _10=1000 _25
    ROT	//  _12 ton_amount init_state payload _11=1000 _10=1000 _25 sdest
    STSLICER	//  _12 ton_amount init_state payload _11=1000 _10=1000 _26
    s0 s5 XCHG2	//  _12 _10=1000 init_state payload _11=1000 _26 ton_amount
    STGRAMS	//  _12 _10=1000 init_state payload _11=1000 _27
    s1 s5 XCHG	//  _11=1000 _10=1000 init_state payload _12 _27
    STDICT	//  _11=1000 _10=1000 init_state payload _28
    0 PUSHINT	//  _11=1000 _10=1000 init_state payload _28 _29=0
    STGRAMS	//  _11=1000 _10=1000 init_state payload _30
    0 PUSHINT	//  _11=1000 _10=1000 init_state payload _30 _31=0
    STGRAMS	//  _11=1000 _10=1000 init_state payload _32
    s1 s4 XCHG	//  payload _10=1000 init_state _11=1000 _32
    64 STU	//  payload _10=1000 init_state _34
    s1 s2 XCHG	//  payload init_state _10=1000 _34
    32 STU	//  payload init_state _36
    s1 s(-1) PUXC	//  payload init_state init_state _36
    1 STU	//  payload init_state msg
    SWAP	//  payload msg init_state
    1 EQINT	//  payload msg _40
    IF:<{	//  payload msg
      generate_init_state CALLDICT	//  payload msg init_state_builder
      OVER	//  payload msg init_state_builder msg
      BBITS	//  payload msg init_state_builder _43
      OVER	//  payload msg init_state_builder _43 init_state_builder
      BBITS	//  payload msg init_state_builder _43 _44
      ADD	//  payload msg init_state_builder _45
      10 PUSHPOW2DEC	//  payload msg init_state_builder _45 _46=1023
      GEQ	//  payload msg init_state_builder _47
      IF:<{	//  payload msg init_state_builder
        ENDC	//  payload msg _48
        1 PUSHINT
        ROT	//  payload _48 _49=1 msg
        1 STU	//  payload _48 _51
        STREF	//  payload msg
      }>ELSE<{	//  payload msg init_state_builder
        0 PUSHINT
        ROT	//  payload init_state_builder _53=0 msg
        1 STU	//  payload init_state_builder _55
        SWAP	//  payload _55 init_state_builder
        STBR	//  payload msg
      }>
    }>	//  payload msg
    DUP	//  payload msg msg
    BBITS	//  payload msg _57
    s2 PUSH	//  payload msg _57 payload
    BBITS	//  payload msg _57 _58
    ADD	//  payload msg _59
    10 PUSHPOW2DEC	//  payload msg _59 _60=1023
    GEQ	//  payload msg _61
    IF:<{	//  payload msg
      SWAP	//  msg payload
      ENDC	//  msg _62
      1 PUSHINT
      ROT	//  _62 _63=1 msg
      1 STU	//  _62 _65
      STREF	//  msg
    }>ELSE<{	//  payload msg
      0 PUSHINT	//  payload msg _67=0
      SWAP	//  payload _67=0 msg
      1 STU	//  payload _69
      SWAP	//  _69 payload
      STBR	//  msg
    }>
    ENDC	//  _71
  }>
  generate_external_in_message PROC:<{
    //  import_fee init_state payload
    8 PUSHPOW2	//  import_fee init_state payload _4=256
    generate_external_address CALLDICT	//  import_fee init_state payload ssrc
    generate_internal_address CALLDICT	//  import_fee init_state payload ssrc sdest
    2 PUSHINT	//  import_fee init_state payload ssrc sdest _9=2
    NEWC	//  import_fee init_state payload ssrc sdest _9=2 _10
    2 STU	//  import_fee init_state payload ssrc sdest _12
    ROT	//  import_fee init_state payload sdest _12 ssrc
    STSLICER	//  import_fee init_state payload sdest _13
    SWAP	//  import_fee init_state payload _13 sdest
    STSLICER	//  import_fee init_state payload _14
    s0 s3 XCHG2	//  payload init_state _14 import_fee
    STGRAMS	//  payload init_state _15
    s1 s(-1) PUXC	//  payload init_state init_state _15
    1 STU	//  payload init_state msg
    SWAP	//  payload msg init_state
    1 EQINT	//  payload msg _19
    IF:<{	//  payload msg
      generate_init_state CALLDICT	//  payload msg init_state_builder
      OVER	//  payload msg init_state_builder msg
      BBITS	//  payload msg init_state_builder _22
      OVER	//  payload msg init_state_builder _22 init_state_builder
      BBITS	//  payload msg init_state_builder _22 _23
      ADD	//  payload msg init_state_builder _24
      10 PUSHPOW2DEC	//  payload msg init_state_builder _24 _25=1023
      GEQ	//  payload msg init_state_builder _26
      IF:<{	//  payload msg init_state_builder
        ENDC	//  payload msg _27
        1 PUSHINT
        ROT	//  payload _27 _28=1 msg
        1 STU	//  payload _27 _30
        STREF	//  payload msg
      }>ELSE<{	//  payload msg init_state_builder
        0 PUSHINT
        ROT	//  payload init_state_builder _32=0 msg
        1 STU	//  payload init_state_builder _34
        SWAP	//  payload _34 init_state_builder
        STBR	//  payload msg
      }>
    }>	//  payload msg
    DUP	//  payload msg msg
    BBITS	//  payload msg _36
    s2 PUSH	//  payload msg _36 payload
    BBITS	//  payload msg _36 _37
    ADD	//  payload msg _38
    10 PUSHPOW2DEC	//  payload msg _38 _39=1023
    GREATER	//  payload msg _40
    IF:<{	//  payload msg
      SWAP	//  msg payload
      ENDC	//  msg _41
      1 PUSHINT
      ROT	//  _41 _42=1 msg
      1 STU	//  _41 _44
      STREF	//  msg
    }>ELSE<{	//  payload msg
      0 PUSHINT	//  payload msg _46=0
      SWAP	//  payload _46=0 msg
      1 STU	//  payload _48
      SWAP	//  _48 payload
      STBR	//  msg
    }>
    ENDC	//  _50
  }>
  generate_external_in_message_with_empty_source_address PROC:<{
    //  import_fee init_state payload
    generate_empty_address CALLDICT	//  import_fee init_state payload ssrc
    generate_internal_address CALLDICT	//  import_fee init_state payload ssrc sdest
    2 PUSHINT	//  import_fee init_state payload ssrc sdest _8=2
    NEWC	//  import_fee init_state payload ssrc sdest _8=2 _9
    2 STU	//  import_fee init_state payload ssrc sdest _11
    ROT	//  import_fee init_state payload sdest _11 ssrc
    STSLICER	//  import_fee init_state payload sdest _12
    SWAP	//  import_fee init_state payload _12 sdest
    STSLICER	//  import_fee init_state payload _13
    s0 s3 XCHG2	//  payload init_state _13 import_fee
    STGRAMS	//  payload init_state _14
    s1 s(-1) PUXC	//  payload init_state init_state _14
    1 STU	//  payload init_state msg
    SWAP	//  payload msg init_state
    1 EQINT	//  payload msg _18
    IF:<{	//  payload msg
      generate_init_state CALLDICT	//  payload msg init_state_builder
      OVER	//  payload msg init_state_builder msg
      BBITS	//  payload msg init_state_builder _21
      OVER	//  payload msg init_state_builder _21 init_state_builder
      BBITS	//  payload msg init_state_builder _21 _22
      ADD	//  payload msg init_state_builder _23
      10 PUSHPOW2DEC	//  payload msg init_state_builder _23 _24=1023
      GEQ	//  payload msg init_state_builder _25
      IF:<{	//  payload msg init_state_builder
        ENDC	//  payload msg _26
        1 PUSHINT
        ROT	//  payload _26 _27=1 msg
        1 STU	//  payload _26 _29
        STREF	//  payload msg
      }>ELSE<{	//  payload msg init_state_builder
        0 PUSHINT
        ROT	//  payload init_state_builder _31=0 msg
        1 STU	//  payload init_state_builder _33
        SWAP	//  payload _33 init_state_builder
        STBR	//  payload msg
      }>
    }>	//  payload msg
    DUP	//  payload msg msg
    BBITS	//  payload msg _35
    s2 PUSH	//  payload msg _35 payload
    BBITS	//  payload msg _35 _36
    ADD	//  payload msg _37
    10 PUSHPOW2DEC	//  payload msg _37 _38=1023
    GEQ	//  payload msg _39
    IF:<{	//  payload msg
      SWAP	//  msg payload
      ENDC	//  msg _40
      1 PUSHINT
      ROT	//  _40 _41=1 msg
      1 STU	//  _40 _43
      STREF	//  msg
    }>ELSE<{	//  payload msg
      0 PUSHINT	//  payload msg _45=0
      SWAP	//  payload _45=0 msg
      1 STU	//  payload _47
      SWAP	//  _47 payload
      STBR	//  msg
    }>
    ENDC	//  _49
  }>
  generate_external_out_message PROC:<{
    //  import_fee init_state payload
    s2 POP	//  payload init_state
    generate_internal_address CALLDICT	//  payload init_state ssrc
    8 PUSHPOW2	//  payload init_state ssrc _6=256
    generate_external_address CALLDICT	//  payload init_state ssrc sdest
    1000 PUSHINT	//  payload init_state ssrc sdest _9=1000
    DUP	//  payload init_state ssrc sdest _9=1000 _10=1000
    3 PUSHINT	//  payload init_state ssrc sdest _9=1000 _10=1000 _11=3
    NEWC	//  payload init_state ssrc sdest _9=1000 _10=1000 _11=3 _12
    2 STU	//  payload init_state ssrc sdest _9=1000 _10=1000 _14
    s0 s4 XCHG2	//  payload init_state _10=1000 sdest _9=1000 _14 ssrc
    STSLICER	//  payload init_state _10=1000 sdest _9=1000 _15
    ROT	//  payload init_state _10=1000 _9=1000 _15 sdest
    STSLICER	//  payload init_state _10=1000 _9=1000 _16
    s1 s2 XCHG	//  payload init_state _9=1000 _10=1000 _16
    64 STU	//  payload init_state _9=1000 _18
    32 STU	//  payload init_state _20
    s1 s(-1) PUXC	//  payload init_state init_state _20
    1 STU	//  payload init_state msg
    SWAP	//  payload msg init_state
    1 EQINT	//  payload msg _24
    IF:<{	//  payload msg
      generate_init_state CALLDICT	//  payload msg init_state_builder
      OVER	//  payload msg init_state_builder msg
      BBITS	//  payload msg init_state_builder _27
      OVER	//  payload msg init_state_builder _27 init_state_builder
      BBITS	//  payload msg init_state_builder _27 _28
      ADD	//  payload msg init_state_builder _29
      10 PUSHPOW2DEC	//  payload msg init_state_builder _29 _30=1023
      GEQ	//  payload msg init_state_builder _31
      IF:<{	//  payload msg init_state_builder
        ENDC	//  payload msg _32
        1 PUSHINT
        ROT	//  payload _32 _33=1 msg
        1 STU	//  payload _32 _35
        STREF	//  payload msg
      }>ELSE<{	//  payload msg init_state_builder
        0 PUSHINT
        ROT	//  payload init_state_builder _37=0 msg
        1 STU	//  payload init_state_builder _39
        SWAP	//  payload _39 init_state_builder
        STBR	//  payload msg
      }>
    }>	//  payload msg
    DUP	//  payload msg msg
    BBITS	//  payload msg _41
    s2 PUSH	//  payload msg _41 payload
    BBITS	//  payload msg _41 _42
    ADD	//  payload msg _43
    10 PUSHPOW2DEC	//  payload msg _43 _44=1023
    GEQ	//  payload msg _45
    IF:<{	//  payload msg
      SWAP	//  msg payload
      ENDC	//  msg _46
      1 PUSHINT
      ROT	//  _46 _47=1 msg
      1 STU	//  _46 _49
      STREF	//  msg
    }>ELSE<{	//  payload msg
      0 PUSHINT	//  payload msg _51=0
      SWAP	//  payload _51=0 msg
      1 STU	//  payload _53
      SWAP	//  _53 payload
      STBR	//  msg
    }>
    ENDC	//  _55
  }>
  generate_external_out_message_with_empty_destination_address PROC:<{
    //  import_fee init_state payload
    s2 POP	//  payload init_state
    generate_internal_address CALLDICT	//  payload init_state ssrc
    generate_empty_address CALLDICT	//  payload init_state ssrc sdest
    1000 PUSHINT	//  payload init_state ssrc sdest _8=1000
    DUP	//  payload init_state ssrc sdest _8=1000 _9=1000
    3 PUSHINT	//  payload init_state ssrc sdest _8=1000 _9=1000 _10=3
    NEWC	//  payload init_state ssrc sdest _8=1000 _9=1000 _10=3 _11
    2 STU	//  payload init_state ssrc sdest _8=1000 _9=1000 _13
    s0 s4 XCHG2	//  payload init_state _9=1000 sdest _8=1000 _13 ssrc
    STSLICER	//  payload init_state _9=1000 sdest _8=1000 _14
    ROT	//  payload init_state _9=1000 _8=1000 _14 sdest
    STSLICER	//  payload init_state _9=1000 _8=1000 _15
    s1 s2 XCHG	//  payload init_state _8=1000 _9=1000 _15
    64 STU	//  payload init_state _8=1000 _17
    32 STU	//  payload init_state _19
    s1 s(-1) PUXC	//  payload init_state init_state _19
    1 STU	//  payload init_state msg
    SWAP	//  payload msg init_state
    1 EQINT	//  payload msg _23
    IF:<{	//  payload msg
      generate_init_state CALLDICT	//  payload msg init_state_builder
      OVER	//  payload msg init_state_builder msg
      BBITS	//  payload msg init_state_builder _26
      OVER	//  payload msg init_state_builder _26 init_state_builder
      BBITS	//  payload msg init_state_builder _26 _27
      ADD	//  payload msg init_state_builder _28
      10 PUSHPOW2DEC	//  payload msg init_state_builder _28 _29=1023
      GEQ	//  payload msg init_state_builder _30
      IF:<{	//  payload msg init_state_builder
        ENDC	//  payload msg _31
        1 PUSHINT
        ROT	//  payload _31 _32=1 msg
        1 STU	//  payload _31 _34
        STREF	//  payload msg
      }>ELSE<{	//  payload msg init_state_builder
        0 PUSHINT
        ROT	//  payload init_state_builder _36=0 msg
        1 STU	//  payload init_state_builder _38
        SWAP	//  payload _38 init_state_builder
        STBR	//  payload msg
      }>
    }>	//  payload msg
    DUP	//  payload msg msg
    BBITS	//  payload msg _40
    s2 PUSH	//  payload msg _40 payload
    BBITS	//  payload msg _40 _41
    ADD	//  payload msg _42
    10 PUSHPOW2DEC	//  payload msg _42 _43=1023
    GEQ	//  payload msg _44
    IF:<{	//  payload msg
      SWAP	//  msg payload
      ENDC	//  msg _45
      1 PUSHINT
      ROT	//  _45 _46=1 msg
      1 STU	//  _45 _48
      STREF	//  msg
    }>ELSE<{	//  payload msg
      0 PUSHINT	//  payload msg _50=0
      SWAP	//  payload _50=0 msg
      1 STU	//  payload _52
      SWAP	//  _52 payload
      STBR	//  msg
    }>
    ENDC	//  _54
  }>
  generate_external_out_message_relaxed PROC:<{
    //  ton_amount init_state payload typeOfAnyAddress
    s3 POP	//  typeOfAnyAddress init_state payload
    s0 s2 XCHG	//  payload init_state typeOfAnyAddress
    generate_any_address CALLDICT	//  payload init_state ssrc
    8 PUSHPOW2	//  payload init_state ssrc _7=256
    generate_external_address CALLDICT	//  payload init_state ssrc sdest
    1000 PUSHINT	//  payload init_state ssrc sdest _10=1000
    DUP	//  payload init_state ssrc sdest _10=1000 _11=1000
    3 PUSHINT	//  payload init_state ssrc sdest _10=1000 _11=1000 _12=3
    NEWC	//  payload init_state ssrc sdest _10=1000 _11=1000 _12=3 _13
    2 STU	//  payload init_state ssrc sdest _10=1000 _11=1000 _15
    s0 s4 XCHG2	//  payload init_state _11=1000 sdest _10=1000 _15 ssrc
    STSLICER	//  payload init_state _11=1000 sdest _10=1000 _16
    ROT	//  payload init_state _11=1000 _10=1000 _16 sdest
    STSLICER	//  payload init_state _11=1000 _10=1000 _17
    s1 s2 XCHG	//  payload init_state _10=1000 _11=1000 _17
    64 STU	//  payload init_state _10=1000 _19
    32 STU	//  payload init_state _21
    s1 s(-1) PUXC	//  payload init_state init_state _21
    1 STU	//  payload init_state msg
    SWAP	//  payload msg init_state
    1 EQINT	//  payload msg _25
    IF:<{	//  payload msg
      generate_init_state CALLDICT	//  payload msg init_state_builder
      OVER	//  payload msg init_state_builder msg
      BBITS	//  payload msg init_state_builder _28
      OVER	//  payload msg init_state_builder _28 init_state_builder
      BBITS	//  payload msg init_state_builder _28 _29
      ADD	//  payload msg init_state_builder _30
      10 PUSHPOW2DEC	//  payload msg init_state_builder _30 _31=1023
      GEQ	//  payload msg init_state_builder _32
      IF:<{	//  payload msg init_state_builder
        ENDC	//  payload msg _33
        1 PUSHINT
        ROT	//  payload _33 _34=1 msg
        1 STU	//  payload _33 _36
        STREF	//  payload msg
      }>ELSE<{	//  payload msg init_state_builder
        0 PUSHINT
        ROT	//  payload init_state_builder _38=0 msg
        1 STU	//  payload init_state_builder _40
        SWAP	//  payload _40 init_state_builder
        STBR	//  payload msg
      }>
    }>	//  payload msg
    DUP	//  payload msg msg
    BBITS	//  payload msg _42
    s2 PUSH	//  payload msg _42 payload
    BBITS	//  payload msg _42 _43
    ADD	//  payload msg _44
    10 PUSHPOW2DEC	//  payload msg _44 _45=1023
    GEQ	//  payload msg _46
    IF:<{	//  payload msg
      SWAP	//  msg payload
      ENDC	//  msg _47
      1 PUSHINT
      ROT	//  _47 _48=1 msg
      1 STU	//  _47 _50
      STREF	//  msg
    }>ELSE<{	//  payload msg
      0 PUSHINT	//  payload msg _52=0
      SWAP	//  payload _52=0 msg
      1 STU	//  payload _54
      SWAP	//  _54 payload
      STBR	//  msg
    }>
    ENDC	//  _56
  }>
  parse_internal_message PROC:<{
    //  message
    CTOS	//  cs
    112 PUSHINT	//  cs _3
    SWAP	//  _3 cs
    1 LDU	//  _3 _4 cs
    SWAP	//  _3 cs _4
    0 NEQINT	//  _3 cs _8
    s1 s2 XCHG	//  cs _3 _8
    THROWANYIF
    1 LDU	//  ihr_disabled cs
    1 LDU	//  ihr_disabled bounce cs
    1 LDU	//  ihr_disabled bounce bounced cs
    LDMSGADDR	//  ihr_disabled bounce bounced src cs
    LDMSGADDR	//  ihr_disabled bounce bounced src to_address cs
    LDVARUINT16	//  ihr_disabled bounce bounced src to_address money cs
    LDDICT	//  ihr_disabled bounce bounced src to_address money _86 _85
    NIP	//  ihr_disabled bounce bounced src to_address money cs
    LDGRAMS	//  ihr_disabled bounce bounced src to_address money _88 _87
    NIP	//  ihr_disabled bounce bounced src to_address money cs
    LDGRAMS	//  ihr_disabled bounce bounced src to_address money _90 _89
    NIP	//  ihr_disabled bounce bounced src to_address money cs
    96 LDU	//  ihr_disabled bounce bounced src to_address money timestamps cs
    1 LDU	//  ihr_disabled bounce bounced src to_address money timestamps maybe_init_state cs
    NIL	//  ihr_disabled bounce bounced src to_address money timestamps maybe_init_state cs init_state
    s0 s2 XCHG	//  ihr_disabled bounce bounced src to_address money timestamps init_state cs maybe_init_state
    1 EQINT	//  ihr_disabled bounce bounced src to_address money timestamps init_state cs _50
    IF:<{	//  ihr_disabled bounce bounced src to_address money timestamps init_state cs
      NIP	//  ihr_disabled bounce bounced src to_address money timestamps cs
      1 LDU	//  ihr_disabled bounce bounced src to_address money timestamps _51 cs
      SWAP	//  ihr_disabled bounce bounced src to_address money timestamps cs _51
      IF:<{	//  ihr_disabled bounce bounced src to_address money timestamps cs
        LDREF	//  ihr_disabled bounce bounced src to_address money timestamps _54 cs
        SWAP	//  ihr_disabled bounce bounced src to_address money timestamps cs _54
        CTOS	//  ihr_disabled bounce bounced src to_address money timestamps cs _56
        parse_init_state CALLDICT	//  ihr_disabled bounce bounced src to_address money timestamps cs init_state
      }>ELSE<{	//  ihr_disabled bounce bounced src to_address money timestamps cs
        DUP	//  ihr_disabled bounce bounced src to_address money timestamps cs cs
        parse_init_state CALLDICT	//  ihr_disabled bounce bounced src to_address money timestamps cs init_state
      }>
      SWAP	//  ihr_disabled bounce bounced src to_address money timestamps init_state cs
    }>	//  ihr_disabled bounce bounced src to_address money timestamps init_state cs
    1 LDU	//  ihr_disabled bounce bounced src to_address money timestamps init_state body_flag cs
    SWAP	//  ihr_disabled bounce bounced src to_address money timestamps init_state cs body_flag
    0 EQINT	//  ihr_disabled bounce bounced src to_address money timestamps init_state cs _66
    IF:<{	//  ihr_disabled bounce bounced src to_address money timestamps init_state body
    }>ELSE<{	//  ihr_disabled bounce bounced src to_address money timestamps init_state cs
      LDREF	//  ihr_disabled bounce bounced src to_address money timestamps init_state _102 _101
      DROP	//  ihr_disabled bounce bounced src to_address money timestamps init_state _67
      CTOS	//  ihr_disabled bounce bounced src to_address money timestamps init_state body
    }>
    9 TUPLE	//  _70
  }>
  parse_external_message PROC:<{
    //  message
    CTOS	//  cs
    2 LDU	//  msg_info cs
    113 PUSHINT	//  msg_info cs _7
    s2 PUSH	//  msg_info cs _7 msg_info
    2 NEQINT	//  msg_info cs _7 _9
    s3 PUSH	//  msg_info cs _7 _9 msg_info
    3 NEQINT	//  msg_info cs _7 _9 _11
    AND	//  msg_info cs _7 _12
    THROWANYIF
    LDMSGADDR	//  msg_info src cs
    LDMSGADDR	//  msg_info src to_address cs
    0 PUSHINT	//  msg_info src to_address cs import_fee=0
    s0 s4 PUXC	//  timestamps=0 src to_address cs import_fee=0 msg_info
    2 EQINT	//  timestamps=0 src to_address cs import_fee=0 _25
    IF:<{	//  timestamps=0 src to_address cs import_fee=0
      DROP	//  timestamps=0 src to_address cs
      LDGRAMS	//  timestamps=0 src to_address import_fee cs
    }>ELSE<{	//  timestamps=0 src to_address cs import_fee=0
      s4 POP	//  import_fee=0 src to_address cs
      96 LDU	//  import_fee=0 src to_address timestamps cs
      s1 s4 XCHG	//  timestamps src to_address import_fee cs
    }>
    1 LDU	//  timestamps src to_address import_fee maybe_init_state cs
    NIL	//  timestamps src to_address import_fee maybe_init_state cs init_state
    s0 s2 XCHG	//  timestamps src to_address import_fee init_state cs maybe_init_state
    1 EQINT	//  timestamps src to_address import_fee init_state cs _38
    IF:<{	//  timestamps src to_address import_fee init_state cs
      NIP	//  timestamps src to_address import_fee cs
      DUP	//  timestamps src to_address import_fee cs cs
      parse_init_state CALLDICT	//  timestamps src to_address import_fee cs init_state
      SWAP	//  timestamps src to_address import_fee init_state cs
    }>	//  timestamps src to_address import_fee init_state cs
    1 LDU	//  timestamps src to_address import_fee init_state body_flag cs
    SWAP	//  timestamps src to_address import_fee init_state cs body_flag
    0 EQINT	//  timestamps src to_address import_fee init_state cs _47
    IF:<{	//  timestamps src to_address import_fee init_state body
    }>ELSE<{	//  timestamps src to_address import_fee init_state cs
      LDREF	//  timestamps src to_address import_fee init_state _67 _66
      DROP	//  timestamps src to_address import_fee init_state _48
      CTOS	//  timestamps src to_address import_fee init_state body
    }>
    s4 s5 XCHG
    s3 s4 XCHG
    s2 s3 XCHG	//  src to_address import_fee timestamps init_state body
    6 TUPLE	//  _51
  }>
  init_environment PROC:<{
    // 
    PUSHNULL	//  _0
    NEWC	//  _0 _1
    STDICT	//  _2
    ENDC	//  _3
    c4 POP
  }>
  storage_key PROC:<{
    //  tag
    2824609491042946229920590003095732224 PUSHINTX	//  tag _3
    SWAP	//  _3 tag
    ADD	//  _4
  }>
  load_storage_with_tag PROC:<{
    //  tag
    storage_key CALLDICT	//  _1
    c4 PUSH	//  _1 _2
    CTOS	//  _1 _3
    PLDDICT	//  _1 _4
    8 PUSHPOW2	//  _1 _4 _5=256
    DICTIGETOPTREF	//  _6
  }>
  save_storage_with_tag PROC:<{
    //  tag storage
    c4 PUSH	//  tag storage _3
    CTOS	//  tag storage _4
    PLDDICT	//  tag storage dict
    s0 s2 XCHG	//  dict storage tag
    storage_key CALLDICT	//  dict storage _7
    ROT
    8 PUSHPOW2	//  storage _7 dict _8=256
    DICTISETREF	//  dict
    NEWC	//  dict _10
    STDICT	//  _11
    ENDC	//  _12
    c4 POP
  }>
  get_c7 PROC:<{
    // 
    124711402 PUSHINT	//  _2=124711402
    0 PUSHINT	//  _2=124711402 _3=0
    DUP	//  _2=124711402 _3=0 _4=0
    NOW	//  _2=124711402 _3=0 _4=0 _5
    1 PUSHINT	//  _2=124711402 _3=0 _4=0 _5 _6=1
    DUP	//  _2=124711402 _3=0 _4=0 _5 _6=1 _7=1
    239 PUSHINT	//  _2=124711402 _3=0 _4=0 _5 _6=1 _7=1 _8=239
    1000000000 PUSHINT	//  _2=124711402 _3=0 _4=0 _5 _6=1 _7=1 _8=239 _10=1000000000
    PUSHNULL	//  _2=124711402 _3=0 _4=0 _5 _6=1 _7=1 _8=239 _10=1000000000 _11
    PAIR	//  _2=124711402 _3=0 _4=0 _5 _6=1 _7=1 _8=239 _12
    MYADDR	//  _2=124711402 _3=0 _4=0 _5 _6=1 _7=1 _8=239 _12 _13
    CONFIGROOT	//  _2=124711402 _3=0 _4=0 _5 _6=1 _7=1 _8=239 _12 _13 _14
    10 TUPLE	//  _15
    SINGLE	//  _16
  }>
  invoke_method PROC:<{
    //  fun args
    {
    c7 PUSH DUP FIRST
    0 PUSHINT
    11 SETINDEX 0 SETINDEX c7 POP
    } : save-gas-remaining
    {
    0 PUSHINT
    11 GETPARAM SWAP SUB
    145 PUSHINT SUB
    } : compute-gas-used
    NEWC ENDC c5 POP
    255 PUSHINT EXPLODEVAR
    DUP INC ROLLX
    <{
    <{
    save-gas-remaining
    EXECUTE
    compute-gas-used
    DEPTH DEC ROLLREVX
    DEPTH DEC TUPLEVAR
    ZERO ROTREV
    }> PUSHCONT
    <{
    compute-gas-used
    ROT DROP NIL
    }> PUSHCONT
    TRY
    }> PUSHCONT
    ROT INC -1 PUSHINT
    CALLXVARARGS	//  exit_code gas_used return_values
    s2 PUSH	//  exit_code gas_used return_values exit_code
    0 NEQINT	//  exit_code gas_used return_values _7
    s3 PUSH	//  exit_code gas_used return_values _7 exit_code
    1 NEQINT	//  exit_code gas_used return_values _7 _9
    AND	//  exit_code gas_used return_values _10
    s1 s3 XCHG	//  return_values gas_used exit_code _10
    THROWANYIF
    SWAP	//  gas_used return_values
  }>
  invoke_method_expect_fail PROC:<{
    //  fun args
    {
    c7 PUSH DUP FIRST
    0 PUSHINT
    11 SETINDEX 0 SETINDEX c7 POP
    } : save-gas-remaining
    {
    0 PUSHINT
    11 GETPARAM SWAP SUB
    145 PUSHINT SUB
    } : compute-gas-used
    NEWC ENDC c5 POP
    255 PUSHINT EXPLODEVAR
    DUP INC ROLLX
    <{
    <{
    save-gas-remaining
    EXECUTE
    compute-gas-used
    DEPTH DEC ROLLREVX
    DEPTH DEC TUPLEVAR
    ZERO ROTREV
    }> PUSHCONT
    <{
    compute-gas-used
    ROT DROP NIL
    }> PUSHCONT
    TRY
    }> PUSHCONT
    ROT INC -1 PUSHINT
    CALLXVARARGS	//  _13 _14 _15
    DROP	//  exit_code gas_used
    OVER	//  exit_code gas_used exit_code
    0 EQINT	//  exit_code gas_used _8
    s0 s2 XCHG	//  _8 gas_used exit_code
    1 EQINT	//  _8 gas_used _10
    s1 s2 XCHG	//  gas_used _8 _10
    OR	//  gas_used _11
    201 THROWIF
  }>
  assert_no_actions PROC:<{
    // 
    c5 PUSH CTOS	//  _1
    SEMPTY	//  _2
    NOT	//  _3
    202 THROWIF
  }>
  token_snake_len PROC:<{
    //  content
    0 PUSHINT	//  content len=0
    WHILE:<{
      OVER	//  content len content
      ISNULL	//  content len _3
      NOT	//  content len _4
    }>DO<{	//  content len
      OVER	//  content len content
      SBITS	//  content len _5
      ADD	//  content len
      OVER	//  content len content
      SREFS	//  content len _7
      IF:<{	//  content len
        SWAP	//  len content
        LDREF	//  len _14 _13
        DROP	//  len _9
        CTOS	//  len _8
      }>ELSE<{	//  content len
        NIP	//  len
        PUSHNULL	//  len _8
      }>	//  len content
      SWAP	//  content len
    }>	//  content len
    NIP	//  len
  }>
  get_snake_tail PROC:<{
    //  tail
    WHILE:<{
      DUP	//  tail tail
      ISNULL	//  tail _1
      NOT	//  tail _2
    }>DO<{	//  tail
      CTOS	//  tail_slice
      DUP	//  tail_slice tail_slice
      SREFS	//  tail_slice _5
      IF:<{	//  tail_slice
        LDREF	//  _11 _10
        DROP	//  _6
      }>ELSE<{	//  tail_slice
        DROP	// 
        PUSHNULL	//  _6
      }>	//  tail
    }>	//  tail
  }>
  snake_concat PROC:<{
    //  head tail
    SWAP	//  tail head
    CTOS	//  tail head_sl
    NEWC	//  tail head_sl _5
    OVER	//  tail head_sl _5 head_sl
    SBITS	//  tail head_sl _5 _7
    s1 s2 XCHG	//  tail _5 head_sl _7
    LDSLICEX	//  tail _5 _6 head_sl
    -ROT	//  tail head_sl _5 _6
    STSLICER	//  tail head_sl snake
    OVER	//  tail head_sl snake head_sl
    SREFS	//  tail head_sl snake _10
    IF:<{	//  tail head_sl snake
      SWAP	//  tail snake head_sl
      LDREF	//  tail snake _20 _19
      DROP	//  tail snake _11
      ROT	//  snake _11 tail
      snake_concat CALLDICT	//  snake _13
      SWAP	//  _13 snake
      STREF	//  snake
    }>ELSE<{	//  tail head_sl snake
      NIP	//  tail snake
      STREF	//  snake
    }>
    ENDC	//  _16
  }>
  snake_concat_tagged PROC:<{
    //  tag head tail
    OVER	//  tag head tail head
    CTOS	//  tag head tail head_sl
    s0 s3 XCHG
    NEWC	//  head_sl head tail tag _6
    8 STU	//  head_sl head tail snake
    1015 PUSHINT	//  head_sl head tail snake lbits
    s4 PUSH	//  head_sl head tail snake lbits head_sl
    SBITS	//  head_sl head tail snake lbits _15
    SWAP	//  head_sl head tail snake _15 lbits
    GREATER	//  head_sl head tail snake _16
    IF:<{	//  head_sl head tail snake
      s3 POP	//  snake head tail
      snake_concat CALLDICT	//  snake _17
      SWAP	//  _17 snake
      STREF	//  _18
      ENDC	//  tagged
    }>ELSE<{	//  head_sl head tail snake
      s2 POP	//  head_sl snake tail
      s0 s2 XCHG	//  tail snake head_sl
      STSLICER	//  tail _20
      ENDC	//  tail _21
      SWAP	//  _21 tail
      snake_concat CALLDICT	//  tagged
    }>
  }>
  snake_equal? PROC:<{
    //  snake1 snake2
    TRUE	//  snake1 snake2 equal
    UNTIL:<{
      s2 PUSH	//  snake1 snake2 equal snake1
      SBITS	//  snake1 snake2 equal s1_data
      s2 PUSH	//  snake1 snake2 equal s1_data snake2
      SBITS	//  snake1 snake2 equal s1_data s2_data
      2DUP	//  snake1 snake2 equal s1_data s2_data s1_data s2_data
      LEQ	//  snake1 snake2 equal s1_data s2_data _8
      IF:<{	//  snake1 snake2 equal s1_data s2_data
        OVER	//  snake1 snake2 equal s1_data s2_data s1_data
        0 GTINT	//  snake1 snake2 equal s1_data s2_data _10
        IF:<{	//  snake1 snake2 equal s1_data s2_data
          s2 POP	//  snake1 snake2 s2_data s1_data
          s2 s2 XCPU	//  snake1 s1_data s2_data snake2 s1_data
          LDSLICEX	//  snake1 s1_data s2_data _11 snake2
          s4 s1 PUXC	//  snake1 s1_data s2_data snake2 snake1 _11
          SDEQ	//  snake1 s1_data s2_data snake2 equal
          2SWAP	//  snake1 snake2 equal s1_data s2_data
        }>	//  snake1 snake2 equal s1_data s2_data
        s4 PUSH	//  snake1 snake2 equal s1_data s2_data snake1
        SREFS	//  snake1 snake2 equal s1_data s2_data _14
        IF:<{	//  snake1 snake2 equal s1_data s2_data
          s0 s4 XCHG	//  s2_data snake2 equal s1_data snake1
          LDREF	//  s2_data snake2 equal s1_data _48 _47
          DROP	//  s2_data snake2 equal s1_data _16
          CTOS	//  s2_data snake2 equal s1_data _15
        }>ELSE<{	//  snake1 snake2 equal s1_data s2_data
          s4 POP	//  s2_data snake2 equal s1_data
          PUSHNULL	//  s2_data snake2 equal s1_data _15
        }>	//  s2_data snake2 equal s1_data snake1
        DUP	//  s2_data snake2 equal s1_data snake1 snake1
        ISNULL	//  s2_data snake2 equal s1_data snake1 _20
        s5 PUSH	//  s2_data snake2 equal s1_data snake1 _20 s2_data
        AND	//  s2_data snake2 equal s1_data snake1 _21
        s2 PUSH	//  s2_data snake2 equal s1_data snake1 _21 s1_data
        GREATER	//  s2_data snake2 equal s1_data snake1 _22
        IF:<{	//  s2_data snake2 equal s1_data snake1
          s4 POP
          2DROP	//  snake1 snake2
          FALSE	//  snake1 snake2 equal
        }>ELSE<{	//  s2_data snake2 equal s1_data snake1
          s4 s4 XCHG2	//  snake1 snake2 equal s2_data s1_data
          EQUAL	//  snake1 snake2 equal _24
          IF:<{	//  snake1 snake2 equal
            OVER	//  snake1 snake2 equal snake2
            SREFS	//  snake1 snake2 equal _25
            IF:<{	//  snake1 snake2 equal
              SWAP	//  snake1 equal snake2
              LDREF	//  snake1 equal _50 _49
              DROP	//  snake1 equal _27
              CTOS	//  snake1 equal _26
            }>ELSE<{	//  snake1 snake2 equal
              NIP	//  snake1 equal
              PUSHNULL	//  snake1 equal _26
            }>	//  snake1 equal snake2
            SWAP	//  snake1 snake2 equal
          }>	//  snake1 snake2 equal
        }>
      }>ELSE<{	//  snake1 snake2 equal s1_data s2_data
        2 1 BLKDROP2	//  snake1 snake2 s2_data
        s1 s2 XCHG	//  snake2 snake1 s2_data
        LDSLICEX	//  snake2 _31 snake1
        s2 s1 PUXC	//  snake2 snake1 snake2 _31
        SDEQ	//  snake2 snake1 equal
        s2 PUSH	//  snake2 snake1 equal snake2
        SREFS	//  snake2 snake1 equal _34
        IF:<{	//  snake2 snake1 equal
          s0 s2 XCHG	//  equal snake1 snake2
          LDREF	//  equal snake1 _54 _53
          DROP	//  equal snake1 _36
          CTOS	//  equal snake1 _35
        }>ELSE<{	//  snake2 snake1 equal
          s2 POP	//  equal snake1
          PUSHNULL	//  equal snake1 _35
        }>	//  equal snake1 snake2
        ROT	//  snake1 snake2 equal
      }>
      DUP	//  snake1 snake2 equal equal
      NOT	//  snake1 snake2 equal _40
      s3 PUSH	//  snake1 snake2 equal _40 snake1
      ISNULL	//  snake1 snake2 equal _40 _41
      s3 PUSH	//  snake1 snake2 equal _40 _41 snake2
      ISNULL	//  snake1 snake2 equal _40 _41 _42
      AND	//  snake1 snake2 equal _40 _43
      OR	//  snake1 snake2 equal _44
    }>	//  snake1 snake2 equal
    2 1 BLKDROP2	//  equal
  }>
  swap_remove PROC:<{
    //  t index
    OVER	//  t index t
    TLEN	//  t index _3
    DEC	//  t index l
    s1 s(-1) PUXC	//  t index index l
    EQUAL	//  t index _6
    IFJMP:<{	//  t index
      DROP	//  t
      TPOP	//  t value
    }>	//  t index
    2DUP	//  t index t index
    INDEXVAR	//  t index value
    s0 s2 XCHG	//  value index t
    TPOP	//  value index t _12
    s1 s2 XCHG	//  value t index _12
    SETINDEXVAR	//  value t
    SWAP	//  t value
  }>
  parse_one_action PROC:<{
    //  actions
    LDREF	//  previous actions
    32 LDU	//  previous action_id actions
    OVER
    247711853 PUSHINT	//  previous action_id actions action_id _8=247711853
    EQUAL	//  previous action_id actions _9
    IF:<{	//  previous action_id actions
      NIP	//  previous actions
      4445 PUSHINT	//  previous actions _10=4445
      s0 DUMP	//  previous actions _11
      DROP	//  previous actions
      1397050948 PUSHINT	//  previous actions _12=1397050948
      s0 DUMP	//  previous actions _13
      DROP	//  previous actions
      8 LDU	//  previous _14 actions
      SWAP	//  previous actions _14
      s0 DUMP	//  previous actions _17
      DROP	//  previous actions
      LDREF	//  previous _55 _54
      DROP	//  previous _18
      s0 DUMP	//  previous _20
      DROP	//  previous
    }>ELSE<{	//  previous action_id actions
      OVER
      2907562126 PUSHINT	//  previous action_id actions action_id _21=2907562126
      EQUAL	//  previous action_id actions _22
      IF:<{	//  previous action_id actions
        NIP	//  previous actions
        4445 PUSHINT	//  previous actions _23=4445
        s0 DUMP	//  previous actions _24
        DROP	//  previous actions
        23438651275822149 PUSHINT	//  previous actions _25=23438651275822149
        s0 DUMP	//  previous actions _26
        DROP	//  previous actions
        LDREF	//  previous _57 _56
        DROP	//  previous _27
        s0 DUMP	//  previous _29
        DROP	//  previous
      }>ELSE<{	//  previous action_id actions
        OVER
        921090057 PUSHINT	//  previous action_id actions action_id _30=921090057
        EQUAL	//  previous action_id actions _31
        IF:<{	//  previous action_id actions
          NIP	//  previous actions
          4445 PUSHINT	//  previous actions _32=4445
          s0 DUMP	//  previous actions _33
          DROP	//  previous actions
          23157172037899845 PUSHINT	//  previous actions _34=23157172037899845
          s0 DUMP	//  previous actions _35
          DROP	//  previous actions
          8 LDU	//  previous _36 actions
          SWAP	//  previous actions _36
          s0 DUMP	//  previous actions _39
          DROP	//  previous actions
          LDDICT	//  previous _61 _60
          DROP	//  previous _40
          s0 DUMP	//  previous _42
          DROP	//  previous
        }>ELSE<{	//  previous action_id actions
          DROP	//  previous action_id
          s0 DUMP	//  previous _44
          DROP	//  previous
          100 THROW
        }>
      }>
    }>
    CTOS	//  _47
  }>
  calc_bell_state_init_by_data PROCREF:<{
    //  bell_init_data bell_code
    6 PUSHINT	//  bell_init_data bell_code _2=6
    NEWC	//  bell_init_data bell_code _2=6 _3
    5 STU	//  bell_init_data bell_code _5
    STREF	//  bell_init_data _6
    STREF	//  _7
    ENDC	//  _8
  }>
  init_bell_with_children PROCREF:<{
    //  priority time value dest fwd_body core_address children bell_code
    s0 s7 XCHG
    NEWC	//  bell_code time value dest fwd_body core_address children priority _9
    64 STU	//  bell_code time value dest fwd_body core_address children _11
    s1 s6 XCHG	//  bell_code children value dest fwd_body core_address time _11
    32 STU	//  bell_code children value dest fwd_body core_address _13
    s1 s4 XCHG	//  bell_code children core_address dest fwd_body value _13
    64 STU	//  bell_code children core_address dest fwd_body _15
    ROT	//  bell_code children core_address fwd_body _15 dest
    STSLICER	//  bell_code children core_address fwd_body _16
    STREF	//  bell_code children core_address _17
    SWAP	//  bell_code children _17 core_address
    STSLICER	//  bell_code children _18
    s1 s(-1) PUXC	//  bell_code children children _18
    STREF	//  bell_code children _19
    STREF	//  bell_code init_data
    ENDC	//  bell_code _22
    SWAP	//  _22 bell_code
    calc_bell_state_init_by_data INLINECALLDICT	//  state_init
    6 PUSHINT	//  state_init _24=6
    OVER	//  state_init _24=6 state_init
    HASHCU	//  state_init _24=6 _25
    10 PUSHPOW2	//  state_init _24=6 _25 _26=1024
    16 PUSHINT	//  state_init _24=6 _25 _26=1024 _27=16
    NEWC	//  state_init _24=6 _25 _26=1024 _27=16 _28
    6 STU	//  state_init _24=6 _25 _26=1024 _30
    11 STU	//  state_init _24=6 _25 _32
    256 STU	//  state_init _24=6 _34
    0 PUSHINT	//  state_init _24=6 _34 _35=0
    STVARUINT16	//  state_init _24=6 _36
    108 STU	//  state_init _50
    s1 s(-1) PUXC	//  state_init state_init _50
    STREF	//  state_init _51
    ENDC	//  state_init _52
    64 PUSHINT	//  state_init _52 _53=64
    SENDRAWMSG
    HASHCU	//  _55
  }>
  init_bell_no_children PROCREF:<{
    //  priority time value dest fwd_body core_address bell_code
    0 PUSHINT	//  priority time value dest fwd_body core_address bell_code _7=0
    NEWC	//  priority time value dest fwd_body core_address bell_code _7=0 _8
    2 STU	//  priority time value dest fwd_body core_address bell_code _10
    ENDC	//  priority time value dest fwd_body core_address bell_code _11
    SWAP	//  priority time value dest fwd_body core_address _11 bell_code
    init_bell_with_children INLINECALLDICT	//  _12
  }>
  bell_info_lr_replace_left PROC:<{
    //  left_addr left_priority left_time right_child
    10 PUSHPOW2	//  left_addr left_priority left_time right_child _4=1024
    1 PUSHINT	//  left_addr left_priority left_time right_child _4=1024 _5=1
    NEWC	//  left_addr left_priority left_time right_child _4=1024 _5=1 _6
    1 STU	//  left_addr left_priority left_time right_child _4=1024 _8
    11 STU	//  left_addr left_priority left_time right_child _10
    s1 s4 XCHG	//  right_child left_priority left_time left_addr _10
    256 STU	//  right_child left_priority left_time _12
    s1 s2 XCHG	//  right_child left_time left_priority _12
    64 STU	//  right_child left_time _14
    32 STU	//  right_child _16
    SWAP	//  _16 right_child
    STSLICER	//  _17
    ENDC	//  _18
  }>
  bell_info_lr_replace_right PROC:<{
    //  left_child right_addr right_priority right_time
    10 PUSHPOW2	//  left_child right_addr right_priority right_time _4=1024
    1 PUSHINT	//  left_child right_addr right_priority right_time _4=1024 _5=1
    s0 s5 XCHG2	//  _4=1024 right_addr right_priority right_time _5=1 left_child
    1 STU	//  _4=1024 right_addr right_priority right_time _7
    s1 s4 XCHG	//  right_time right_addr right_priority _4=1024 _7
    11 STU	//  right_time right_addr right_priority _9
    s1 s2 XCHG	//  right_time right_priority right_addr _9
    256 STU	//  right_time right_priority _11
    64 STU	//  right_time _13
    32 STU	//  _15
    ENDC	//  _16
  }>
  TIM::send_schedule_loop_msg PROCREF:<{
    // 
    0 PUSHINT	//  _0=0
    24 PUSHINT	//  _0=0 _1=24
    NEWC	//  _0=0 _1=24 _2
    6 STU	//  _0=0 _4
    b{100} x{FF} |+ x{2210202200000000000000000000000000000000000000000000000000000001} |+ PUSHSLICE	//  _0=0 _4 _5
    STSLICER	//  _0=0 _6
    500000000 PUSHINT	//  _0=0 _6 _7=500000000
    STVARUINT16	//  _0=0 _8
    107 STU	//  _22
    ENDC	//  _23
    0 PUSHINT	//  _23 _24=0
    SENDRAWMSG
  }>
  TIM::check_ident_proof PROCREF:<{
    //  source proof
    1 LDU	//  source _2 proof
    SWAP	//  source proof _2
    0 EQINT	//  source proof _6
    IFJMP:<{	//  source proof
      2DROP	// 
      114 THROW
      PUSHNULL	//  _9
    }>	//  source proof
    SWAP	//  proof source
    11 LDU	//  proof _11 source
    SWAP
    10 PUSHPOW2	//  proof source _11 _14=1024
    NEQ	//  proof source _15
    110 THROWIF
    SWAP	//  source proof
    LDREF	//  source bell_init proof
    LDREF	//  source bell_init bell_code proof
    c4 PUSH	//  source bell_init bell_code proof _24
    CTOS	//  source bell_init bell_code proof own_data
    s2 PUSH	//  source bell_init bell_code proof own_data bell_code
    HASHCU	//  source bell_init bell_code proof own_data _27
    SWAP	//  source bell_init bell_code proof _27 own_data
    LDREF	//  source bell_init bell_code proof _27 _97 _96
    DROP	//  source bell_init bell_code proof _27 _28
    HASHCU	//  source bell_init bell_code proof _27 _30
    NEQ	//  source bell_init bell_code proof _31
    114 THROWIF
    s2 s1 PUXC	//  source bell_init proof bell_init bell_code
    calc_bell_state_init_by_data INLINECALLDICT	//  source bell_init proof bell_state_init
    s0 s3 XCHG	//  bell_state_init bell_init proof source
    256 LDU	//  bell_state_init bell_init proof _99 _98
    DROP	//  bell_state_init bell_init proof _36
    s0 s3 XCHG	//  _36 bell_init proof bell_state_init
    HASHCU	//  _36 bell_init proof _39
    s1 s3 XCHG	//  proof bell_init _36 _39
    NEQ	//  proof bell_init _40
    111 THROWIF
    CTOS	//  proof bell_init
    160 PUSHINT	//  proof bell_init _45=160
    SDSKIPFIRST	//  proof bell_init
    LDMSGADDR	//  proof _101 _100
    NIP	//  proof bell_init
    LDREF	//  proof _103 _102
    NIP	//  proof bell_init
    LDMSGADDR	//  proof _52 bell_init
    MYADDR	//  proof _52 bell_init _54
    s1 s2 XCHG	//  proof bell_init _52 _54
    SDEQ	//  proof bell_init _55
    112 THROWIFNOT
    LDREF	//  proof children bell_init
    LDREF	//  proof children _109 _108
    DROP	//  proof children init_children
    OVER	//  proof children init_children children
    HASHCU	//  proof children init_children _64
    SWAP	//  proof children _64 init_children
    HASHCU	//  proof children _64 _65
    NEQ	//  proof children _66
    113 THROWIF
    CTOS	//  proof children
    1 LDU	//  proof _70 children
    SWAP	//  proof children _70
    IF:<{	//  proof children
      LDMSGADDR	//  proof _113 _112
      NIP	//  proof children
      96 PUSHINT	//  proof children _76=96
      SDSKIPFIRST	//  proof children
    }>	//  proof children
    1 LDU	//  proof _78 children
    SWAP	//  proof children _78
    IF:<{	//  proof children
      LDMSGADDR	//  proof _117 _116
      NIP	//  proof children
      96 PUSHINT	//  proof children _84=96
      SDSKIPFIRST	//  proof children
    }>	//  proof _87
    DROP	//  proof
  }>
  TIM::store_ident_proof PROCREF:<{
    //  msg
    c4 PUSH	//  msg _2
    CTOS	//  msg d
    LDREF	//  msg _11 _10
    DROP	//  msg _4
    0 PUSHINT
    ROT	//  _4 _6=0 msg
    1 STU	//  _4 _8
    STREF	//  _9
  }>
  TIM::create_bell PROCREF:<{
    //  priority time value dest fwd_body
    c4 PUSH	//  priority time value dest fwd_body _6
    CTOS	//  priority time value dest fwd_body timer_old_data
    32 LDU	//  priority time value dest fwd_body old_lm_schedule timer_old_data
    s1 s5 PUSH2	//  priority time value dest fwd_body old_lm_schedule timer_old_data old_lm_schedule time
    MIN	//  priority time value dest fwd_body old_lm_schedule timer_old_data leftmost_schedule
    s0 s2 XCHG
    32 PUSHPOW2DEC	//  priority time value dest fwd_body leftmost_schedule timer_old_data old_lm_schedule _14=4294967295
    EQUAL	//  priority time value dest fwd_body leftmost_schedule timer_old_data _15
    IF:<{	//  priority time value dest fwd_body leftmost_schedule timer_old_data
      TIM::send_schedule_loop_msg INLINECALLDICT
    }>	//  priority time value dest fwd_body leftmost_schedule timer_old_data
    LDREF	//  priority time value dest fwd_body leftmost_schedule bell_code timer_old_data
    1 PUSHINT	//  priority time value dest fwd_body leftmost_schedule bell_code timer_old_data _21=1
    s0 s3 XCHG
    NEWC	//  priority time value dest fwd_body _21=1 bell_code timer_old_data leftmost_schedule _22
    32 STU	//  priority time value dest fwd_body _21=1 bell_code timer_old_data _24
    s1 s3 XCHG	//  priority time value dest fwd_body timer_old_data bell_code _21=1 _24
    1 STU	//  priority time value dest fwd_body timer_old_data bell_code timer_new_data
    s0 s2 XCHG	//  priority time value dest fwd_body timer_new_data bell_code timer_old_data
    1 LDU	//  priority time value dest fwd_body timer_new_data bell_code _27 timer_old_data
    SWAP	//  priority time value dest fwd_body timer_new_data bell_code timer_old_data _27
    1 EQINT	//  priority time value dest fwd_body timer_new_data bell_code timer_old_data _31
    IF:<{	//  priority time value dest fwd_body timer_new_data bell_code timer_old_data
      LDMSGADDR	//  priority time value dest fwd_body timer_new_data bell_code root_addr timer_old_data
      64 LDU	//  priority time value dest fwd_body timer_new_data bell_code root_addr root_priority timer_old_data
      s9 s1 PUSH2	//  priority time value dest fwd_body timer_new_data bell_code root_addr root_priority timer_old_data priority root_priority
      EQUAL	//  priority time value dest fwd_body timer_new_data bell_code root_addr root_priority timer_old_data _40
      300 THROWIF
      s1 s9 PUSH2	//  priority time value dest fwd_body timer_new_data bell_code root_addr root_priority timer_old_data root_priority priority
      GREATER	//  priority time value dest fwd_body timer_new_data bell_code root_addr root_priority timer_old_data _42
      IF:<{	//  priority time value dest fwd_body timer_new_data bell_code root_addr root_priority timer_old_data
        s4 s2 XCPU	//  priority time value dest fwd_body timer_old_data bell_code root_addr root_priority timer_new_data root_addr
        STSLICER	//  priority time value dest fwd_body timer_old_data bell_code root_addr root_priority timer_new_data
        64 STU	//  priority time value dest fwd_body timer_old_data bell_code root_addr timer_new_data
        s0 s3 XCHG2	//  priority time value dest fwd_body root_addr bell_code timer_new_data timer_old_data
        STSLICER	//  priority time value dest fwd_body root_addr bell_code timer_new_data
        4227836706 PUSHINT	//  priority time value dest fwd_body root_addr bell_code timer_new_data _50=4227836706
        0 PUSHINT	//  priority time value dest fwd_body root_addr bell_code timer_new_data _50=4227836706 _51=0
        24 PUSHINT	//  priority time value dest fwd_body root_addr bell_code timer_new_data _50=4227836706 _51=0 _52=24
        NEWC	//  priority time value dest fwd_body root_addr bell_code timer_new_data _50=4227836706 _51=0 _52=24 _53
        6 STU	//  priority time value dest fwd_body root_addr bell_code timer_new_data _50=4227836706 _51=0 _55
        s0 s5 XCHG2	//  priority time value dest fwd_body _51=0 bell_code timer_new_data _50=4227836706 _55 root_addr
        STSLICER	//  priority time value dest fwd_body _51=0 bell_code timer_new_data _50=4227836706 _56
        s4 PUSH	//  priority time value dest fwd_body _51=0 bell_code timer_new_data _50=4227836706 _56 _57=0
        STVARUINT16	//  priority time value dest fwd_body _51=0 bell_code timer_new_data _50=4227836706 _58
        s1 s4 XCHG	//  priority time value dest fwd_body _50=4227836706 bell_code timer_new_data _51=0 _58
        107 STU	//  priority time value dest fwd_body _50=4227836706 bell_code timer_new_data _72
        s1 s3 XCHG	//  priority time value dest fwd_body timer_new_data bell_code _50=4227836706 _72
        32 STU	//  priority time value dest fwd_body timer_new_data bell_code _74
        s1 s7 XCHG	//  bell_code time value dest fwd_body timer_new_data priority _74
        64 STU	//  bell_code time value dest fwd_body timer_new_data _76
        s1 s5 XCHG	//  bell_code timer_new_data value dest fwd_body time _76
        32 STU	//  bell_code timer_new_data value dest fwd_body _78
        s1 s3 XCHG	//  bell_code timer_new_data fwd_body dest value _78
        64 STU	//  bell_code timer_new_data fwd_body dest _80
        SWAP	//  bell_code timer_new_data fwd_body _80 dest
        STSLICER	//  bell_code timer_new_data fwd_body _81
        STREF	//  bell_code timer_new_data _82
        TIM::store_ident_proof INLINECALLDICT	//  bell_code timer_new_data _83
        ENDC	//  bell_code timer_new_data _84
        64 PUSHINT	//  bell_code timer_new_data _84 _85=64
        SENDRAWMSG
      }>ELSE<{	//  priority time value dest fwd_body timer_new_data bell_code root_addr root_priority timer_old_data
        NEWC	//  priority time value dest fwd_body timer_new_data bell_code root_addr root_priority timer_old_data bell_info_lr
        SWAP	//  priority time value dest fwd_body timer_new_data bell_code root_addr root_priority bell_info_lr timer_old_data
        32 LDU	//  priority time value dest fwd_body timer_new_data bell_code root_addr root_priority bell_info_lr _168 _167
        DROP	//  priority time value dest fwd_body timer_new_data bell_code root_addr root_priority bell_info_lr root_time
        s0 s9 PUSH2	//  priority time value dest fwd_body timer_new_data bell_code root_addr root_priority bell_info_lr root_time root_time time
        LESS	//  priority time value dest fwd_body timer_new_data bell_code root_addr root_priority bell_info_lr root_time _93
        IF:<{	//  priority time value dest fwd_body timer_new_data bell_code root_addr root_priority bell_info_lr root_time
          1 PUSHINT
          ROT	//  priority time value dest fwd_body timer_new_data bell_code root_addr root_priority root_time _95=1 bell_info_lr
          1 STU	//  priority time value dest fwd_body timer_new_data bell_code root_addr root_priority root_time bell_info_lr
          s0 s3 XCHG2	//  priority time value dest fwd_body timer_new_data bell_code root_time root_priority bell_info_lr root_addr
          STSLICER	//  priority time value dest fwd_body timer_new_data bell_code root_time root_priority bell_info_lr
          64 STU	//  priority time value dest fwd_body timer_new_data bell_code root_time bell_info_lr
          32 STU	//  priority time value dest fwd_body timer_new_data bell_code bell_info_lr
          0 PUSHINT	//  priority time value dest fwd_body timer_new_data bell_code bell_info_lr _107=0
          SWAP	//  priority time value dest fwd_body timer_new_data bell_code _107=0 bell_info_lr
          1 STU	//  priority time value dest fwd_body timer_new_data bell_code bell_info_lr
        }>ELSE<{	//  priority time value dest fwd_body timer_new_data bell_code root_addr root_priority bell_info_lr root_time
          1 PUSHINT
          ROT	//  priority time value dest fwd_body timer_new_data bell_code root_addr root_priority root_time _111=1 bell_info_lr
          2 STU	//  priority time value dest fwd_body timer_new_data bell_code root_addr root_priority root_time bell_info_lr
          s0 s3 XCHG2	//  priority time value dest fwd_body timer_new_data bell_code root_time root_priority bell_info_lr root_addr
          STSLICER	//  priority time value dest fwd_body timer_new_data bell_code root_time root_priority bell_info_lr
          64 STU	//  priority time value dest fwd_body timer_new_data bell_code root_time bell_info_lr
          32 STU	//  priority time value dest fwd_body timer_new_data bell_code bell_info_lr
        }>
        10 PUSHPOW2	//  priority time value dest fwd_body timer_new_data bell_code bell_info_lr _123=1024
        s0 s3 XCHG2	//  priority time value dest fwd_body bell_info_lr bell_code _123=1024 timer_new_data
        11 STU	//  priority time value dest fwd_body bell_info_lr bell_code timer_new_data
        MYADDR	//  priority time value dest fwd_body bell_info_lr bell_code timer_new_data _127
        s0 s3 XCHG	//  priority time value dest fwd_body _127 bell_code timer_new_data bell_info_lr
        ENDC	//  priority time value dest fwd_body _127 bell_code timer_new_data _128
        s8 PUSH
        s5 s8 XCPU
        s0 s5 XCHG
        s4 s8 XCHG
        s3 s7 XCHG
        s0 s2 s8 XC2PU	//  priority time bell_code timer_new_data priority time value dest fwd_body _127 _128 bell_code
        init_bell_with_children INLINECALLDICT	//  priority time bell_code timer_new_data _129
        SWAP	//  priority time bell_code _129 timer_new_data
        256 STU	//  priority time bell_code timer_new_data
        s1 s3 XCHG	//  bell_code time priority timer_new_data
        64 STU	//  bell_code time timer_new_data
        32 STU	//  bell_code timer_new_data
      }>
    }>ELSE<{	//  priority time value dest fwd_body timer_new_data bell_code timer_old_data
      DROP	//  priority time value dest fwd_body timer_new_data bell_code
      10 PUSHPOW2
      ROT	//  priority time value dest fwd_body bell_code _139=1024 timer_new_data
      11 STU	//  priority time value dest fwd_body bell_code timer_new_data
      MYADDR	//  priority time value dest fwd_body bell_code timer_new_data _143
      s7 PUSH
      s4 s7 XCPU
      s0 s4 XCHG
      s3 s7 XCHG
      s6 s1 s6 XCHG3
      s6 PUSH	//  priority time timer_new_data bell_code priority time value dest fwd_body _143 bell_code
      init_bell_no_children INLINECALLDICT	//  priority time timer_new_data bell_code _144
      ROT	//  priority time bell_code _144 timer_new_data
      256 STU	//  priority time bell_code timer_new_data
      s1 s3 XCHG	//  bell_code time priority timer_new_data
      64 STU	//  bell_code time timer_new_data
      32 STU	//  bell_code timer_new_data
    }>
    SWAP	//  timer_new_data bell_code
    STREFR	//  timer_new_data
    ENDC	//  _155
    c4 POP
  }>
  get_root_bell PROC:<{
    // 
    c4 PUSH	//  _1
    CTOS	//  d
    32 PUSHINT	//  d _4=32
    SDSKIPFIRST	//  d
    1 LDU	//  _6 d
    SWAP	//  d _6
    IFJMP:<{	//  d
      LDMSGADDR	//  _15 _14
      DROP	//  _9
    }>	//  d
    DROP	// 
    PUSHNULL	//  _11
  }>
  get_nft_address_by_index PROC:<{
    //  index
    10 PUSHPOW2	//  index _1=1024
    NEWC	//  index _1=1024 _2
    11 STU	//  index _4
    256 STU	//  _6
    ENDC	//  _7
    CTOS	//  _8
  }>
  get_nft_content PROC:<{
    //  index individual
    NIP	//  individual
    ISNULL	//  _3
    100 THROWIFNOT
    NEWDICT	//  _5
    0 PUSHINT	//  _5 _6=0
    NEWC	//  _5 _6=0 _7
    2 STU	//  _5 _9
    STDICT	//  _10
    ENDC	//  _11
  }>
  get_collection_data PROC:<{
    // 
    -1 PUSHINT	//  _0=-1
    0 PUSHINT	//  _0=-1 _1=0
    PUSHNULL	//  _0=-1 _1=0 _2
    get_nft_content CALLDICT	//  _0=-1 _3
    b{00} PUSHSLICE	//  _0=-1 _3 _4
  }>
  TIM::process_schedule PROC:<{
    // 
    c4 PUSH	//  _1
    CTOS	//  d
    32 LDU	//  next d
    OVER
    NOW	//  next d next _7
    LEQ	//  next d _8
    IF:<{	//  next d
      NIP	//  d
      1 LDU	//  _10 d
      SWAP	//  d _10
      0 EQINT	//  d _14
      130 THROWIF
      1933303943 PUSHINT	//  d _16=1933303943
      0 PUSHINT	//  d _16=1933303943 _17=0
      24 PUSHINT	//  d _16=1933303943 _17=0 _18=24
      NEWC	//  d _16=1933303943 _17=0 _18=24 _19
      6 STU	//  d _16=1933303943 _17=0 _21
      s0 s3 XCHG	//  _21 _16=1933303943 _17=0 d
      LDMSGADDR	//  _21 _16=1933303943 _17=0 _57 _56
      DROP	//  _21 _16=1933303943 _17=0 _22
      s1 s3 XCHG	//  _17=0 _16=1933303943 _21 _22
      STSLICER	//  _17=0 _16=1933303943 _24
      100000000 PUSHINT	//  _17=0 _16=1933303943 _24 _25=100000000
      STVARUINT16	//  _17=0 _16=1933303943 _26
      s1 s2 XCHG	//  _16=1933303943 _17=0 _26
      107 STU	//  _16=1933303943 _40
      32 STU	//  _42
      TIM::store_ident_proof INLINECALLDICT	//  _43
      ENDC	//  _44
      0 PUSHINT	//  _44 _45=0
      SENDRAWMSG
    }>ELSE<{	//  next d
      DROP	//  next
      32 PUSHPOW2DEC	//  next _47=4294967295
      LESS	//  _48
      IF:<{	// 
        TIM::send_schedule_loop_msg INLINECALLDICT
      }>	// 
    }>
    180 PUSHINT	//  _50=180
    s0 DUMP	//  _51
    DROP	// 
  }>
  recv_internal PROC:<{
    //  coins in_msg_full in_msg
    SWAP	//  coins in_msg in_msg_full
    CTOS	//  coins in_msg in_msg_full
    4 LDU	//  coins in_msg bounced in_msg_full
    LDMSGADDR	//  coins in_msg bounced _231 _230
    DROP	//  coins in_msg bounced src
    b{100} x{FF} |+ x{2210202200000000000000000000000000000000000000000000000000000001} |+ PUSHSLICE	//  coins in_msg bounced src _12
    s1 s(-1) PUXC	//  coins in_msg bounced src src _12
    SDEQ	//  coins in_msg bounced src _13
    IFJMP:<{	//  coins in_msg bounced src
      4 BLKDROP	// 
      TIM::process_schedule CALLDICT
    }>	//  coins in_msg bounced src
    SWAP
    1 PUSHINT	//  coins in_msg src bounced _15=1
    AND	//  coins in_msg src _16
    IFJMP:<{	//  coins in_msg src
      3 BLKDROP	// 
    }>	//  coins in_msg src
    OVER	//  coins in_msg src in_msg
    SBITS	//  coins in_msg src _17
    32 LESSINT	//  coins in_msg src _19
    IFJMP:<{	//  coins in_msg src
      3 BLKDROP	// 
    }>	//  coins in_msg src
    SWAP	//  coins src in_msg
    32 LDU	//  coins src opcode in_msg
    OVER
    132892869 PUSHINT	//  coins src opcode in_msg opcode _24=132892869
    EQUAL	//  coins src opcode in_msg _25
    IFJMP:<{	//  coins src opcode in_msg
      NIP
      s2 POP	//  in_msg src
      s0 s1 PUXC	//  src src in_msg
      TIM::check_ident_proof INLINECALLDICT	//  src in_msg
      c4 PUSH	//  src in_msg _28
      CTOS	//  src in_msg old_timer_data
      32 LDU	//  src in_msg _31 old_timer_data
      s2 PUSH	//  src in_msg _31 old_timer_data in_msg
      32 PLDU	//  src in_msg _31 old_timer_data _35
      s1 s2 XCHG	//  src in_msg old_timer_data _31 _35
      NEQ	//  src in_msg old_timer_data _36
      120 THROWIF
      1 LDU	//  src in_msg _39 old_timer_data
      SWAP	//  src in_msg old_timer_data _39
      0 EQINT	//  src in_msg old_timer_data _43
      121 THROWIF
      SWAP	//  src old_timer_data in_msg
      32 LDU	//  src old_timer_data _239 _238
      DROP	//  src old_timer_data next_time
      NEWC	//  src old_timer_data next_time _50
      32 STU	//  src old_timer_data new_timer_data
      SWAP	//  src new_timer_data old_timer_data
      LDMSGADDR	//  src new_timer_data root_addr old_timer_data
      s1 s3 PUXC	//  old_timer_data new_timer_data root_addr root_addr src
      SDEQ	//  old_timer_data new_timer_data root_addr _57
      122 THROWIF
      STSLICER	//  old_timer_data new_timer_data
      SWAP	//  new_timer_data old_timer_data
      LDREF	//  new_timer_data _62 old_timer_data
      -ROT	//  old_timer_data new_timer_data _62
      STREFR	//  old_timer_data new_timer_data
      SWAP	//  new_timer_data old_timer_data
      STSLICER	//  new_timer_data
      ENDC	//  _67
      c4 POP
      TIM::send_schedule_loop_msg INLINECALLDICT
    }>	//  coins src opcode in_msg
    OVER
    3558267919 PUSHINT	//  coins src opcode in_msg opcode _70=3558267919
    EQUAL	//  coins src opcode in_msg _71
    IFJMP:<{	//  coins src opcode in_msg
      NIP
      s2 POP	//  in_msg src
      s0 s1 PUXC	//  src src in_msg
      TIM::check_ident_proof INLINECALLDICT	//  src in_msg
      c4 PUSH	//  src in_msg _74
      CTOS	//  src in_msg old_timer_data
      32 PUSHINT	//  src in_msg old_timer_data _77=32
      SDSKIPFIRST	//  src in_msg old_timer_data
      1 LDU	//  src in_msg _80 old_timer_data
      SWAP	//  src in_msg old_timer_data _80
      126 THROWIFNOT
      LDMSGADDR	//  src in_msg root_addr old_timer_data
      s0 s3 XCHG	//  old_timer_data in_msg root_addr src
      SDEQ	//  old_timer_data in_msg _88
      127 THROWIFNOT
      DUP	//  old_timer_data in_msg in_msg_copy
      32 PUSHPOW2DEC	//  old_timer_data in_msg in_msg_copy next_time=4294967295
      SWAP	//  old_timer_data in_msg next_time=4294967295 in_msg_copy
      1 LDU	//  old_timer_data in_msg next_time=4294967295 _93 in_msg_copy
      SWAP	//  old_timer_data in_msg next_time=4294967295 in_msg_copy _93
      IF:<{	//  old_timer_data in_msg next_time=4294967295 in_msg_copy
        NIP	//  old_timer_data in_msg in_msg_copy
        LDMSGADDR	//  old_timer_data in_msg _251 _250
        NIP	//  old_timer_data in_msg in_msg_copy
        64 PUSHINT	//  old_timer_data in_msg in_msg_copy _99=64
        SDSKIPFIRST	//  old_timer_data in_msg in_msg_copy
        32 LDU	//  old_timer_data in_msg _253 _252
        DROP	//  old_timer_data in_msg next_time
        TIM::send_schedule_loop_msg INLINECALLDICT
      }>ELSE<{
        DROP	//  old_timer_data in_msg next_time
      }>
      s0 s2 XCHG	//  next_time in_msg old_timer_data
      LDREF	//  next_time in_msg _255 _254
      DROP	//  next_time in_msg _106
      s0 s2 XCHG
      NEWC	//  _106 in_msg next_time _108
      32 STU	//  _106 in_msg _110
      SWAP	//  _106 _110 in_msg
      STSLICER	//  _106 _111
      STREF	//  new_timer_data
      ENDC	//  _113
      c4 POP
    }>	//  coins src opcode in_msg
    b{100} x{00} |+ x{15be3c3171911009bbcc473d07d8fc2bcc0c7192fed2237719da256e07fa7948} |+ PUSHSLICE	//  coins src opcode in_msg _115
    s1 s3 XCHG	//  coins in_msg opcode src _115
    SDEQ	//  coins in_msg opcode _116
    IFJMP:<{	//  coins in_msg opcode
      1 2 BLKDROP2	//  in_msg opcode
      32 LSHIFT#	//  in_msg _119
      SWAP	//  _119 in_msg
      32 LDU	//  _119 _257 _256
      DROP	//  _119 _120
      ADD	//  request_nton
      DUP	//  request_nton request_nton
      1 EQINT	//  request_nton _125
      IFJMP:<{	//  request_nton
        DROP	// 
        TIM::send_schedule_loop_msg INLINECALLDICT
      }>	//  request_nton
      BALANCE	//  request_nton _129
      UNPAIR	//  request_nton _258 _259
      DROP	//  request_nton balance
      32 PUSHPOW2DEC	//  request_nton balance _132=4294967295
      NOW	//  request_nton balance _132=4294967295 _133
      SUB	//  request_nton balance time_to_unix_epoch_end
      s1 s2 XCPU	//  request_nton time_to_unix_epoch_end balance request_nton
      SUB	//  request_nton time_to_unix_epoch_end _136
      3611111 PUSHINT
      ROT	//  request_nton _136 _137=3611111 time_to_unix_epoch_end
      MUL	//  request_nton _136 _138
      LESS	//  request_nton _139
      105 THROWIF
      0 PUSHINT	//  request_nton _141=0
      24 PUSHINT	//  request_nton _141=0 _142=24
      NEWC	//  request_nton _141=0 _142=24 _143
      6 STU	//  request_nton _141=0 _145
      b{100} x{00} |+ x{15be3c3171911009bbcc473d07d8fc2bcc0c7192fed2237719da256e07fa7948} |+ PUSHSLICE	//  request_nton _141=0 _145 _146
      STSLICER	//  request_nton _141=0 _147
      ROT	//  _141=0 _147 request_nton
      STVARUINT16	//  _141=0 _148
      107 STU	//  _162
      ENDC	//  _163
      0 PUSHINT	//  _163 _164=0
      SENDRAWMSG
    }>	//  coins in_msg opcode
    4114815653 PUSHINT	//  coins in_msg opcode _167=4114815653
    NEQ	//  coins in_msg _168
    140 THROWIF
    32 LDU	//  coins schedule_at in_msg
    64 LDU	//  coins schedule_at forward_nton in_msg
    OVER
    10000000 PUSHINT	//  coins schedule_at forward_nton in_msg forward_nton _179=10000000
    LESS	//  coins schedule_at forward_nton in_msg _180
    100 THROWIF
    1805556 PUSHINT	//  coins schedule_at forward_nton in_msg _183=1805556
    0 PUSHINT	//  coins schedule_at forward_nton in_msg _183=1805556 _184=0
    s4 PUSH
    NOW	//  coins schedule_at forward_nton in_msg _183=1805556 _184=0 schedule_at _185
    SUB	//  coins schedule_at forward_nton in_msg _183=1805556 _184=0 _186
    MAX	//  coins schedule_at forward_nton in_msg _183=1805556 _187
    MUL	//  coins schedule_at forward_nton in_msg timer_work_cost
    s2 PUSH	//  coins schedule_at forward_nton in_msg timer_work_cost forward_nton
    ADD	//  coins schedule_at forward_nton in_msg _190
    400000000 PUSHINT	//  coins schedule_at forward_nton in_msg _190 _191=400000000
    ADD	//  coins schedule_at forward_nton in_msg _192
    s1 s4 XCHG	//  in_msg schedule_at forward_nton coins _192
    LESS	//  in_msg schedule_at forward_nton _193
    101 THROWIF
    64 PUSHPOW2	//  in_msg schedule_at forward_nton _195=18446744073709551616
    RAND	//  in_msg schedule_at forward_nton _196
    s0 s3 XCHG	//  _196 schedule_at forward_nton in_msg
    LDMSGADDR	//  _196 schedule_at forward_nton _197 in_msg
    LDREF	//  _196 schedule_at forward_nton _197 _267 _266
    DROP	//  _196 schedule_at forward_nton _197 _199
    TIM::create_bell INLINECALLDICT
    0 PUSHINT	//  _202=0
    24 PUSHINT	//  _202=0 _203=24
    NEWC	//  _202=0 _203=24 _204
    6 STU	//  _202=0 _206
    b{100} x{00} |+ x{15be3c3171911009bbcc473d07d8fc2bcc0c7192fed2237719da256e07fa7948} |+ PUSHSLICE	//  _202=0 _206 _207
    STSLICER	//  _202=0 _208
    200000000 PUSHINT	//  _202=0 _208 _209=200000000
    STVARUINT16	//  _202=0 _210
    107 STU	//  _224
    ENDC	//  _225
    1 PUSHINT	//  _225 _226=1
    SENDRAWMSG
  }>
  recv_external PROC:<{
    // 
  }>
  set_init_data PROC:<{
    // 
    NEWC	//  _1
    ENDC	//  v
    8589934590 PUSHINT	//  v _5
    NEWC	//  v _5 _6
    33 STU	//  v _8
    STREF	//  _9
    ENDC	//  _10
    c4 POP
  }>
  __test_donation PROC:<{
    // 
    set_init_data CALLDICT
    10000000000 PUSHINT	//  coins=10000000000
    0 PUSHINT	//  coins=10000000000 _4=0
    68056473384187692692674921486353642291 PUSHINT	//  coins=10000000000 _4=0 _5=68056473384187692692674921486353642291
    DUP	//  coins=10000000000 _4=0 _5=68056473384187692692674921486353642291 _6=68056473384187692692674921486353642291
    10 PUSHPOW2	//  coins=10000000000 _4=0 _5=68056473384187692692674921486353642291 _6=68056473384187692692674921486353642291 _7=1024
    6 PUSHINT	//  coins=10000000000 _4=0 _5=68056473384187692692674921486353642291 _6=68056473384187692692674921486353642291 _7=1024 _8=6
    NEWC	//  coins=10000000000 _4=0 _5=68056473384187692692674921486353642291 _6=68056473384187692692674921486353642291 _7=1024 _8=6 _9
    4 STU	//  coins=10000000000 _4=0 _5=68056473384187692692674921486353642291 _6=68056473384187692692674921486353642291 _7=1024 _11
    11 STU	//  coins=10000000000 _4=0 _5=68056473384187692692674921486353642291 _6=68056473384187692692674921486353642291 _13
    128 STU	//  coins=10000000000 _4=0 _5=68056473384187692692674921486353642291 _15
    128 STU	//  coins=10000000000 _4=0 _17
    2 STU	//  coins=10000000000 _19
    ENDC	//  coins=10000000000 half_full_msg
    NEWC	//  coins=10000000000 half_full_msg _22
    ENDC	//  coins=10000000000 half_full_msg body
    CONT:<{
      recv_internal CALLDICT
    }>	//  coins=10000000000 half_full_msg body _24
    SWAP	//  coins=10000000000 half_full_msg _24 body
    CTOS	//  coins=10000000000 half_full_msg _24 _26
    s3 s3 s0 XCHG3	//  _24 coins=10000000000 half_full_msg _26
    TRIPLE	//  _24 _25
    invoke_method CALLDICT	//  _28 _29
    2DROP	// 
  }>
  __test_schedules PROC:<{
    // 
    set_init_data CALLDICT
    100000000 PUSHINT	//  coins_1=100000000
    1000000000 PUSHINT	//  coins_1=100000000 coins_2=1000000000
    0 PUSHINT	//  coins_1=100000000 coins_2=1000000000 _6=0
    68056473384187692692674921486353642291 PUSHINT	//  coins_1=100000000 coins_2=1000000000 _6=0 _7=68056473384187692692674921486353642291
    DUP	//  coins_1=100000000 coins_2=1000000000 _6=0 _7=68056473384187692692674921486353642291 _8=68056473384187692692674921486353642291
    10 PUSHPOW2	//  coins_1=100000000 coins_2=1000000000 _6=0 _7=68056473384187692692674921486353642291 _8=68056473384187692692674921486353642291 _9=1024
    6 PUSHINT	//  coins_1=100000000 coins_2=1000000000 _6=0 _7=68056473384187692692674921486353642291 _8=68056473384187692692674921486353642291 _9=1024 _10=6
    NEWC	//  coins_1=100000000 coins_2=1000000000 _6=0 _7=68056473384187692692674921486353642291 _8=68056473384187692692674921486353642291 _9=1024 _10=6 _11
    4 STU	//  coins_1=100000000 coins_2=1000000000 _6=0 _7=68056473384187692692674921486353642291 _8=68056473384187692692674921486353642291 _9=1024 _13
    11 STU	//  coins_1=100000000 coins_2=1000000000 _6=0 _7=68056473384187692692674921486353642291 _8=68056473384187692692674921486353642291 _15
    128 STU	//  coins_1=100000000 coins_2=1000000000 _6=0 _7=68056473384187692692674921486353642291 _17
    128 STU	//  coins_1=100000000 coins_2=1000000000 _6=0 _19
    2 STU	//  coins_1=100000000 coins_2=1000000000 _21
    ENDC	//  coins_1=100000000 coins_2=1000000000 half_full_msg
    NEWC	//  coins_1=100000000 coins_2=1000000000 half_full_msg _24
    ENDC	//  coins_1=100000000 coins_2=1000000000 half_full_msg void
    500000000 PUSHINT	//  coins_1=100000000 coins_2=1000000000 half_full_msg void _28
    0 PUSHINT	//  coins_1=100000000 coins_2=1000000000 half_full_msg void _28 _29=0
    4114815653 PUSHINT	//  coins_1=100000000 coins_2=1000000000 half_full_msg void _28 _29=0 _30=4114815653
    NEWC	//  coins_1=100000000 coins_2=1000000000 half_full_msg void _28 _29=0 _30=4114815653 _31
    32 STU	//  coins_1=100000000 coins_2=1000000000 half_full_msg void _28 _29=0 _33
    32 STU	//  coins_1=100000000 coins_2=1000000000 half_full_msg void _28 _35
    64 STU	//  coins_1=100000000 coins_2=1000000000 half_full_msg void _37
    MYADDR	//  coins_1=100000000 coins_2=1000000000 half_full_msg void _37 _38
    STSLICER	//  coins_1=100000000 coins_2=1000000000 half_full_msg void _39
    STREF	//  coins_1=100000000 coins_2=1000000000 half_full_msg _40
    ENDC	//  coins_1=100000000 coins_2=1000000000 half_full_msg body
    CONT:<{
      recv_internal CALLDICT
    }>	//  coins_1=100000000 coins_2=1000000000 half_full_msg body _42
    OVER	//  coins_1=100000000 coins_2=1000000000 half_full_msg body _42 body
    CTOS	//  coins_1=100000000 coins_2=1000000000 half_full_msg body _42 _44
    s5 s3 s(-1) XCPUXC	//  _42 coins_2=1000000000 half_full_msg body coins_1=100000000 half_full_msg _44
    TRIPLE	//  _42 coins_2=1000000000 half_full_msg body _43
    s1 s4 XCHG	//  body coins_2=1000000000 half_full_msg _42 _43
    invoke_method_expect_fail CALLDICT	//  body coins_2=1000000000 half_full_msg _45
    DROP	//  body coins_2=1000000000 half_full_msg
    CONT:<{
      recv_internal CALLDICT
    }>	//  body coins_2=1000000000 half_full_msg _46
    s0 s3 XCHG	//  _46 coins_2=1000000000 half_full_msg body
    CTOS	//  _46 coins_2=1000000000 half_full_msg _48
    TRIPLE	//  _46 _47
    invoke_method CALLDICT	//  _50 _51
    2DROP	// 
  }>
  __test_self_tick_parsed_no_new PROC:<{
    // 
    set_init_data CALLDICT
    500000000 PUSHINT	//  coins=500000000
    0 PUSHINT	//  coins=500000000 _4=0
    7 PUSHINT	//  coins=500000000 _4=0 _5=7
    NEWC	//  coins=500000000 _4=0 _5=7 _6
    4 STU	//  coins=500000000 _4=0 _8
    b{100} x{FF} |+ x{2210202200000000000000000000000000000000000000000000000000000001} |+ PUSHSLICE	//  coins=500000000 _4=0 _8 _9
    STSLICER	//  coins=500000000 _4=0 _10
    2 STU	//  coins=500000000 _12
    ENDC	//  coins=500000000 half_full_msg
    NEWC	//  coins=500000000 half_full_msg _15
    ENDC	//  coins=500000000 half_full_msg body
    CONT:<{
      recv_internal CALLDICT
    }>	//  coins=500000000 half_full_msg body _17
    SWAP	//  coins=500000000 half_full_msg _17 body
    CTOS	//  coins=500000000 half_full_msg _17 _19
    s3 s3 s0 XCHG3	//  _17 coins=500000000 half_full_msg _19
    TRIPLE	//  _17 _18
    invoke_method CALLDICT	//  _26 _27
    2DROP	// 
    CONT:<{
      parse_one_action CALLDICT
    }>	//  _21
    c5 PUSH	//  _21 _23
    CTOS	//  _21 _24
    SINGLE	//  _21 _22
    invoke_method_expect_fail CALLDICT	//  _25
    DROP	// 
  }>
  __test_self_tick_parsed_with_next_tick PROC:<{
    // 
    NEWC	//  _1
    ENDC	//  v
    8589934556 PUSHINT	//  v _5
    NEWC	//  v _5 _6
    33 STU	//  v _8
    STREF	//  _9
    ENDC	//  _10
    c4 POP
    500000000 PUSHINT	//  coins=500000000
    0 PUSHINT	//  coins=500000000 _15=0
    7 PUSHINT	//  coins=500000000 _15=0 _16=7
    NEWC	//  coins=500000000 _15=0 _16=7 _17
    4 STU	//  coins=500000000 _15=0 _19
    b{100} x{FF} |+ x{2210202200000000000000000000000000000000000000000000000000000001} |+ PUSHSLICE	//  coins=500000000 _15=0 _19 _20
    STSLICER	//  coins=500000000 _15=0 _21
    2 STU	//  coins=500000000 _23
    ENDC	//  coins=500000000 half_full_msg
    NEWC	//  coins=500000000 half_full_msg _26
    ENDC	//  coins=500000000 half_full_msg body
    CONT:<{
      recv_internal CALLDICT
    }>	//  coins=500000000 half_full_msg body _28
    SWAP	//  coins=500000000 half_full_msg _28 body
    CTOS	//  coins=500000000 half_full_msg _28 _30
    s3 s3 s0 XCHG3	//  _28 coins=500000000 half_full_msg _30
    TRIPLE	//  _28 _29
    invoke_method CALLDICT	//  _37 _38
    2DROP	// 
    CONT:<{
      parse_one_action CALLDICT
    }>	//  _32
    c5 PUSH	//  _32 _34
    CTOS	//  _32 _35
    SINGLE	//  _32 _33
    invoke_method CALLDICT	//  _39 _40
    2DROP	// 
  }>
  __test_tick_requires_bell PROC:<{
    // 
    NEWC	//  _1
    ENDC	//  v
    33554396 PUSHINT	//  v _5
    NEWC	//  v _5 _6
    33 STU	//  v _8
    STREF	//  _9
    ENDC	//  _10
    c4 POP
    500000000 PUSHINT	//  coins=500000000
    0 PUSHINT	//  coins=500000000 _15=0
    7 PUSHINT	//  coins=500000000 _15=0 _16=7
    NEWC	//  coins=500000000 _15=0 _16=7 _17
    4 STU	//  coins=500000000 _15=0 _19
    b{100} x{FF} |+ x{2210202200000000000000000000000000000000000000000000000000000001} |+ PUSHSLICE	//  coins=500000000 _15=0 _19 _20
    STSLICER	//  coins=500000000 _15=0 _21
    2 STU	//  coins=500000000 _23
    ENDC	//  coins=500000000 half_full_msg
    NEWC	//  coins=500000000 half_full_msg _26
    ENDC	//  coins=500000000 half_full_msg body
    CONT:<{
      recv_internal CALLDICT
    }>	//  coins=500000000 half_full_msg body _28
    SWAP	//  coins=500000000 half_full_msg _28 body
    CTOS	//  coins=500000000 half_full_msg _28 _30
    s3 s3 s0 XCHG3	//  _28 coins=500000000 half_full_msg _30
    TRIPLE	//  _28 _29
    invoke_method_expect_fail CALLDICT	//  _31
    DROP	// 
  }>
  __test_tick_rings_bell PROC:<{
    // 
    NEWC	//  _1
    ENDC	//  v
    0 PUSHINT	//  v _3=0
    1 PUSHINT	//  v _3=0 _4=1
    16777198 PUSHINT	//  v _3=0 _4=1 _5=16777198
    NEWC	//  v _3=0 _4=1 _5=16777198 _6
    32 STU	//  v _3=0 _4=1 _8
    1 STU	//  v _3=0 _10
    MYADDR	//  v _3=0 _10 _11
    STSLICER	//  v _3=0 _12
    96 STU	//  v _14
    STREF	//  _15
    ENDC	//  _16
    c4 POP
    500000000 PUSHINT	//  coins=500000000
    0 PUSHINT	//  coins=500000000 _21=0
    7 PUSHINT	//  coins=500000000 _21=0 _22=7
    NEWC	//  coins=500000000 _21=0 _22=7 _23
    4 STU	//  coins=500000000 _21=0 _25
    b{100} x{FF} |+ x{2210202200000000000000000000000000000000000000000000000000000001} |+ PUSHSLICE	//  coins=500000000 _21=0 _25 _26
    STSLICER	//  coins=500000000 _21=0 _27
    2 STU	//  coins=500000000 _29
    ENDC	//  coins=500000000 half_full_msg
    NEWC	//  coins=500000000 half_full_msg _32
    ENDC	//  coins=500000000 half_full_msg body
    CONT:<{
      recv_internal CALLDICT
    }>	//  coins=500000000 half_full_msg body _34
    SWAP	//  coins=500000000 half_full_msg _34 body
    CTOS	//  coins=500000000 half_full_msg _34 _36
    s3 s3 s0 XCHG3	//  _34 coins=500000000 half_full_msg _36
    TRIPLE	//  _34 _35
    invoke_method CALLDICT	//  _43 _44
    2DROP	// 
    CONT:<{
      parse_one_action CALLDICT
    }>	//  _38
    c5 PUSH	//  _38 _40
    CTOS	//  _38 _41
    SINGLE	//  _38 _39
    invoke_method CALLDICT	//  _45 _46
    2DROP	// 
  }>
  __test_next_wakeup PROC:<{
    // 
    NEWC	//  _1
    ENDC	//  v
    0 PUSHINT	//  v _4=0
    NEWC	//  v _4=0 _5
    2 STU	//  v _7
    ENDC	//  v elr
    0 PUSHINT	//  v elr _10=0
    DUP	//  v elr _10=0 _11=0
    NEWC	//  v elr _10=0 _11=0 _12
    160 STU	//  v elr _10=0 _14
    2 STU	//  v elr _16
    s2 s(-1) PUXC	//  v elr v _16
    STREF	//  v elr _17
    MYADDR	//  v elr _17 _18
    STSLICER	//  v elr _19
    s1 s(-1) PUXC	//  v elr elr _19
    STREF	//  v elr _20
    STREF	//  v _21
    ENDC	//  v bell_init_data
    s0 s1 PUSH2	//  v bell_init_data bell_init_data v
    calc_bell_state_init_by_data INLINECALLDICT	//  v bell_init_data _24
    HASHCU	//  v bell_init_data bell_hash
    0 PUSHINT	//  v bell_init_data bell_hash _26=0
    10 PUSHPOW2	//  v bell_init_data bell_hash _26=0 _27=1024
    1 PUSHINT	//  v bell_init_data bell_hash _26=0 _27=1024 _28=1
    s2 PUSH	//  v bell_init_data bell_hash _26=0 _27=1024 _28=1 _29=0
    NEWC	//  v bell_init_data bell_hash _26=0 _27=1024 _28=1 _29=0 _30
    32 STU	//  v bell_init_data bell_hash _26=0 _27=1024 _28=1 _32
    1 STU	//  v bell_init_data bell_hash _26=0 _27=1024 _34
    11 STU	//  v bell_init_data bell_hash _26=0 _36
    s2 s(-1) PUXC	//  v bell_init_data bell_hash _26=0 bell_hash _36
    256 STU	//  v bell_init_data bell_hash _26=0 _38
    96 STU	//  v bell_init_data bell_hash _40
    s3 s(-1) PUXC	//  v bell_init_data bell_hash v _40
    STREF	//  v bell_init_data bell_hash _41
    ENDC	//  v bell_init_data bell_hash _42
    c4 POP
    500000000 PUSHINT	//  v bell_init_data bell_hash coins=500000000
    0 PUSHINT	//  v bell_init_data bell_hash coins=500000000 _47=0
    10 PUSHPOW2	//  v bell_init_data bell_hash coins=500000000 _47=0 _48=1024
    7 PUSHINT	//  v bell_init_data bell_hash coins=500000000 _47=0 _48=1024 _49=7
    NEWC	//  v bell_init_data bell_hash coins=500000000 _47=0 _48=1024 _49=7 _50
    4 STU	//  v bell_init_data bell_hash coins=500000000 _47=0 _48=1024 _52
    11 STU	//  v bell_init_data bell_hash coins=500000000 _47=0 _54
    s1 s3 XCHG	//  v bell_init_data _47=0 coins=500000000 bell_hash _54
    256 STU	//  v bell_init_data _47=0 coins=500000000 _56
    s1 s2 XCHG	//  v bell_init_data coins=500000000 _47=0 _56
    2 STU	//  v bell_init_data coins=500000000 _58
    ENDC	//  v bell_init_data coins=500000000 half_full_msg
    32 PUSHPOW2DEC	//  v bell_init_data coins=500000000 half_full_msg _61=4294967295
    0 PUSHINT	//  v bell_init_data coins=500000000 half_full_msg _61=4294967295 _62=0
    1 PUSHINT	//  v bell_init_data coins=500000000 half_full_msg _61=4294967295 _62=0 _63=1
    132892869 PUSHINT	//  v bell_init_data coins=500000000 half_full_msg _61=4294967295 _62=0 _63=1 _64=132892869
    NEWC	//  v bell_init_data coins=500000000 half_full_msg _61=4294967295 _62=0 _63=1 _64=132892869 _65
    32 STU	//  v bell_init_data coins=500000000 half_full_msg _61=4294967295 _62=0 _63=1 _67
    1 STU	//  v bell_init_data coins=500000000 half_full_msg _61=4294967295 _62=0 _69
    s1 s5 XCHG	//  v _62=0 coins=500000000 half_full_msg _61=4294967295 bell_init_data _69
    STREF	//  v _62=0 coins=500000000 half_full_msg _61=4294967295 _70
    s1 s5 XCHG	//  _61=4294967295 _62=0 coins=500000000 half_full_msg v _70
    STREF	//  _61=4294967295 _62=0 coins=500000000 half_full_msg _71
    s1 s3 XCHG	//  _61=4294967295 half_full_msg coins=500000000 _62=0 _71
    32 STU	//  _61=4294967295 half_full_msg coins=500000000 _73
    s1 s3 XCHG	//  coins=500000000 half_full_msg _61=4294967295 _73
    32 STU	//  coins=500000000 half_full_msg _75
    ENDC	//  coins=500000000 half_full_msg body
    CONT:<{
      recv_internal CALLDICT
    }>	//  coins=500000000 half_full_msg body _77
    SWAP	//  coins=500000000 half_full_msg _77 body
    CTOS	//  coins=500000000 half_full_msg _77 _79
    s3 s3 s0 XCHG3	//  _77 coins=500000000 half_full_msg _79
    TRIPLE	//  _77 _78
    invoke_method CALLDICT	//  _81 _82
    2DROP	// 
  }>
  __test_pull_ton_failure PROC:<{
    // 
    set_init_data CALLDICT
    10000000 PUSHINT	//  coins=10000000
    0 PUSHINT	//  coins=10000000 _4=0
    271227122260885430121863208292136417608 PUSHINT	//  coins=10000000 _4=0 _5=271227122260885430121863208292136417608
    28901545176508208970651527368903556139 PUSHINT	//  coins=10000000 _4=0 _5=271227122260885430121863208292136417608 _6=28901545176508208970651527368903556139
    10 PUSHPOW2	//  coins=10000000 _4=0 _5=271227122260885430121863208292136417608 _6=28901545176508208970651527368903556139 _7=1024
    6 PUSHINT	//  coins=10000000 _4=0 _5=271227122260885430121863208292136417608 _6=28901545176508208970651527368903556139 _7=1024 _8=6
    NEWC	//  coins=10000000 _4=0 _5=271227122260885430121863208292136417608 _6=28901545176508208970651527368903556139 _7=1024 _8=6 _9
    4 STU	//  coins=10000000 _4=0 _5=271227122260885430121863208292136417608 _6=28901545176508208970651527368903556139 _7=1024 _11
    11 STU	//  coins=10000000 _4=0 _5=271227122260885430121863208292136417608 _6=28901545176508208970651527368903556139 _13
    128 STU	//  coins=10000000 _4=0 _5=271227122260885430121863208292136417608 _15
    128 STU	//  coins=10000000 _4=0 _17
    2 STU	//  coins=10000000 _19
    ENDC	//  coins=10000000 half_full_msg
    500000000 PUSHINT	//  coins=10000000 half_full_msg _22=500000000
    NEWC	//  coins=10000000 half_full_msg _22=500000000 _23
    64 STU	//  coins=10000000 half_full_msg _25
    ENDC	//  coins=10000000 half_full_msg body
    CONT:<{
      recv_internal CALLDICT
    }>	//  coins=10000000 half_full_msg body _27
    SWAP	//  coins=10000000 half_full_msg _27 body
    CTOS	//  coins=10000000 half_full_msg _27 _29
    s3 s3 s0 XCHG3	//  _27 coins=10000000 half_full_msg _29
    TRIPLE	//  _27 _28
    invoke_method_expect_fail CALLDICT	//  _30
    DROP	// 
  }>
  __test_timer_init PROC:<{
    // 
    set_init_data CALLDICT
    CONT:<{
      recv_external CALLDICT
    }>	//  _1
    0 TUPLE	//  _1 _2
    invoke_method CALLDICT	//  _4 _5
    2DROP	// 
  }>
  __test_timer_scheduler PROC:<{
    // 
    set_init_data CALLDICT
    CONT:<{
      TIM::send_schedule_loop_msg CALLDICT
    }>	//  _1
    0 TUPLE	//  _1 _2
    invoke_method CALLDICT	//  _9 _10
    2DROP	// 
    CONT:<{
      parse_one_action CALLDICT
    }>	//  _4
    c5 PUSH	//  _4 _6
    CTOS	//  _4 _7
    SINGLE	//  _4 _5
    invoke_method CALLDICT	//  _11 _12
    2DROP	// 
  }>
}END>c
