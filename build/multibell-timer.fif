"Asm.fif" include
// automatically generated from `C:\Users\Tigr\AppData\Local\toncli\toncli\func-libs\error_codes.func` `C:\Users\Tigr\AppData\Local\toncli\toncli\func-libs\math.func` `C:\Users\Tigr\AppData\Local\toncli\toncli\func-libs\stdlib.func` `D:\TON_FunC\timer\func\timer.fc` incl:`func/utils-timer.fc` incl:`func/utils.fc` incl:`func/stdlib-ext.fc` 
PROGRAM{
  DECLPROC power
  DECLPROC sqrt
  DECLPROC avg
  DECLPROC exp
  DECLPROC log2
  DECLPROC swap_remove
  DECLPROC parse_one_action
  DECLPROC calc_bell_state_init_by_data
  DECLPROC init_bell_with_children
  DECLPROC init_bell_no_children
  DECLPROC bell_info_lr_replace_left
  DECLPROC bell_info_lr_replace_right
  DECLPROC TIM::send_schedule_loop_msg
  DECLPROC TIM::check_ident_proof
  DECLPROC TIM::store_ident_proof
  DECLPROC TIM::create_bell
  85654 DECLMETHOD get_root_bell
  92067 DECLMETHOD get_nft_address_by_index
  68445 DECLMETHOD get_nft_content
  102491 DECLMETHOD get_collection_data
  DECLPROC TIM::process_schedule
  DECLPROC recv_internal
  DECLPROC recv_external
  power PROCREF:<{
    //  x exponent
    OVER	//  x exponent x
    0 EQINT	//  x exponent _3
    IFJMP:<{	//  x exponent
      2DROP	// 
      0 PUSHINT	//  _4=0
    }>	//  x exponent
    DUP	//  x exponent exponent
    0 EQINT	//  x exponent _6
    IFJMP:<{	//  x exponent
      2DROP	// 
      1 PUSHINT	//  _7=1
    }>	//  x exponent
    OVER	//  x counter result
    WHILE:<{
      OVER	//  x counter result counter
      1 GTINT	//  x counter result _11
    }>DO<{	//  x counter result
      s2 PUSH	//  x counter result x
      MUL	//  x counter result
      SWAP	//  x result counter
      DEC	//  x result counter
      SWAP	//  x counter result
    }>	//  x counter result
    2 1 BLKDROP2	//  result
  }>
  sqrt PROCREF:<{
    //  x
    DUP	//  x x
    0 EQINT	//  x _2
    IFJMP:<{	//  x
      DROP	// 
      0 PUSHINT	//  _3=0
    }>	//  x
    DUP	//  x x
    4 LESSINT	//  x _5
    IFJMP:<{	//  x
      DROP	// 
      1 PUSHINT	//  _6=1
    }>	//  x
    DUP	//  x x
    INC	//  x _9
    1 RSHIFT#	//  x z
    OVER	//  x z y
    WHILE:<{
      2DUP	//  x z y z y
      LESS	//  x z y _13
    }>DO<{	//  x z y
      DROP	//  x z
      s0 s1 s0 PUSH3	//  x z y x z
      DIV	//  x z y _14
      ROT	//  x y _14 z
      ADD	//  x y _15
      1 RSHIFT#	//  x y z
      SWAP	//  x z y
    }>	//  x z y
    2 1 BLKDROP2	//  y
  }>
  avg PROCREF:<{
    //  x y
    ADD	//  _2
    1 RSHIFT#	//  _4
  }>
  exp PROCREF:<{
    //  x
    DUP	//  x x
    -1 GTINT	//  x _2
    IF:<{	//  x
      POW2	//  _3
    }>ELSE<{	//  x
      1 PUSHINT	//  x _6=1
      SWAP	//  _6=1 x
      NEGATE	//  _6=1 _8
      RSHIFT	//  _3
    }>
  }>
  log2 PROCREF:<{
    //  x
    0 PUSHINT	//  x n=0
    7 PUSHPOW2	//  x n=0 _3=128
    exp INLINECALLDICT	//  x n=0 _4
    s2 s(-1) PUXC	//  x n=0 x _4
    GEQ	//  x n=0 _5
    IF:<{	//  x n=0
      DROP	//  x
      128 RSHIFT#	//  x
      7 PUSHPOW2	//  x n
    }>	//  x n
    64 PUSHINT	//  x n _10=64
    exp INLINECALLDICT	//  x n _11
    s2 s(-1) PUXC	//  x n x _11
    GEQ	//  x n _12
    IF:<{	//  x n
      SWAP	//  n x
      64 RSHIFT#	//  n x
      SWAP	//  x n
      64 ADDCONST	//  x n
    }>	//  x n
    32 PUSHINT	//  x n _17=32
    exp INLINECALLDICT	//  x n _18
    s2 s(-1) PUXC	//  x n x _18
    GEQ	//  x n _19
    IF:<{	//  x n
      SWAP	//  n x
      32 RSHIFT#	//  n x
      SWAP	//  x n
      32 ADDCONST	//  x n
    }>	//  x n
    16 PUSHINT	//  x n _24=16
    exp INLINECALLDICT	//  x n _25
    s2 s(-1) PUXC	//  x n x _25
    GEQ	//  x n _26
    IF:<{	//  x n
      SWAP	//  n x
      16 RSHIFT#	//  n x
      SWAP	//  x n
      16 ADDCONST	//  x n
    }>	//  x n
    8 PUSHINT	//  x n _31=8
    exp INLINECALLDICT	//  x n _32
    s2 s(-1) PUXC	//  x n x _32
    GEQ	//  x n _33
    IF:<{	//  x n
      SWAP	//  n x
      8 RSHIFT#	//  n x
      SWAP	//  x n
      8 ADDCONST	//  x n
    }>	//  x n
    4 PUSHINT	//  x n _38=4
    exp INLINECALLDICT	//  x n _39
    s2 s(-1) PUXC	//  x n x _39
    GEQ	//  x n _40
    IF:<{	//  x n
      SWAP	//  n x
      4 RSHIFT#	//  n x
      SWAP	//  x n
      4 ADDCONST	//  x n
    }>	//  x n
    2 PUSHINT	//  x n _45=2
    exp INLINECALLDICT	//  x n _46
    s2 s(-1) PUXC	//  x n x _46
    GEQ	//  x n _47
    IF:<{	//  x n
      SWAP	//  n x
      2 RSHIFT#	//  n x
      SWAP	//  x n
      2 ADDCONST	//  x n
    }>	//  x n
    1 PUSHINT	//  x n _52=1
    exp INLINECALLDICT	//  x n _53
    s1 s2 XCHG	//  n x _53
    GEQ	//  n _54
    IF:<{	//  n
      INC	//  n
    }>	//  n
  }>
  swap_remove PROC:<{
    //  t index
    OVER	//  t index t
    TLEN	//  t index _3
    DEC	//  t index l
    s1 s(-1) PUXC	//  t index index l
    EQUAL	//  t index _6
    IFJMP:<{	//  t index
      DROP	//  t
      TPOP	//  t value
    }>	//  t index
    2DUP	//  t index t index
    INDEXVAR	//  t index value
    s0 s2 XCHG	//  value index t
    TPOP	//  value index t _12
    s1 s2 XCHG	//  value t index _12
    SETINDEXVAR	//  value t
    SWAP	//  t value
  }>
  parse_one_action PROC:<{
    //  actions
    LDREF	//  previous actions
    32 LDU	//  previous action_id actions
    OVER
    247711853 PUSHINT	//  previous action_id actions action_id _8=247711853
    EQUAL	//  previous action_id actions _9
    IF:<{	//  previous action_id actions
      NIP	//  previous actions
      4445 PUSHINT	//  previous actions _10=4445
      s0 DUMP	//  previous actions _11
      DROP	//  previous actions
      1397050948 PUSHINT	//  previous actions _12=1397050948
      s0 DUMP	//  previous actions _13
      DROP	//  previous actions
      8 LDU	//  previous _14 actions
      SWAP	//  previous actions _14
      s0 DUMP	//  previous actions _17
      DROP	//  previous actions
      LDREF	//  previous _55 _54
      DROP	//  previous _18
      s0 DUMP	//  previous _20
      DROP	//  previous
    }>ELSE<{	//  previous action_id actions
      OVER
      2907562126 PUSHINT	//  previous action_id actions action_id _21=2907562126
      EQUAL	//  previous action_id actions _22
      IF:<{	//  previous action_id actions
        NIP	//  previous actions
        4445 PUSHINT	//  previous actions _23=4445
        s0 DUMP	//  previous actions _24
        DROP	//  previous actions
        23438651275822149 PUSHINT	//  previous actions _25=23438651275822149
        s0 DUMP	//  previous actions _26
        DROP	//  previous actions
        LDREF	//  previous _57 _56
        DROP	//  previous _27
        s0 DUMP	//  previous _29
        DROP	//  previous
      }>ELSE<{	//  previous action_id actions
        OVER
        921090057 PUSHINT	//  previous action_id actions action_id _30=921090057
        EQUAL	//  previous action_id actions _31
        IF:<{	//  previous action_id actions
          NIP	//  previous actions
          4445 PUSHINT	//  previous actions _32=4445
          s0 DUMP	//  previous actions _33
          DROP	//  previous actions
          23157172037899845 PUSHINT	//  previous actions _34=23157172037899845
          s0 DUMP	//  previous actions _35
          DROP	//  previous actions
          8 LDU	//  previous _36 actions
          SWAP	//  previous actions _36
          s0 DUMP	//  previous actions _39
          DROP	//  previous actions
          LDDICT	//  previous _61 _60
          DROP	//  previous _40
          s0 DUMP	//  previous _42
          DROP	//  previous
        }>ELSE<{	//  previous action_id actions
          DROP	//  previous action_id
          s0 DUMP	//  previous _44
          DROP	//  previous
          100 THROW
        }>
      }>
    }>
    CTOS	//  _47
  }>
  calc_bell_state_init_by_data PROCREF:<{
    //  bell_init_data bell_code
    6 PUSHINT	//  bell_init_data bell_code _2=6
    NEWC	//  bell_init_data bell_code _2=6 _3
    5 STU	//  bell_init_data bell_code _5
    STREF	//  bell_init_data _6
    STREF	//  _7
    ENDC	//  _8
  }>
  init_bell_with_children PROCREF:<{
    //  priority time value dest fwd_body core_address children bell_code root
    s0 s8 XCHG
    NEWC	//  root time value dest fwd_body core_address children bell_code priority _10
    64 STU	//  root time value dest fwd_body core_address children bell_code _12
    s1 s7 XCHG	//  root bell_code value dest fwd_body core_address children time _12
    32 STU	//  root bell_code value dest fwd_body core_address children _14
    s5 s(-1) PUXC	//  root bell_code value dest fwd_body core_address children value _14
    64 STU	//  root bell_code value dest fwd_body core_address children _16
    s0 s4 XCHG2	//  root bell_code value children fwd_body core_address _16 dest
    STSLICER	//  root bell_code value children fwd_body core_address _17
    s1 s2 XCHG	//  root bell_code value children core_address fwd_body _17
    STREF	//  root bell_code value children core_address _18
    SWAP	//  root bell_code value children _18 core_address
    STSLICER	//  root bell_code value children _19
    s1 s(-1) PUXC	//  root bell_code value children children _19
    STREF	//  root bell_code value children _20
    STREF	//  root bell_code value init_data
    ENDC	//  root bell_code value _23
    ROT	//  root value _23 bell_code
    calc_bell_state_init_by_data INLINECALLDICT	//  root value state_init
    6 PUSHINT	//  root value state_init _25=6
    OVER	//  root value state_init _25=6 state_init
    HASHCU	//  root value state_init _25=6 _26
    10 PUSHPOW2	//  root value state_init _25=6 _26 _27=1024
    16 PUSHINT	//  root value state_init _25=6 _26 _27=1024 _28=16
    NEWC	//  root value state_init _25=6 _26 _27=1024 _28=16 _29
    6 STU	//  root value state_init _25=6 _26 _27=1024 _31
    11 STU	//  root value state_init _25=6 _26 _33
    256 STU	//  root value state_init _25=6 _35
    s0 s3 XCHG
    600000000 PUSHINT	//  root _35 state_init _25=6 value _36=600000000
    ADD	//  root _35 state_init _25=6 _37
    s4 PUSH	//  root _35 state_init _25=6 _37 root
    AND	//  root _35 state_init _25=6 _38
    s1 s3 XCHG	//  root _25=6 state_init _35 _38
    STVARUINT16	//  root _25=6 state_init _39
    s1 s2 XCHG	//  root state_init _25=6 _39
    108 STU	//  root state_init _53
    s1 s(-1) PUXC	//  root state_init state_init _53
    STREF	//  root state_init _54
    ENDC	//  root state_init _55
    64 PUSHINT	//  root state_init _55 _56=64
    s0 s3 XCHG	//  _56=64 state_init _55 root
    NOT	//  _56=64 state_init _55 _57
    s1 s3 XCHG	//  _55 state_init _56=64 _57
    AND	//  _55 state_init _58
    s1 s2 XCHG	//  state_init _55 _58
    SENDRAWMSG
    HASHCU	//  _60
  }>
  init_bell_no_children PROCREF:<{
    //  priority time value dest fwd_body core_address bell_code root
    0 PUSHINT	//  priority time value dest fwd_body core_address bell_code root _8=0
    NEWC	//  priority time value dest fwd_body core_address bell_code root _8=0 _9
    2 STU	//  priority time value dest fwd_body core_address bell_code root _11
    ENDC	//  priority time value dest fwd_body core_address bell_code root _12
    -ROT	//  priority time value dest fwd_body core_address _12 bell_code root
    init_bell_with_children INLINECALLDICT	//  _13
  }>
  bell_info_lr_replace_left PROC:<{
    //  left_addr left_priority left_time right_child
    10 PUSHPOW2	//  left_addr left_priority left_time right_child _4=1024
    1 PUSHINT	//  left_addr left_priority left_time right_child _4=1024 _5=1
    NEWC	//  left_addr left_priority left_time right_child _4=1024 _5=1 _6
    1 STU	//  left_addr left_priority left_time right_child _4=1024 _8
    11 STU	//  left_addr left_priority left_time right_child _10
    s1 s4 XCHG	//  right_child left_priority left_time left_addr _10
    256 STU	//  right_child left_priority left_time _12
    s1 s2 XCHG	//  right_child left_time left_priority _12
    64 STU	//  right_child left_time _14
    32 STU	//  right_child _16
    SWAP	//  _16 right_child
    STSLICER	//  _17
    ENDC	//  _18
  }>
  bell_info_lr_replace_right PROC:<{
    //  left_child right_addr right_priority right_time
    10 PUSHPOW2	//  left_child right_addr right_priority right_time _4=1024
    1 PUSHINT	//  left_child right_addr right_priority right_time _4=1024 _5=1
    s0 s5 XCHG2	//  _4=1024 right_addr right_priority right_time _5=1 left_child
    1 STU	//  _4=1024 right_addr right_priority right_time _7
    s1 s4 XCHG	//  right_time right_addr right_priority _4=1024 _7
    11 STU	//  right_time right_addr right_priority _9
    s1 s2 XCHG	//  right_time right_priority right_addr _9
    256 STU	//  right_time right_priority _11
    64 STU	//  right_time _13
    32 STU	//  _15
    ENDC	//  _16
  }>
  TIM::send_schedule_loop_msg PROCREF:<{
    // 
    0 PUSHINT	//  _0=0
    24 PUSHINT	//  _0=0 _1=24
    NEWC	//  _0=0 _1=24 _2
    6 STU	//  _0=0 _4
    b{100} x{FF} |+ x{2210202200000000000000000000000000000000000000000000000000000001} |+ PUSHSLICE	//  _0=0 _4 _5
    STSLICER	//  _0=0 _6
    500000000 PUSHINT	//  _0=0 _6 _7=500000000
    STVARUINT16	//  _0=0 _8
    107 STU	//  _22
    ENDC	//  _23
    0 PUSHINT	//  _23 _24=0
    SENDRAWMSG
  }>
  TIM::check_ident_proof PROCREF:<{
    //  source proof
    1 LDU	//  source _2 proof
    SWAP	//  source proof _2
    0 EQINT	//  source proof _6
    IFJMP:<{	//  source proof
      2DROP	// 
      114 THROW
      PUSHNULL	//  _9
    }>	//  source proof
    SWAP	//  proof source
    11 LDU	//  proof _11 source
    SWAP
    10 PUSHPOW2	//  proof source _11 _14=1024
    NEQ	//  proof source _15
    110 THROWIF
    SWAP	//  source proof
    LDREF	//  source bell_init proof
    LDREF	//  source bell_init bell_code proof
    c4 PUSH	//  source bell_init bell_code proof _24
    CTOS	//  source bell_init bell_code proof own_data
    s2 PUSH	//  source bell_init bell_code proof own_data bell_code
    HASHCU	//  source bell_init bell_code proof own_data _27
    SWAP	//  source bell_init bell_code proof _27 own_data
    LDREF	//  source bell_init bell_code proof _27 _97 _96
    DROP	//  source bell_init bell_code proof _27 _28
    HASHCU	//  source bell_init bell_code proof _27 _30
    NEQ	//  source bell_init bell_code proof _31
    114 THROWIF
    s2 s1 PUXC	//  source bell_init proof bell_init bell_code
    calc_bell_state_init_by_data INLINECALLDICT	//  source bell_init proof bell_state_init
    s0 s3 XCHG	//  bell_state_init bell_init proof source
    256 LDU	//  bell_state_init bell_init proof _99 _98
    DROP	//  bell_state_init bell_init proof _36
    s0 s3 XCHG	//  _36 bell_init proof bell_state_init
    HASHCU	//  _36 bell_init proof _39
    s1 s3 XCHG	//  proof bell_init _36 _39
    NEQ	//  proof bell_init _40
    111 THROWIF
    CTOS	//  proof bell_init
    160 PUSHINT	//  proof bell_init _45=160
    SDSKIPFIRST	//  proof bell_init
    LDMSGADDR	//  proof _101 _100
    NIP	//  proof bell_init
    LDREF	//  proof _103 _102
    NIP	//  proof bell_init
    LDMSGADDR	//  proof _52 bell_init
    MYADDR	//  proof _52 bell_init _54
    s1 s2 XCHG	//  proof bell_init _52 _54
    SDEQ	//  proof bell_init _55
    112 THROWIFNOT
    LDREF	//  proof children bell_init
    LDREF	//  proof children _109 _108
    DROP	//  proof children init_children
    OVER	//  proof children init_children children
    HASHCU	//  proof children init_children _64
    SWAP	//  proof children _64 init_children
    HASHCU	//  proof children _64 _65
    NEQ	//  proof children _66
    113 THROWIF
    CTOS	//  proof children
    1 LDU	//  proof _70 children
    SWAP	//  proof children _70
    IF:<{	//  proof children
      LDMSGADDR	//  proof _113 _112
      NIP	//  proof children
      96 PUSHINT	//  proof children _76=96
      SDSKIPFIRST	//  proof children
    }>	//  proof children
    1 LDU	//  proof _78 children
    SWAP	//  proof children _78
    IF:<{	//  proof children
      LDMSGADDR	//  proof _117 _116
      NIP	//  proof children
      96 PUSHINT	//  proof children _84=96
      SDSKIPFIRST	//  proof children
    }>	//  proof _87
    DROP	//  proof
  }>
  TIM::store_ident_proof PROCREF:<{
    //  msg
    c4 PUSH	//  msg _2
    CTOS	//  msg d
    LDREF	//  msg _11 _10
    DROP	//  msg _4
    0 PUSHINT
    ROT	//  _4 _6=0 msg
    1 STU	//  _4 _8
    STREF	//  _9
  }>
  TIM::create_bell PROCREF:<{
    //  priority time value dest fwd_body
    c4 PUSH	//  priority time value dest fwd_body _6
    CTOS	//  priority time value dest fwd_body timer_old_data
    32 LDU	//  priority time value dest fwd_body old_lm_schedule timer_old_data
    s1 s5 PUSH2	//  priority time value dest fwd_body old_lm_schedule timer_old_data old_lm_schedule time
    MIN	//  priority time value dest fwd_body old_lm_schedule timer_old_data leftmost_schedule
    s0 s2 XCHG
    32 PUSHPOW2DEC	//  priority time value dest fwd_body leftmost_schedule timer_old_data old_lm_schedule _14=4294967295
    EQUAL	//  priority time value dest fwd_body leftmost_schedule timer_old_data _15
    IF:<{	//  priority time value dest fwd_body leftmost_schedule timer_old_data
      TIM::send_schedule_loop_msg INLINECALLDICT
    }>	//  priority time value dest fwd_body leftmost_schedule timer_old_data
    LDREF	//  priority time value dest fwd_body leftmost_schedule bell_code timer_old_data
    1 PUSHINT	//  priority time value dest fwd_body leftmost_schedule bell_code timer_old_data _21=1
    s0 s3 XCHG
    NEWC	//  priority time value dest fwd_body _21=1 bell_code timer_old_data leftmost_schedule _22
    32 STU	//  priority time value dest fwd_body _21=1 bell_code timer_old_data _24
    s1 s3 XCHG	//  priority time value dest fwd_body timer_old_data bell_code _21=1 _24
    1 STU	//  priority time value dest fwd_body timer_old_data bell_code timer_new_data
    s0 s2 XCHG	//  priority time value dest fwd_body timer_new_data bell_code timer_old_data
    1 LDU	//  priority time value dest fwd_body timer_new_data bell_code _27 timer_old_data
    SWAP	//  priority time value dest fwd_body timer_new_data bell_code timer_old_data _27
    1 EQINT	//  priority time value dest fwd_body timer_new_data bell_code timer_old_data _31
    IF:<{	//  priority time value dest fwd_body timer_new_data bell_code timer_old_data
      LDMSGADDR	//  priority time value dest fwd_body timer_new_data bell_code root_addr timer_old_data
      64 LDU	//  priority time value dest fwd_body timer_new_data bell_code root_addr root_priority timer_old_data
      s9 s1 PUSH2	//  priority time value dest fwd_body timer_new_data bell_code root_addr root_priority timer_old_data priority root_priority
      EQUAL	//  priority time value dest fwd_body timer_new_data bell_code root_addr root_priority timer_old_data _40
      300 THROWIF
      s1 s9 PUSH2	//  priority time value dest fwd_body timer_new_data bell_code root_addr root_priority timer_old_data root_priority priority
      GREATER	//  priority time value dest fwd_body timer_new_data bell_code root_addr root_priority timer_old_data _42
      IF:<{	//  priority time value dest fwd_body timer_new_data bell_code root_addr root_priority timer_old_data
        s4 s2 XCPU	//  priority time value dest fwd_body timer_old_data bell_code root_addr root_priority timer_new_data root_addr
        STSLICER	//  priority time value dest fwd_body timer_old_data bell_code root_addr root_priority timer_new_data
        64 STU	//  priority time value dest fwd_body timer_old_data bell_code root_addr timer_new_data
        s0 s3 XCHG2	//  priority time value dest fwd_body root_addr bell_code timer_new_data timer_old_data
        STSLICER	//  priority time value dest fwd_body root_addr bell_code timer_new_data
        4227836706 PUSHINT	//  priority time value dest fwd_body root_addr bell_code timer_new_data _50=4227836706
        0 PUSHINT	//  priority time value dest fwd_body root_addr bell_code timer_new_data _50=4227836706 _51=0
        24 PUSHINT	//  priority time value dest fwd_body root_addr bell_code timer_new_data _50=4227836706 _51=0 _52=24
        NEWC	//  priority time value dest fwd_body root_addr bell_code timer_new_data _50=4227836706 _51=0 _52=24 _53
        6 STU	//  priority time value dest fwd_body root_addr bell_code timer_new_data _50=4227836706 _51=0 _55
        s0 s5 XCHG2	//  priority time value dest fwd_body _51=0 bell_code timer_new_data _50=4227836706 _55 root_addr
        STSLICER	//  priority time value dest fwd_body _51=0 bell_code timer_new_data _50=4227836706 _56
        s7 PUSH
        700000000 PUSHINT	//  priority time value dest fwd_body _51=0 bell_code timer_new_data _50=4227836706 _56 value _57=700000000
        ADD	//  priority time value dest fwd_body _51=0 bell_code timer_new_data _50=4227836706 _56 _58
        STVARUINT16	//  priority time value dest fwd_body _51=0 bell_code timer_new_data _50=4227836706 _59
        s1 s4 XCHG	//  priority time value dest fwd_body _50=4227836706 bell_code timer_new_data _51=0 _59
        107 STU	//  priority time value dest fwd_body _50=4227836706 bell_code timer_new_data _73
        s1 s3 XCHG	//  priority time value dest fwd_body timer_new_data bell_code _50=4227836706 _73
        32 STU	//  priority time value dest fwd_body timer_new_data bell_code _75
        s1 s7 XCHG	//  bell_code time value dest fwd_body timer_new_data priority _75
        64 STU	//  bell_code time value dest fwd_body timer_new_data _77
        s1 s5 XCHG	//  bell_code timer_new_data value dest fwd_body time _77
        32 STU	//  bell_code timer_new_data value dest fwd_body _79
        s1 s3 XCHG	//  bell_code timer_new_data fwd_body dest value _79
        64 STU	//  bell_code timer_new_data fwd_body dest _81
        SWAP	//  bell_code timer_new_data fwd_body _81 dest
        STSLICER	//  bell_code timer_new_data fwd_body _82
        STREF	//  bell_code timer_new_data _83
        TIM::store_ident_proof INLINECALLDICT	//  bell_code timer_new_data _84
        ENDC	//  bell_code timer_new_data _85
        0 PUSHINT	//  bell_code timer_new_data _85 _86=0
        SENDRAWMSG
      }>ELSE<{	//  priority time value dest fwd_body timer_new_data bell_code root_addr root_priority timer_old_data
        NEWC	//  priority time value dest fwd_body timer_new_data bell_code root_addr root_priority timer_old_data bell_info_lr
        SWAP	//  priority time value dest fwd_body timer_new_data bell_code root_addr root_priority bell_info_lr timer_old_data
        32 LDU	//  priority time value dest fwd_body timer_new_data bell_code root_addr root_priority bell_info_lr _171 _170
        DROP	//  priority time value dest fwd_body timer_new_data bell_code root_addr root_priority bell_info_lr root_time
        s0 s9 PUSH2	//  priority time value dest fwd_body timer_new_data bell_code root_addr root_priority bell_info_lr root_time root_time time
        LESS	//  priority time value dest fwd_body timer_new_data bell_code root_addr root_priority bell_info_lr root_time _94
        IF:<{	//  priority time value dest fwd_body timer_new_data bell_code root_addr root_priority bell_info_lr root_time
          1 PUSHINT
          ROT	//  priority time value dest fwd_body timer_new_data bell_code root_addr root_priority root_time _96=1 bell_info_lr
          1 STU	//  priority time value dest fwd_body timer_new_data bell_code root_addr root_priority root_time bell_info_lr
          s0 s3 XCHG2	//  priority time value dest fwd_body timer_new_data bell_code root_time root_priority bell_info_lr root_addr
          STSLICER	//  priority time value dest fwd_body timer_new_data bell_code root_time root_priority bell_info_lr
          64 STU	//  priority time value dest fwd_body timer_new_data bell_code root_time bell_info_lr
          32 STU	//  priority time value dest fwd_body timer_new_data bell_code bell_info_lr
          0 PUSHINT	//  priority time value dest fwd_body timer_new_data bell_code bell_info_lr _108=0
          SWAP	//  priority time value dest fwd_body timer_new_data bell_code _108=0 bell_info_lr
          1 STU	//  priority time value dest fwd_body timer_new_data bell_code bell_info_lr
        }>ELSE<{	//  priority time value dest fwd_body timer_new_data bell_code root_addr root_priority bell_info_lr root_time
          1 PUSHINT
          ROT	//  priority time value dest fwd_body timer_new_data bell_code root_addr root_priority root_time _112=1 bell_info_lr
          2 STU	//  priority time value dest fwd_body timer_new_data bell_code root_addr root_priority root_time bell_info_lr
          s0 s3 XCHG2	//  priority time value dest fwd_body timer_new_data bell_code root_time root_priority bell_info_lr root_addr
          STSLICER	//  priority time value dest fwd_body timer_new_data bell_code root_time root_priority bell_info_lr
          64 STU	//  priority time value dest fwd_body timer_new_data bell_code root_time bell_info_lr
          32 STU	//  priority time value dest fwd_body timer_new_data bell_code bell_info_lr
        }>
        10 PUSHPOW2	//  priority time value dest fwd_body timer_new_data bell_code bell_info_lr _124=1024
        s0 s3 XCHG2	//  priority time value dest fwd_body bell_info_lr bell_code _124=1024 timer_new_data
        11 STU	//  priority time value dest fwd_body bell_info_lr bell_code timer_new_data
        MYADDR	//  priority time value dest fwd_body bell_info_lr bell_code timer_new_data _128
        s0 s3 XCHG	//  priority time value dest fwd_body _128 bell_code timer_new_data bell_info_lr
        ENDC	//  priority time value dest fwd_body _128 bell_code timer_new_data _129
        -1 PUSHINT	//  priority time value dest fwd_body _128 bell_code timer_new_data _129 _130=-1
        s9 PUSH
        s6 s9 XCPU
        s0 s6 XCHG
        s5 s9 XCHG
        s4 s8 XCHG
        s3 s9 s2 XCPUXC	//  priority time bell_code timer_new_data priority time value dest fwd_body _128 _129 bell_code _130=-1
        init_bell_with_children INLINECALLDICT	//  priority time bell_code timer_new_data _131
        SWAP	//  priority time bell_code _131 timer_new_data
        256 STU	//  priority time bell_code timer_new_data
        s1 s3 XCHG	//  bell_code time priority timer_new_data
        64 STU	//  bell_code time timer_new_data
        32 STU	//  bell_code timer_new_data
      }>
    }>ELSE<{	//  priority time value dest fwd_body timer_new_data bell_code timer_old_data
      DROP	//  priority time value dest fwd_body timer_new_data bell_code
      10 PUSHPOW2
      ROT	//  priority time value dest fwd_body bell_code _141=1024 timer_new_data
      11 STU	//  priority time value dest fwd_body bell_code timer_new_data
      MYADDR	//  priority time value dest fwd_body bell_code timer_new_data _145
      -1 PUSHINT	//  priority time value dest fwd_body bell_code timer_new_data _145 _146=-1
      s8 PUSH
      s5 s8 XCPU
      s0 s5 XCHG
      s4 s8 XCHG
      s3 s7 XCHG
      s1 s7 s0 XCHG3
      s0 s7 PUXC	//  priority time timer_new_data bell_code priority time value dest fwd_body _145 bell_code _146=-1
      init_bell_no_children INLINECALLDICT	//  priority time timer_new_data bell_code _147
      ROT	//  priority time bell_code _147 timer_new_data
      256 STU	//  priority time bell_code timer_new_data
      s1 s3 XCHG	//  bell_code time priority timer_new_data
      64 STU	//  bell_code time timer_new_data
      32 STU	//  bell_code timer_new_data
    }>
    SWAP	//  timer_new_data bell_code
    STREFR	//  timer_new_data
    ENDC	//  _158
    c4 POP
  }>
  get_root_bell PROC:<{
    // 
    c4 PUSH	//  _1
    CTOS	//  d
    32 PUSHINT	//  d _4=32
    SDSKIPFIRST	//  d
    1 LDU	//  _6 d
    SWAP	//  d _6
    IFJMP:<{	//  d
      LDMSGADDR	//  _15 _14
      DROP	//  _9
    }>	//  d
    DROP	// 
    PUSHNULL	//  _11
  }>
  get_nft_address_by_index PROC:<{
    //  index
    10 PUSHPOW2	//  index _1=1024
    NEWC	//  index _1=1024 _2
    11 STU	//  index _4
    256 STU	//  _6
    ENDC	//  _7
    CTOS	//  _8
  }>
  get_nft_content PROC:<{
    //  index individual
    NIP	//  individual
    ISNULL	//  _3
    100 THROWIFNOT
    NEWDICT	//  _5
    0 PUSHINT	//  _5 _6=0
    NEWC	//  _5 _6=0 _7
    2 STU	//  _5 _9
    STDICT	//  _10
    ENDC	//  _11
  }>
  get_collection_data PROC:<{
    // 
    -1 PUSHINT	//  _0=-1
    0 PUSHINT	//  _0=-1 _1=0
    PUSHNULL	//  _0=-1 _1=0 _2
    get_nft_content CALLDICT	//  _0=-1 _3
    b{00} PUSHSLICE	//  _0=-1 _3 _4
  }>
  TIM::process_schedule PROC:<{
    // 
    c4 PUSH	//  _1
    CTOS	//  d
    32 LDU	//  next d
    OVER
    NOW	//  next d next _7
    LEQ	//  next d _8
    IF:<{	//  next d
      NIP	//  d
      1 LDU	//  _10 d
      SWAP	//  d _10
      0 EQINT	//  d _14
      130 THROWIF
      1933303943 PUSHINT	//  d _16=1933303943
      0 PUSHINT	//  d _16=1933303943 _17=0
      24 PUSHINT	//  d _16=1933303943 _17=0 _18=24
      NEWC	//  d _16=1933303943 _17=0 _18=24 _19
      6 STU	//  d _16=1933303943 _17=0 _21
      s0 s3 XCHG	//  _21 _16=1933303943 _17=0 d
      LDMSGADDR	//  _21 _16=1933303943 _17=0 _57 _56
      DROP	//  _21 _16=1933303943 _17=0 _22
      s1 s3 XCHG	//  _17=0 _16=1933303943 _21 _22
      STSLICER	//  _17=0 _16=1933303943 _24
      100000000 PUSHINT	//  _17=0 _16=1933303943 _24 _25=100000000
      STVARUINT16	//  _17=0 _16=1933303943 _26
      s1 s2 XCHG	//  _16=1933303943 _17=0 _26
      107 STU	//  _16=1933303943 _40
      32 STU	//  _42
      TIM::store_ident_proof INLINECALLDICT	//  _43
      ENDC	//  _44
      0 PUSHINT	//  _44 _45=0
      SENDRAWMSG
    }>ELSE<{	//  next d
      DROP	//  next
      32 PUSHPOW2DEC	//  next _47=4294967295
      LESS	//  _48
      IF:<{	// 
        TIM::send_schedule_loop_msg INLINECALLDICT
      }>	// 
    }>
    180 PUSHINT	//  _50=180
    s0 DUMP	//  _51
    DROP	// 
  }>
  recv_internal PROC:<{
    //  coins in_msg_full in_msg
    OVER	//  coins in_msg_full in_msg in_msg_full
    HASHCU ADDRAND BALANCE UNPAIR DROP NOW XOR ADDRAND LTIME ADDRAND
    SWAP	//  coins in_msg in_msg_full
    CTOS	//  coins in_msg in_msg_full
    4 LDU	//  coins in_msg bounced in_msg_full
    LDMSGADDR	//  coins in_msg bounced _226 _225
    DROP	//  coins in_msg bounced src
    b{100} x{FF} |+ x{2210202200000000000000000000000000000000000000000000000000000001} |+ PUSHSLICE	//  coins in_msg bounced src _13
    s1 s(-1) PUXC	//  coins in_msg bounced src src _13
    SDEQ	//  coins in_msg bounced src _14
    IFJMP:<{	//  coins in_msg bounced src
      4 BLKDROP	// 
      TIM::process_schedule CALLDICT
    }>	//  coins in_msg bounced src
    SWAP
    1 PUSHINT	//  coins in_msg src bounced _16=1
    AND	//  coins in_msg src _17
    IFJMP:<{	//  coins in_msg src
      3 BLKDROP	// 
    }>	//  coins in_msg src
    OVER	//  coins in_msg src in_msg
    SBITS	//  coins in_msg src _18
    32 LESSINT	//  coins in_msg src _20
    IFJMP:<{	//  coins in_msg src
      3 BLKDROP	// 
    }>	//  coins in_msg src
    SWAP	//  coins src in_msg
    32 LDU	//  coins src opcode in_msg
    OVER
    132892869 PUSHINT	//  coins src opcode in_msg opcode _25=132892869
    EQUAL	//  coins src opcode in_msg _26
    IFJMP:<{	//  coins src opcode in_msg
      NIP
      s2 POP	//  in_msg src
      s0 s1 PUXC	//  src src in_msg
      TIM::check_ident_proof INLINECALLDICT	//  src in_msg
      c4 PUSH	//  src in_msg _29
      CTOS	//  src in_msg old_timer_data
      32 LDU	//  src in_msg _32 old_timer_data
      s2 PUSH	//  src in_msg _32 old_timer_data in_msg
      32 PLDU	//  src in_msg _32 old_timer_data _36
      s1 s2 XCHG	//  src in_msg old_timer_data _32 _36
      NEQ	//  src in_msg old_timer_data _37
      120 THROWIF
      1 LDU	//  src in_msg _40 old_timer_data
      SWAP	//  src in_msg old_timer_data _40
      0 EQINT	//  src in_msg old_timer_data _44
      121 THROWIF
      SWAP	//  src old_timer_data in_msg
      32 LDU	//  src old_timer_data _234 _233
      DROP	//  src old_timer_data next_time
      NEWC	//  src old_timer_data next_time _51
      32 STU	//  src old_timer_data new_timer_data
      SWAP	//  src new_timer_data old_timer_data
      LDMSGADDR	//  src new_timer_data root_addr old_timer_data
      s1 s3 PUXC	//  old_timer_data new_timer_data root_addr root_addr src
      SDEQ	//  old_timer_data new_timer_data root_addr _58
      122 THROWIF
      STSLICER	//  old_timer_data new_timer_data
      SWAP	//  new_timer_data old_timer_data
      LDREF	//  new_timer_data _63 old_timer_data
      -ROT	//  old_timer_data new_timer_data _63
      STREFR	//  old_timer_data new_timer_data
      SWAP	//  new_timer_data old_timer_data
      STSLICER	//  new_timer_data
      ENDC	//  _68
      c4 POP
      TIM::send_schedule_loop_msg INLINECALLDICT
    }>	//  coins src opcode in_msg
    OVER
    3558267919 PUSHINT	//  coins src opcode in_msg opcode _71=3558267919
    EQUAL	//  coins src opcode in_msg _72
    IFJMP:<{	//  coins src opcode in_msg
      NIP
      s2 POP	//  in_msg src
      s0 s1 PUXC	//  src src in_msg
      TIM::check_ident_proof INLINECALLDICT	//  src in_msg
      c4 PUSH	//  src in_msg _75
      CTOS	//  src in_msg old_timer_data
      32 PUSHINT	//  src in_msg old_timer_data _78=32
      SDSKIPFIRST	//  src in_msg old_timer_data
      1 LDU	//  src in_msg _81 old_timer_data
      SWAP	//  src in_msg old_timer_data _81
      126 THROWIFNOT
      LDMSGADDR	//  src in_msg root_addr old_timer_data
      s0 s3 XCHG	//  old_timer_data in_msg root_addr src
      SDEQ	//  old_timer_data in_msg _89
      127 THROWIFNOT
      DUP	//  old_timer_data in_msg in_msg_copy
      32 PUSHPOW2DEC	//  old_timer_data in_msg in_msg_copy next_time=4294967295
      SWAP	//  old_timer_data in_msg next_time=4294967295 in_msg_copy
      1 LDU	//  old_timer_data in_msg next_time=4294967295 _94 in_msg_copy
      SWAP	//  old_timer_data in_msg next_time=4294967295 in_msg_copy _94
      IF:<{	//  old_timer_data in_msg next_time=4294967295 in_msg_copy
        NIP	//  old_timer_data in_msg in_msg_copy
        LDMSGADDR	//  old_timer_data in_msg _246 _245
        NIP	//  old_timer_data in_msg in_msg_copy
        64 PUSHINT	//  old_timer_data in_msg in_msg_copy _100=64
        SDSKIPFIRST	//  old_timer_data in_msg in_msg_copy
        32 LDU	//  old_timer_data in_msg _248 _247
        DROP	//  old_timer_data in_msg next_time
        TIM::send_schedule_loop_msg INLINECALLDICT
      }>ELSE<{
        DROP	//  old_timer_data in_msg next_time
      }>
      s0 s2 XCHG	//  next_time in_msg old_timer_data
      LDREF	//  next_time in_msg _250 _249
      DROP	//  next_time in_msg _107
      s0 s2 XCHG
      NEWC	//  _107 in_msg next_time _109
      32 STU	//  _107 in_msg _111
      SWAP	//  _107 _111 in_msg
      STSLICER	//  _107 _112
      STREF	//  new_timer_data
      ENDC	//  _114
      c4 POP
    }>	//  coins src opcode in_msg
    b{100} x{00} |+ x{15be3c3171911009bbcc473d07d8fc2bcc0c7192fed2237719da256e07fa7948} |+ PUSHSLICE	//  coins src opcode in_msg _116
    s1 s3 XCHG	//  coins in_msg opcode src _116
    SDEQ	//  coins in_msg opcode _117
    IFJMP:<{	//  coins in_msg opcode
      1 2 BLKDROP2	//  in_msg opcode
      32 LSHIFT#	//  in_msg _120
      SWAP	//  _120 in_msg
      32 LDU	//  _120 _252 _251
      DROP	//  _120 _121
      ADD	//  request_nton
      DUP	//  request_nton request_nton
      1 EQINT	//  request_nton _126
      IFJMP:<{	//  request_nton
        DROP	// 
        TIM::send_schedule_loop_msg INLINECALLDICT
      }>	//  request_nton
      0 PUSHINT	//  request_nton _136=0
      24 PUSHINT	//  request_nton _136=0 _137=24
      NEWC	//  request_nton _136=0 _137=24 _138
      6 STU	//  request_nton _136=0 _140
      b{100} x{00} |+ x{15be3c3171911009bbcc473d07d8fc2bcc0c7192fed2237719da256e07fa7948} |+ PUSHSLICE	//  request_nton _136=0 _140 _141
      STSLICER	//  request_nton _136=0 _142
      ROT	//  _136=0 _142 request_nton
      STVARUINT16	//  _136=0 _143
      107 STU	//  _157
      ENDC	//  _158
      0 PUSHINT	//  _158 _159=0
      SENDRAWMSG
    }>	//  coins in_msg opcode
    4114815653 PUSHINT	//  coins in_msg opcode _162=4114815653
    NEQ	//  coins in_msg _163
    140 THROWIF
    32 LDU	//  coins schedule_at in_msg
    64 LDU	//  coins schedule_at forward_nton in_msg
    OVER
    10000000 PUSHINT	//  coins schedule_at forward_nton in_msg forward_nton _174=10000000
    LESS	//  coins schedule_at forward_nton in_msg _175
    100 THROWIF
    1805556 PUSHINT	//  coins schedule_at forward_nton in_msg _178=1805556
    0 PUSHINT	//  coins schedule_at forward_nton in_msg _178=1805556 _179=0
    s4 PUSH
    NOW	//  coins schedule_at forward_nton in_msg _178=1805556 _179=0 schedule_at _180
    SUB	//  coins schedule_at forward_nton in_msg _178=1805556 _179=0 _181
    MAX	//  coins schedule_at forward_nton in_msg _178=1805556 _182
    MUL	//  coins schedule_at forward_nton in_msg timer_work_cost
    s2 PUSH	//  coins schedule_at forward_nton in_msg timer_work_cost forward_nton
    ADD	//  coins schedule_at forward_nton in_msg _185
    700000000 PUSHINT	//  coins schedule_at forward_nton in_msg _185 _186=700000000
    ADD	//  coins schedule_at forward_nton in_msg _187
    s1 s4 XCHG	//  in_msg schedule_at forward_nton coins _187
    LESS	//  in_msg schedule_at forward_nton _188
    101 THROWIF
    64 PUSHPOW2	//  in_msg schedule_at forward_nton _190=18446744073709551616
    RAND	//  in_msg schedule_at forward_nton _191
    s0 s3 XCHG	//  _191 schedule_at forward_nton in_msg
    LDMSGADDR	//  _191 schedule_at forward_nton _192 in_msg
    LDREF	//  _191 schedule_at forward_nton _192 _262 _261
    DROP	//  _191 schedule_at forward_nton _192 _194
    TIM::create_bell INLINECALLDICT
    0 PUSHINT	//  _197=0
    24 PUSHINT	//  _197=0 _198=24
    NEWC	//  _197=0 _198=24 _199
    6 STU	//  _197=0 _201
    b{100} x{00} |+ x{15be3c3171911009bbcc473d07d8fc2bcc0c7192fed2237719da256e07fa7948} |+ PUSHSLICE	//  _197=0 _201 _202
    STSLICER	//  _197=0 _203
    100000000 PUSHINT	//  _197=0 _203 _204=100000000
    STVARUINT16	//  _197=0 _205
    107 STU	//  _219
    ENDC	//  _220
    0 PUSHINT	//  _220 _221=0
    SENDRAWMSG
  }>
  recv_external PROC:<{
    // 
  }>
}END>c
boc>B "build/boc/contract.boc" B>file
