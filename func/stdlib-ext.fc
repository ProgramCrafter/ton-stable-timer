int tuple_length(tuple t) asm "TLEN";
forall X -> (tuple, X) ~tpop(tuple t) asm "TPOP";
forall X -> int is_null(X x) asm "ISNULL";
forall X -> int is_int(X x) asm "<{ TRY:<{ 0 PUSHINT ADD DROP -1 PUSHINT }>CATCH<{ 2DROP 0 PUSHINT }> }>CONT 1 1 CALLXARGS";
forall X -> int is_cell(X x) asm "<{ TRY:<{ CTOS DROP -1 PUSHINT }>CATCH<{ 2DROP 0 PUSHINT }> }>CONT 1 1 CALLXARGS";
forall X -> int is_slice(X x) asm "<{ TRY:<{ SBITS DROP -1 PUSHINT }>CATCH<{ 2DROP 0 PUSHINT }> }>CONT 1 1 CALLXARGS";
forall X -> int is_tuple(X x) asm "ISTUPLE";
forall X -> cell force_cast_to_cell(X x) asm "NOP";
forall X -> slice force_cast_to_slice(X x) asm "NOP";
forall X -> tuple force_cast_to_tuple(X x) asm "NOP";

;; builder store_builder(builder to, builder what) asm(what to) "STB";
forall X -> X tuple_index_var(tuple t, int index) asm "INDEXVAR";
forall X -> tuple tuple_set_index(tuple t, X value, int index) asm "SETINDEXVAR";

forall X -> (tuple, X) swap_remove(tuple t, int index)  method_id {
  int l = t.tuple_length() - 1;
  if (index == l) {
    X value = t~tpop();
    return (t, value);
  }
  X value = tuple_index_var(t, index);
  t = t.tuple_set_index(index, t~tpop());
  return (t, value);
}

builder store_vu16(builder b, int x) asm "STVARUINT16";
(slice, int) load_vu16(slice s) asm( -> 1 0) "LDVARUINT16";

(builder, ()) ~store_ref(builder b, cell c) asm(c b) "STREF";
(builder, ()) ~store_slice(builder b, slice s) asm "STSLICER";

int equal_slices(slice a, slice b) asm "SDEQ";

(slice, ()) parse_one_action(slice actions) impure method_id {
  cell previous = actions~load_ref();
  
  int action_id = actions~load_uint(32);
  
  if (action_id == 0x0ec3c86d) {
    ~dump(4445);
    ~dump(0x53454e44);
    
    ~dump(actions~load_uint(8));

    ~dump(actions~load_ref());
  } elseif (action_id == 0xad4de08e) {
    ~dump(4445);
    ~dump(0x534554434f4445);
    
    ~dump(actions~load_ref());
  } elseif (action_id == 0x36e6b809) {
    ~dump(4445);
    ~dump(0x52455345525645);
    
    ~dump(actions~load_uint(8));
    ~dump(actions~load_dict());
  } else {
    action_id~dump();
    
    throw(100);
  }
  
  return (previous.begin_parse(), ());
}
