;; Timer smart-contract for scheduling messages.
;; (c) ProgramCrafter, 2022-2023


const int milliton = 1000000;
const int ton      = 1000000000;
const int MOD      = 998244353;

const slice bounce_mc_addr = "-1:2023050200000000000000000000000000000000000000000000000000000001"a;
const int   op::schedule   = 0x24E5F1CA;    ;; zlib.crc32(b'op::schedule')
const int   bounty         = 400000000;


(cell, ()) udict_new_ref(cell dict, int key_len, int index, cell value) impure asm(value index dict key_len) "DICTUADDREF 170 THROWIFNOT";
int equal_slices(slice a, slice b) asm "SDEQ";

cell get_bounce_msg() asm """
  // intrinsic to store grams
  { -1 { 1+ 2dup 8 * ufits } until rot over 4 u, -rot 8 * u, } : Gram,

  <b
    b{011000} s,                                 // .store_uint(0x18, 6)
    b{100} s,                                    // .store_slice(bounce_mc_addr)
      x{FF} s,
      x{2023050200000000000000000000000000000000000000000000000000000001} s,
    80000000 Gram,                               // .store_coins(80 * milliton)
    0 107 u,                                     // .store_uint(0, 107)
  b> PUSHREF
""";

cell get_bounty_msg(slice owner, int actual_bounty) inline {
  return begin_cell()
    .store_uint(0x10, 6)
    .store_slice(owner)
    .store_coins(actual_bounty)
    .store_uint(0, 107 + 32)
    .store_slice("Bounty")
    .end_cell();
}

(cell, slice, int) load_contract() inline {
  slice ds = get_data().begin_parse();
  cell schedule = ds~load_dict();
  (slice owner, int furthest_schedule) = ds.load_uint(64);
  return (schedule, owner, furthest_schedule);
}

cell serialize_contract(cell schedule, slice owner, int furthest) inline {
  return begin_cell()
    .store_dict(schedule)
    .store_uint(furthest, 64)
    .store_slice(owner)
    .end_cell();
}

int load_workchain() inline {
  ;; in case someone accidentaly deploys timer in masterchain
  (int workchain, _) = parse_std_addr(my_address());
  return workchain;
}

int calc_storage_fee_raw(int cells, int bits, int time) inline {
  cell prices_by_workchain = config_param(18);
  (slice prices, _) = prices_by_workchain.idict_get?(32, load_workchain());
  
  ;; _#cc utime_since:uint32 bit_price_ps:uint64 cell_price_ps:uint64 ...
  prices~skip_bits(40);
  
  int base_fee = prices~load_uint(64) * bits;
  base_fee += prices~load_uint(64) * cells;
  return base_fee * time / 65536;              ;; to be optimized with MULRSHIFT
}

int calc_storage_fee(cell in, int time) inline {
  (int cells, int bits, _) = in.compute_data_size(100000);
  return calc_storage_fee_raw(cells, bits, time);
}

(slice, ()) load_state_init(slice cs) impure inline {
  if (cs~load_uint(1)) { cs~skip_bits(5); }     ;; Maybe (## 5)
  if (cs~load_uint(1)) { cs~skip_bits(2); }     ;; Maybe TickTock
  if (cs~load_uint(1)) { cs~load_ref();   }     ;; Maybe ^Cell
  if (cs~load_uint(1)) { cs~load_ref();   }     ;; Maybe ^Cell
  cs~load_dict();
  return (cs, ());
}

int validate_msg_value(cell msg) impure inline {
  int value = 0;
  slice msg = msg.begin_parse();
  
  ;; info
  if (msg~load_uint(1)) {   ;; ext_out_msg_info
    throw_unless(100, msg~load_uint(1) == 1);
    msg~load_msg_addr();
    msg~load_msg_addr();
  } else {                  ;; int_msg_info
    throw_if(110, msg~load_uint(3) & 3);  ;; we require non-bounceable not bounced message
    msg~load_msg_addr();
    throw_if(111, equal_slices(bounce_mc_addr, msg~load_msg_addr()));
    value = msg~load_coins();
    throw_unless(113, value >= 10 * milliton);
    throw_unless(112, dict_empty?(msg~load_dict()));
    msg~load_coins();
    msg~load_coins();
  }
  msg~skip_bits(96);
  
  ;; init
  if (msg~load_uint(1)) {  ;; Maybe (Either StateInit ^StateInit)
    if (msg~load_uint(1)) {
      msg~load_ref().begin_parse().load_state_init();
    } else {
      msg~load_state_init();
    }
  }
  
  ;; body
  if (msg~load_uint(1)) {
    msg~load_ref();
  }

  msg~impure_touch();
  
  return value;
}

(cell, int) do_schedule((cell, slice, int) old_state, slice sender, int time, cell msg) impure inline {
  (cell schedule, slice owner, int furthest) = old_state;
  int old_fee = get_data().calc_storage_fee(furthest - now());
  int timer_fee = 0;
  
  if (dict_empty?(schedule)) {
    furthest = now();
  }
  if (time > furthest) {
    owner = sender;
    timer_fee = 3 * milliton * (time - furthest);
    furthest = time;
  }
  schedule~udict_new_ref(96, (time << 32) | (cur_lt() % MOD), msg);
  cell new_storage = serialize_contract(schedule, owner, furthest);
  int new_fee = new_storage.calc_storage_fee(furthest - now());
  
  int storage_fee = new_fee - old_fee;
  int reserve = 100 * milliton;
  
  return (new_storage, storage_fee + bounty + timer_fee + reserve + validate_msg_value(msg));
}

int continue_parsing(int success, int scheduled_at, int current_time) inline {
  ;; lazy evaluation required, because `scheduled_at` is nullable
  if (~ success) {
    return 0;
  }
  return current_time >= (scheduled_at >> 32);
}

(cell, ()) process_schedule(cell scheduled) impure inline {
  int current_time = now();
  
  (int scheduled_at, cell scheduled_msg, int success) = udict_get_min_ref?(scheduled, 96);
  while (continue_parsing(success, scheduled_at, current_time)) {
    send_raw_message(scheduled_msg, 0);
    
    int t = scheduled~udict_delete?(96, scheduled_at);
    (scheduled_at, scheduled_msg, success) = udict_get_min_ref?(scheduled, 96);
  }
  
  return (scheduled, ());
}

() recv_internal(int coins, cell in_msg_full, slice in_msg_body) {
  slice in_msg = in_msg_full.begin_parse();
  
  if (in_msg~load_uint(4) & 1) {
    ;; bounced message: tick
    
    accept_message();
    
    (cell scheduled, slice owner, int furthest) = load_contract();
    scheduled~process_schedule();
    
    if (dict_empty?(scheduled)) {
      send_raw_message(get_bounty_msg(owner, 0), 160);       ;; destroying timer
    } else {
      set_data(serialize_contract(scheduled, owner, furthest));
      send_raw_message(get_bounce_msg(), 0);
    }
  } elseif (in_msg_body.slice_empty?()) {
    
  } elseif (in_msg_body~load_uint(32) == op::schedule) {
    slice sender = in_msg~load_msg_addr();
    int time = in_msg_body~load_uint(64);
    cell msg = in_msg_body~load_ref();
    
    (cell scheduled, slice owner, int furthest) = load_contract();
    (cell new_storage, int required_coins) = do_schedule((scheduled, owner, furthest), sender, time, msg);
    throw_unless(140, coins >= required_coins);
    
    if (dict_empty?(scheduled)) {
      send_raw_message(get_bounce_msg(), 0);
    }
    send_raw_message(get_bounty_msg(owner, bounty), 0);
    set_data(new_storage);
  }
}
